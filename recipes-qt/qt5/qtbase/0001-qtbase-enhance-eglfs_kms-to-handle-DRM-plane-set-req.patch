From e4976c2623cc86981091ed6773613a1378039c3f Mon Sep 17 00:00:00 2001
From: Eric Ruei <e-ruei1@ti.com>
Date: Tue, 30 May 2017 16:48:22 -0400
Subject: [PATCH] qtbase: enhance eglfs_kms to handle DRM plane set request 
 from application

To take the full advantages of the hardware overlay features provided by
the advanced DSS IP, the eglfs_kms QPA is modified to use DRM atomic
mode set functions and handle the DRM plane set requests from the
applications to synchronize the DRM page flip events.
In this mode of operation, the QT still owns the primary (CRTC) DRM plane
and the application may own the DRM overlay planes optionally.

Upstream-Status: Inappropriate
- This patch is not appropriate for upstream because it is a TI-specific enhancement
for advanced DSS within some Sitera device such as AM57xx.
- This patch may be dropped or re-implemented for the next QT release

Signed-off-by: Eric Ruei <e-ruei1@ti.com>
---
 .../eglfs_kms/qeglfskmsgbmdevice.cpp               | 233 ++++++++++++++++++++-
 .../eglfs_kms/qeglfskmsgbmdevice.h                 |  59 ++++++
 .../eglfs_kms/qeglfskmsgbmintegration.cpp          |  22 ++
 .../eglfs_kms/qeglfskmsgbmintegration.h            |   2 +
 .../eglfs_kms/qeglfskmsgbmscreen.cpp               |  84 +++++++-
 .../eglfs_kms_support/qeglfskmsdevice.cpp          | 131 +++++++++++-
 .../eglfs_kms_support/qeglfskmsscreen.h            |   2 +
 src/plugins/platforms/eglfs/eglfs_device_lib.pro   |   3 +-
 .../platforms/eglfs/qeglfsdeviceintegration.cpp    |  16 ++
 .../platforms/eglfs/qeglfsdeviceintegration.h      |   2 +
 src/plugins/platforms/eglfs/qeglfsintegration.cpp  |  21 +-
 11 files changed, 558 insertions(+), 17 deletions(-)

diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmdevice.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmdevice.cpp
index 278752b..0e851d9 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmdevice.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmdevice.cpp
@@ -52,8 +52,12 @@
 
 QT_BEGIN_NAMESPACE
 
+#include <sys/time.h>
+
 Q_DECLARE_LOGGING_CATEGORY(qLcEglfsKmsDebug)
 
+QMutex QEglFSKmsGbmDevice::m_pageFlipQueueMutex;
+
 void QEglFSKmsGbmDevice::pageFlipHandler(int fd, unsigned int sequence, unsigned int tv_sec, unsigned int tv_usec, void *user_data)
 {
     Q_UNUSED(fd);
@@ -61,15 +65,52 @@ void QEglFSKmsGbmDevice::pageFlipHandler(int fd, unsigned int sequence, unsigned
     Q_UNUSED(tv_sec);
     Q_UNUSED(tv_usec);
 
-    QEglFSKmsScreen *screen = static_cast<QEglFSKmsScreen *>(user_data);
-    screen->flipFinished();
+    if(user_data == Q_NULLPTR)
+    {
+        // TBD: Error Handling
+        qWarning() << "pageFlipHandler() is called with  user_data = NULL";
+        return;
+    }
+
+    QEglFSKmsGbmDevice *eglFSKmsGbmDevice = (QEglFSKmsGbmDevice *)user_data;
+
+    QQueue<drmPageFlipEvent_t*> *pageFlipEventQueue = eglFSKmsGbmDevice->pageFlipEventQueue();
+
+    if(pageFlipEventQueue == Q_NULLPTR)
+    {
+        qWarning() << "pageFlipHandler(): there is no pageFlipEventQueue";
+        return;
+    }
+
+    while(!pageFlipEventQueue->isEmpty())
+    {
+        drmPageFlipEvent_t *pageFlipEvent = pageFlipEventQueue->dequeue();
+
+        if(pageFlipEvent->handler)
+            pageFlipEvent->handler(fd, sequence, tv_sec, tv_usec, pageFlipEvent->user_data);
+        else if (pageFlipEvent->user_data)
+        {
+            QEglFSKmsGbmScreen *screen = static_cast<QEglFSKmsGbmScreen *>(pageFlipEvent->user_data);
+            screen->flipFinished();
+        }
+        delete pageFlipEvent;
+    }
+
+    delete pageFlipEventQueue;
+
+    eglFSKmsGbmDevice->pageFlipped(true);
+
 }
 
 QEglFSKmsGbmDevice::QEglFSKmsGbmDevice(QEglFSKmsIntegration *integration, const QString &path)
     : QEglFSKmsDevice(integration, path)
     , m_gbm_device(Q_NULLPTR)
     , m_globalCursor(Q_NULLPTR)
+    , m_pageFlipped(true)
 {
+
+    m_thread = new QEglFSKmsGbmThread((void *) this);
+    m_pageFlipQueue = new QQueue<drmPageFlipReq_t*>;
 }
 
 bool QEglFSKmsGbmDevice::open()
@@ -94,26 +135,41 @@ bool QEglFSKmsGbmDevice::open()
         return false;
     }
 
+    drmSetClientCap(fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1);
+    drmSetClientCap(fd, DRM_CLIENT_CAP_ATOMIC, 1);
     setFd(fd);
 
+    m_thread->start();
+
     return true;
 }
 
 void QEglFSKmsGbmDevice::close()
 {
+    // Terminate the device thread
+    qWarning("QEglFSKmsGbmDevice::close(): Terminate device thread");
+    m_thread->aborted(true);
+    m_thread->wait();
+    qWarning("QEglFSKmsGBmDevice::close(): Device thread terminated");
+
     if (m_gbm_device) {
         gbm_device_destroy(m_gbm_device);
         m_gbm_device = Q_NULLPTR;
     }
 
     if (fd() != -1) {
+        drmSetClientCap(fd(), DRM_CLIENT_CAP_UNIVERSAL_PLANES, 0);
+        drmSetClientCap(fd(), DRM_CLIENT_CAP_ATOMIC, 0);
         qt_safe_close(fd());
+        qWarning("QEglFSKmsGBmDevice::close(): close DRM %d", fd());
         setFd(-1);
     }
 
     if (m_globalCursor)
         m_globalCursor->deleteLater();
     m_globalCursor = Q_NULLPTR;
+    qWarning("QEglFSKmsGbmDevice::close(): delete global cursor");
+
 }
 
 EGLNativeDisplayType QEglFSKmsGbmDevice::nativeDisplay() const
@@ -131,8 +187,46 @@ QPlatformCursor *QEglFSKmsGbmDevice::globalCursor() const
     return m_globalCursor;
 }
 
+void QEglFSKmsGbmDevice::pageFlipped(bool value)
+{
+    m_pageFlipped = value;
+}
+
+QQueue<drmPageFlipEvent_t*> *QEglFSKmsGbmDevice::pageFlipEventQueue() const
+{
+    return m_pageFlipEventQueue;
+}
+
+
+int QEglFSKmsGbmDevice::sendPageFlipRequest(uint32_t plane_id, uint32_t prop_fbid, uint32_t buffer_id, page_flip_handler handler, void* user_data)
+{
+
+    drmPageFlipReq_t *pageFlipReq = new drmPageFlipReq_t;
+
+    if(!pageFlipReq)
+    {
+        return -1;
+    }
+
+    pageFlipReq->plane_id = plane_id;
+    pageFlipReq->prop_fbid = prop_fbid;
+    pageFlipReq->buffer_id = buffer_id;
+    pageFlipReq->event.user_data = user_data;
+    pageFlipReq->event.handler = handler;
+
+
+    //TBD: Need to add mutex protection
+    m_pageFlipQueueMutex.lock();
+    m_pageFlipQueue->enqueue(pageFlipReq);
+    m_pageFlipQueueMutex.unlock();
+
+    return 0;
+}
+
+
 void QEglFSKmsGbmDevice::handleDrmEvent()
 {
+#if 0
     drmEventContext drmEvent = {
         DRM_EVENT_CONTEXT_VERSION,
         Q_NULLPTR,      // vblank handler
@@ -140,6 +234,141 @@ void QEglFSKmsGbmDevice::handleDrmEvent()
     };
 
     drmHandleEvent(fd(), &drmEvent);
+#endif
+}
+
+void QEglFSKmsGbmDevice::waitForEvent()
+{
+    drmEventContext event = {
+        DRM_EVENT_CONTEXT_VERSION,
+        Q_NULLPTR,      // vblank handler
+        pageFlipHandler // page flip handler
+    };
+
+    struct timeval timeout;
+
+	fd_set fds;
+	int res;
+
+    // TBD: check pageFlipped sould be false
+    m_pageFlipped = false;
+    timeout.tv_sec = 0;
+    timeout.tv_usec = 500 * 1000;
+
+	while (!m_pageFlipped)
+	{
+
+		FD_ZERO(&fds);
+		FD_SET(fd(), &fds);
+
+		res = select(fd() + 1, &fds, NULL, NULL, &timeout);
+		switch (res)
+		{
+			case 0:
+				qErrnoWarning("%s: Timeout waiting for flip event, call drmHandleEvent() manually", __func__);
+				drmHandleEvent(fd(), &event);
+				if(m_pageFlipped)
+				{
+					qErrnoWarning("%s: drmEvent does not occur, call pageFlipHandler() manually", __func__);
+					pageFlipHandler(fd(), 0, 0, 0, (void *) this);
+				}
+				return;
+			case -1:
+				if (errno != EINTR)
+				{
+					qErrnoWarning("%s: Select failed waiting for flip event", __func__);
+					return;
+				}
+				break;
+			default:
+				drmHandleEvent(fd(), &event);
+				break;
+		}
+	}
+}
+
+void QEglFSKmsGbmDevice::procPageFlipReq(void)
+{
+    bool err = false;
+
+    m_pageFlipQueueMutex.lock();
+    if(m_pageFlipQueue->isEmpty())
+    {
+        m_pageFlipQueueMutex.unlock();
+        return;
+    }
+
+	drmModeAtomicReqPtr req = drmModeAtomicAlloc();
+
+    m_pageFlipEventQueue = new QQueue<drmPageFlipEvent_t*>;
+
+    //Mutex protection may be rquired
+    while(!m_pageFlipQueue->isEmpty())
+    {
+        drmPageFlipReq_t* pageFlipReq = m_pageFlipQueue->dequeue();
+        drmPageFlipEvent_t *pageFlipEvent = new drmPageFlipEvent_t;
+
+        drmModeAtomicAddProperty(req, pageFlipReq->plane_id,
+                                 pageFlipReq->prop_fbid, pageFlipReq->buffer_id);
+
+        // Construct page flip callback
+        pageFlipEvent->handler = pageFlipReq->event.handler;
+        pageFlipEvent->user_data = pageFlipReq->event.user_data;
+        m_pageFlipEventQueue->enqueue(pageFlipEvent);
+
+        delete pageFlipReq;
+    }
+    m_pageFlipQueueMutex.unlock();
+
+	int ret = drmModeAtomicCommit(fd(), req,
+		  DRM_MODE_ATOMIC_TEST_ONLY, 0);
+
+	if(!ret){
+	    drmModeAtomicCommit(fd(), req,
+		    DRM_MODE_PAGE_FLIP_EVENT | DRM_MODE_ATOMIC_NONBLOCK, (void *)this);
+	}
+    else {
+		qErrnoWarning("procPageFlipReq(): failed to add crtc atomically");
+
+        // cleanup the event queue
+        while(!m_pageFlipEventQueue->isEmpty())
+        {
+            drmPageFlipEvent_t *pageFlipEvent = m_pageFlipEventQueue->dequeue();
+            delete pageFlipEvent;
+        }
+        delete m_pageFlipEventQueue;
+        err = true;
+	}
+
+	drmModeAtomicFree(req);
+
+    if(!err)
+        waitForEvent();
+
+}
+
+QEglFSKmsGbmThread:: QEglFSKmsGbmThread(void* owner)
+    : m_owner(owner)
+    , m_aborted(false)
+{
+}
+
+void QEglFSKmsGbmThread::aborted(bool value)
+{
+    m_aborted = value;
+}
+
+
+void QEglFSKmsGbmThread::run() {
+
+    QEglFSKmsGbmDevice *eglKmsGbmDevice = (QEglFSKmsGbmDevice *)m_owner;
+
+    while(!m_aborted) {
+        eglKmsGbmDevice->procPageFlipReq();
+        msleep(2);
+    }
+
+    //TBD: Add clean up code
 }
 
 QEglFSKmsScreen *QEglFSKmsGbmDevice::createScreen(QEglFSKmsIntegration *integration, QEglFSKmsDevice *device, QEglFSKmsOutput output, QPoint position)
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmdevice.h b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmdevice.h
index 6a45f9f..acf4521 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmdevice.h
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmdevice.h
@@ -45,8 +45,52 @@
 #include "qeglfskmsgbmcursor.h"
 #include "qeglfskmsdevice.h"
 
+#include <QtCore>
+#include <QQueue>
+
+#include <xf86drm.h>
+#include <xf86drmMode.h>
 #include <gbm.h>
 
+class QEglFSKmsGbmThread : public QThread
+{
+
+public:
+    QEglFSKmsGbmThread(void* owner);
+    void aborted(bool);
+
+private:
+    void* m_owner;
+    bool m_aborted;
+    void run();
+};
+
+typedef void (*page_flip_handler)(int fd,
+                                  unsigned int sequence,
+                                  unsigned int tv_sec,
+                                  unsigned int tv_usec,
+                                  void *user_data);
+
+typedef struct drmPageFlipEvent_s
+{
+    void*    user_data;
+    page_flip_handler   handler;
+
+} drmPageFlipEvent_t;
+
+typedef struct drmPageFlipReq_s
+{
+    //Plane page filp parameters
+    uint32_t plane_id;
+    uint32_t prop_fbid;
+    uint32_t buffer_id;
+
+    //Page Flip Event parameters
+    drmPageFlipEvent_t event;
+
+} drmPageFlipReq_t;
+
+
 QT_BEGIN_NAMESPACE
 
 class QEglFSKmsScreen;
@@ -71,18 +115,33 @@ public:
                                           QEglFSKmsOutput output,
                                           QPoint position) Q_DECL_OVERRIDE;
 
+    int  sendPageFlipRequest(uint32_t plane_id, uint32_t prop_fbid, uint32_t buffer_id, page_flip_handler handler, void* user_data);
+
+    void procPageFlipReq(void);
+
+    void pageFlipped(bool);
+
+    QQueue<drmPageFlipEvent_t*> *pageFlipEventQueue() const;
+
 private:
     Q_DISABLE_COPY(QEglFSKmsGbmDevice)
 
     gbm_device *m_gbm_device;
 
     QEglFSKmsGbmCursor *m_globalCursor;
+    bool m_pageFlipped;
+    QEglFSKmsGbmThread *m_thread;
+    QQueue<drmPageFlipReq_t*> *m_pageFlipQueue;
+    QQueue<drmPageFlipEvent_t*> *m_pageFlipEventQueue;
+    static QMutex m_pageFlipQueueMutex;
 
     static void pageFlipHandler(int fd,
                                 unsigned int sequence,
                                 unsigned int tv_sec,
                                 unsigned int tv_usec,
                                 void *user_data);
+
+    void waitForEvent(void);
 };
 
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.cpp
index 1c0a8e1..d982289 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.cpp
@@ -140,4 +140,26 @@ QEglFSKmsDevice *QEglFSKmsGbmIntegration::createDevice(const QString &devicePath
     return new QEglFSKmsGbmDevice(this, path);
 }
 
+int QEglFSKmsGbmIntegration::drmFd() const
+{
+    if(device())
+    {
+        return device()->fd();
+    }
+    else
+    {
+        return 0;
+    }
+}
+
+int  QEglFSKmsGbmIntegration::sendPlaneSetRequest(uint32_t plane_id, uint32_t prop_fbid, uint32_t buffer_id, void* handler, void* user_data)
+{
+    if(device())
+    {
+        return(static_cast<QEglFSKmsGbmDevice *>(device())->sendPageFlipRequest(plane_id, prop_fbid, buffer_id, (page_flip_handler)handler, user_data));
+    }
+
+    return -1;
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.h b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.h
index 727571d..28c7abb 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.h
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.h
@@ -63,6 +63,8 @@ public:
 
     QPlatformCursor *createCursor(QPlatformScreen *screen) const Q_DECL_OVERRIDE;
     void presentBuffer(QPlatformSurface *surface) Q_DECL_OVERRIDE;
+    int  drmFd() const Q_DECL_OVERRIDE;
+    int  sendPlaneSetRequest(uint32_t plane_id, uint32_t prop_fbid, uint32_t buffer_id, void* handler, void* user_data) Q_DECL_OVERRIDE;
 
 protected:
     QEglFSKmsDevice *createDevice(const QString &devicePath) Q_DECL_OVERRIDE;
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
index 7a17b60..aa9f4af 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
@@ -166,9 +166,51 @@ void QEglFSKmsGbmScreen::waitForFlip()
     while (m_gbm_bo_next)
         static_cast<QEglFSKmsGbmDevice *>(device())->handleDrmEvent();
 }
+
+static int eglfskms_find_drm_prop_id(int fd, drmModeObjectPropertiesPtr props,
+                                     const char *name, unsigned int *p_prop_id)
+{
+    drmModePropertyPtr p;
+    unsigned int i, prop_id = 0; /* Property ID should always be > 0 */
+
+    for (i = 0; !prop_id && i < props->count_props; i++) {
+        p = drmModeGetProperty(fd, props->props[i]);
+        if (!strcmp(p->name, name)){
+            prop_id = p->prop_id;
+            break;
+        }
+        drmModeFreeProperty(p);
+    }
+    if (!prop_id) {
+        qWarning("Could not find %s property\n", name);
+        drmModeFreeObjectProperties(props);
+        return(-1);
+    }
+
+    *p_prop_id = prop_id;
+    return 0;
+}
+
+static void eglfskms_add_property(int fd, drmModeAtomicReqPtr req,
+                                  drmModeObjectPropertiesPtr props,
+                                  unsigned int plane_id,
+                                  const char *name, int value)
+{
+    unsigned int prop_id;
+    int ret;
+    if(!eglfskms_find_drm_prop_id(fd, props, name, &prop_id))
+    {
+        if((ret = drmModeAtomicAddProperty(req, plane_id, prop_id, value)) < 0){
+            qWarning("failed to add property with error code = %d\n", ret);
+        }
+    }
+}
 
 void QEglFSKmsGbmScreen::flip()
 {
+
+	drmModeObjectProperties *props;
+
     if (!m_gbm_surface) {
         qWarning("Cannot sync before platform init!");
         return;
@@ -191,19 +233,47 @@ void QEglFSKmsGbmScreen::flip()
                                  &output().modes[output().mode]);
 
         if (ret) {
-            qErrnoWarning("Could not set DRM mode!");
+            qErrnoWarning("Could not set DRM (%d) CRTC (%d) mode!", device()->fd(), output().crtc_id);
+            // Ignore page flip request if CRTC can not be configured
+            gbm_surface_release_buffer(m_gbm_surface, m_gbm_bo_next);
+            m_gbm_bo_next = Q_NULLPTR;
+            return;
         } else {
+            // Plane setting
+            int ret;
+
+            drmModeAtomicReqPtr req = drmModeAtomicAlloc();
+            props = drmModeObjectGetProperties(device()->fd(), output().primary_plane_id,
+                    DRM_MODE_OBJECT_PLANE);
+
+            eglfskms_add_property(device()->fd(), req, props, output().primary_plane_id, "FB_ID", fb->fb);
+            eglfskms_add_property(device()->fd(), req, props, output().primary_plane_id, "CRTC_ID", output().crtc_id);
+
+            ret = drmModeAtomicCommit(device()->fd(), req,
+                  DRM_MODE_ATOMIC_TEST_ONLY, 0);
+
+            if(!ret){
+                drmModeAtomicCommit(device()->fd(), req, 0, 0);
+            }
+            else {
+                qErrnoWarning("Failed to add PLANE (%d) parameters crtc_id = %d, fb_id = %d with err =%d:",
+                               output().primary_plane_id,  output().crtc_id, fb->fb, ret);
+
+                //TBD: Error Handling
+            }
+
+            drmModeFreeObjectProperties(props);
+            drmModeAtomicFree(req);
+
             output().mode_set = true;
             setPowerState(PowerStateOn);
         }
     }
 
-    int ret = drmModePageFlip(device()->fd(),
-                              output().crtc_id,
-                              fb->fb,
-                              DRM_MODE_PAGE_FLIP_EVENT,
-                              this);
-    if (ret) {
+    if(static_cast<QEglFSKmsGbmDevice *>(device())->sendPageFlipRequest(output().primary_plane_id,  output().plane_prop_fbid,
+                                     fb->fb, Q_NULLPTR, this))
+    {
+        /* Error messgae */
         qErrnoWarning("Could not queue DRM page flip!");
         gbm_surface_release_buffer(m_gbm_surface, m_gbm_bo_next);
         m_gbm_bo_next = Q_NULLPTR;
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsdevice.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsdevice.cpp
index f4ffee5..42bb714 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsdevice.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsdevice.cpp
@@ -159,6 +159,118 @@ static bool parseModeline(const QByteArray &text, drmModeModeInfoPtr mode)
     return true;
 }
 
+int eglfskms_get_drm_prop_val(int fd, drmModeObjectPropertiesPtr props,
+							  const char *name, unsigned int *p_val)
+{
+	drmModePropertyPtr p;
+	unsigned int i, prop_id = 0; /* Property ID should always be > 0 */
+
+	for (i = 0; !prop_id && i < props->count_props; i++) {
+		p = drmModeGetProperty(fd, props->props[i]);
+		if (!strcmp(p->name, name)){
+			prop_id = p->prop_id;
+			break;
+		}
+		drmModeFreeProperty(p);
+	}
+	if (!prop_id) {
+		qWarning("Could not find %s property\n", name);
+		drmModeFreeObjectProperties(props);
+		return(-1);
+	}
+
+	drmModeFreeProperty(p);
+	*p_val = props->prop_values[i];
+	return 0;
+}
+
+int eglfskms_find_drm_prop_id(int fd, drmModeObjectPropertiesPtr props,
+							  const char *name, unsigned int *p_prop_id)
+{
+	drmModePropertyPtr p;
+	unsigned int i, prop_id = 0; /* Property ID should always be > 0 */
+
+	for (i = 0; !prop_id && i < props->count_props; i++) {
+		p = drmModeGetProperty(fd, props->props[i]);
+		if (!strcmp(p->name, name)){
+			prop_id = p->prop_id;
+			break;
+		}
+		drmModeFreeProperty(p);
+	}
+	if (!prop_id) {
+		qWarning("Could not find %s property\n", name);
+		drmModeFreeObjectProperties(props);
+		return(-1);
+	}
+
+    *p_prop_id = prop_id;
+	return 0;
+}
+
+
+int drm_get_primary_plane_id(int fd, uint32_t crtc_id, unsigned int *p_plane_id, unsigned int *p_fbid)
+{
+	unsigned int i;
+	drmModeObjectProperties *props;
+	drmModePlaneRes *res = drmModeGetPlaneResources(fd);
+	if(res == NULL){
+		qWarning("plane resources not found\n");
+        return -1;
+	}
+
+	for (i = 0; i < res->count_planes; i++) {
+		uint32_t plane_id = res->planes[i];
+		unsigned int type_val;
+
+		drmModePlane *plane = drmModeGetPlane(fd, plane_id);
+		if(plane == NULL){
+			qWarning("plane not found\n");
+            goto error_exit;
+		}
+
+		props = drmModeObjectGetProperties(fd, plane->plane_id, DRM_MODE_OBJECT_PLANE);
+
+		if(props == NULL){
+			qWarning("plane (%d) properties not found\n",  plane->plane_id);
+            drmModeFreePlane(plane);
+            goto error_exit;
+		}
+
+		if(eglfskms_get_drm_prop_val(fd, props, "type",  &type_val) < 0)
+        {
+			qWarning("plane (%d) type value not found\n",  plane->plane_id);
+		    drmModeFreeObjectProperties(props);
+		    drmModeFreePlane(plane);
+            goto error_exit;
+        }
+
+		if(eglfskms_find_drm_prop_id(fd, props, "FB_ID",  p_fbid) < 0)
+        {
+			qWarning("plane (%d) FB ID not found\n",  plane->plane_id);
+		    drmModeFreeObjectProperties(props);
+		    drmModeFreePlane(plane);
+            goto error_exit;
+        }
+
+		drmModeFreeObjectProperties(props);
+		drmModeFreePlane(plane);
+
+		if((type_val == DRM_PLANE_TYPE_PRIMARY) &&
+           (plane->crtc_id == crtc_id) || (!plane->crtc_id)){
+            plane->crtc_id = crtc_id;
+			*p_plane_id = plane_id;
+			drmModeFreePlaneResources(res);
+			return 0;
+		}
+	}
+
+	qWarning("primary plane for crtc %d not found", crtc_id);
+error_exit:
+    drmModeFreePlaneResources(res);
+	return -1;
+}
+
 QEglFSKmsScreen *QEglFSKmsDevice::screenForConnector(drmModeResPtr resources, drmModeConnectorPtr connector, QPoint pos)
 {
     const QByteArray connectorName = nameForConnector(connector);
@@ -172,6 +284,7 @@ QEglFSKmsScreen *QEglFSKmsDevice::screenForConnector(drmModeResPtr resources, dr
     OutputConfiguration configuration;
     QSize configurationSize;
     drmModeModeInfo configurationModeline;
+    unsigned int plane_id, plane_fbid;
 
     const QByteArray mode = m_integration->outputSettings().value(QString::fromUtf8(connectorName))
             .value(QStringLiteral("mode"), QStringLiteral("preferred")).toByteArray().toLower();
@@ -268,14 +381,14 @@ QEglFSKmsScreen *QEglFSKmsDevice::screenForConnector(drmModeResPtr resources, dr
 
     int selected_mode = -1;
 
-    if (configured >= 0)
-        selected_mode = configured;
+    if (current >= 0)
+        selected_mode = current;
     else if (preferred >= 0)
         selected_mode = preferred;
-    else if (current >= 0)
-        selected_mode = current;
     else if (best >= 0)
         selected_mode = best;
+    else if (configured >= 0)
+        selected_mode = configured;
 
     if (selected_mode < 0) {
         qWarning() << "No modes available for output" << connectorName;
@@ -287,6 +400,12 @@ QEglFSKmsScreen *QEglFSKmsDevice::screenForConnector(drmModeResPtr resources, dr
         qCDebug(qLcEglfsKmsDebug) << "Selected mode" << selected_mode << ":" << width << "x" << height
                                   << '@' << refresh << "hz for output" << connectorName;
     }
+
+    if(drm_get_primary_plane_id(m_dri_fd, crtc_id, &plane_id, &plane_fbid) < 0)
+    {
+        return Q_NULLPTR;
+    }
+
     static const int width = qEnvironmentVariableIntValue("QT_QPA_EGLFS_PHYSICAL_WIDTH");
     static const int height = qEnvironmentVariableIntValue("QT_QPA_EGLFS_PHYSICAL_HEIGHT");
     QSizeF size(width, height);
@@ -304,7 +423,9 @@ QEglFSKmsScreen *QEglFSKmsDevice::screenForConnector(drmModeResPtr resources, dr
         drmModeGetCrtc(m_dri_fd, crtc_id),
         modes,
         connector->subpixel,
-        connectorProperty(connector, QByteArrayLiteral("DPMS"))
+        connectorProperty(connector, QByteArrayLiteral("DPMS")),
+        plane_id,
+        plane_fbid
     };
 
     m_crtc_allocator |= (1 << output.crtc_id);
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsscreen.h b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsscreen.h
index aa698e1..fdb4dca 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsscreen.h
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsscreen.h
@@ -67,6 +67,8 @@ struct QEglFSKmsOutput
     QList<drmModeModeInfo> modes;
     int subpixel;
     drmModePropertyPtr dpms_prop;
+    uint32_t primary_plane_id;
+    uint32_t plane_prop_fbid;
 };
 
 class Q_EGLFS_EXPORT QEglFSKmsScreen : public QEglFSScreen
diff --git a/src/plugins/platforms/eglfs/eglfs_device_lib.pro b/src/plugins/platforms/eglfs/eglfs_device_lib.pro
index 974b85b..2ef797d 100644
--- a/src/plugins/platforms/eglfs/eglfs_device_lib.pro
+++ b/src/plugins/platforms/eglfs/eglfs_device_lib.pro
@@ -4,7 +4,8 @@
 # Hence this header-less, private-only module.
 
 TARGET = QtEglDeviceIntegration
-CONFIG += no_module_headers internal_module
+CONFIG += no_module_headers internal_module link_pkgconfig
+PKGCONFIG += libdrm gbm
 
 QT += core-private gui-private platformsupport-private
 LIBS += $$QMAKE_LIBS_DYNLOAD
diff --git a/src/plugins/platforms/eglfs/qeglfsdeviceintegration.cpp b/src/plugins/platforms/eglfs/qeglfsdeviceintegration.cpp
index fc41dc5..6951540 100644
--- a/src/plugins/platforms/eglfs/qeglfsdeviceintegration.cpp
+++ b/src/plugins/platforms/eglfs/qeglfsdeviceintegration.cpp
@@ -345,4 +345,20 @@ void *QEGLDeviceIntegration::wlDisplay() const
     return Q_NULLPTR;
 }
 
+int QEGLDeviceIntegration::drmFd() const
+{
+    return 0;
+}
+
+int QEGLDeviceIntegration::sendPlaneSetRequest(uint32_t plane_id, uint32_t prop_fbid, uint32_t buffer_id, void* handler, void* user_data)
+{
+    Q_UNUSED(plane_id);
+    Q_UNUSED(prop_fbid);
+    Q_UNUSED(buffer_id);
+    Q_UNUSED(handler);
+    Q_UNUSED(user_data);
+
+    return -1;
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/qeglfsdeviceintegration.h b/src/plugins/platforms/eglfs/qeglfsdeviceintegration.h
index f1a5bde..562f77f 100644
--- a/src/plugins/platforms/eglfs/qeglfsdeviceintegration.h
+++ b/src/plugins/platforms/eglfs/qeglfsdeviceintegration.h
@@ -105,6 +105,8 @@ public:
     virtual bool supportsSurfacelessContexts() const;
 
     virtual void *wlDisplay() const;
+    virtual int drmFd() const;
+    virtual int sendPlaneSetRequest(uint32_t plane_id, uint32_t prop_fbid, uint32_t buffer_id, void* handler, void* user_data);
 };
 
 class Q_EGLFS_EXPORT QEGLDeviceIntegrationPlugin : public QObject
diff --git a/src/plugins/platforms/eglfs/qeglfsintegration.cpp b/src/plugins/platforms/eglfs/qeglfsintegration.cpp
index 6f38a96..64c5c33 100644
--- a/src/plugins/platforms/eglfs/qeglfsintegration.cpp
+++ b/src/plugins/platforms/eglfs/qeglfsintegration.cpp
@@ -252,6 +252,12 @@ QPlatformNativeInterface *QEglFSIntegration::nativeInterface() const
     return const_cast<QEglFSIntegration *>(this);
 }
 
+
+static int qt_egl_device_send_drm_plane_set_req(uint32_t plane_id, uint32_t prop_fbid, uint32_t buffer_id, void* handler, void* user_data)
+{
+    return(qt_egl_device_integration()->sendPlaneSetRequest(plane_id, prop_fbid, buffer_id, handler, user_data));
+}
+
 enum ResourceType {
     EglDisplay,
     EglWindow,
@@ -259,7 +265,9 @@ enum ResourceType {
     EglConfig,
     NativeDisplay,
     XlibDisplay,
-    WaylandDisplay
+    WaylandDisplay,
+    DrmFd,
+    DrmPlaneSetReq
 };
 
 static int resourceType(const QByteArray &key)
@@ -271,7 +279,9 @@ static int resourceType(const QByteArray &key)
         QByteArrayLiteral("eglconfig"),
         QByteArrayLiteral("nativedisplay"),
         QByteArrayLiteral("display"),
-        QByteArrayLiteral("server_wl_display")
+        QByteArrayLiteral("server_wl_display"),
+        QByteArrayLiteral("drm_fd"),
+        QByteArrayLiteral("drm_plane_set_req"),
     };
     const QByteArray *end = names + sizeof(names) / sizeof(names[0]);
     const QByteArray *result = std::find(names, end, key);
@@ -294,6 +304,13 @@ void *QEglFSIntegration::nativeResourceForIntegration(const QByteArray &resource
     case WaylandDisplay:
         result = qt_egl_device_integration()->wlDisplay();
         break;
+    case DrmFd:
+        result = reinterpret_cast<void*>(qt_egl_device_integration()->drmFd());
+        break;
+    case DrmPlaneSetReq:
+        result = reinterpret_cast<void*>(qt_egl_device_send_drm_plane_set_req);
+        break;
+
     default:
         break;
     }
-- 
1.9.1

