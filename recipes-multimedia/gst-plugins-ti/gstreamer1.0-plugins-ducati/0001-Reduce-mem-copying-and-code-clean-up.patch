From c34cd036a51324a0069e764ab8bb034067b0032c Mon Sep 17 00:00:00 2001
From: Pooja Prajod <a0132412@ti.com>
Date: Mon, 2 Mar 2015 20:07:21 +0530
Subject: [gst-ducati V2] Reduce mem copying and code clean-up

The patch replaces buffer_extract with buffer map and
buffer fill, thus avoiding a memory copy. This also
cleans up some unnecessary code

Signed-off-by: Pooja Prajod <a0132412@ti.com>
---
 src/gstducatimpeg2dec.c |   36 +++++-------
 src/gstducatimpeg4dec.c |   34 +++++------
 src/gstducativc1dec.c   |   16 +++--
 src/gstducatividdec.c   |  148 +++++++++++++++++++----------------------------
 src/gstducatividdec.h   |    1 -
 src/gstducatividenc.c   |  119 ++++++++++++++++++++-----------------
 6 files changed, 159 insertions(+), 195 deletions(-)

diff --git a/src/gstducatimpeg2dec.c b/src/gstducatimpeg2dec.c
index 3350696..b4585ff 100644
--- a/src/gstducatimpeg2dec.c
+++ b/src/gstducatimpeg2dec.c
@@ -109,39 +109,30 @@ gst_ducati_mpeg2dec_push_input (GstDucatiVidDec * vdec, GstBuffer * buf)
 {
   GstDucatiMpeg2Dec *self = GST_DUCATIMPEG2DEC (vdec);
 
-  gsize bufoffset, bufmaxsize, buftotalsize;
-  guint sz;
-  guint8 *data = NULL;
-
-  gsize offset, maxsize, totalsize;
-  guint8 *codecdata = NULL;
-  gsize codecdatasize;
-
-  buftotalsize = gst_buffer_get_sizes (buf, &bufoffset, &bufmaxsize);
-  data = g_slice_alloc (buftotalsize);
-  sz = gst_buffer_extract (buf, bufoffset, data, buftotalsize);
-
-  totalsize = gst_buffer_get_sizes (vdec->codec_data, &offset, &maxsize);
-  codecdata = g_slice_alloc (totalsize);
-  codecdatasize =
-      gst_buffer_extract (vdec->codec_data, offset, codecdata, totalsize);
+  GstMapInfo info;
+  gboolean mapped;
+  mapped = gst_buffer_map (buf, &info, GST_MAP_READ);
 
   /* skip codec_data, which is same as first buffer from mpegvideoparse (and
    * appears to be periodically resent) and instead prepend to next frame..
    */
-  if (vdec->codec_data && (sz == codecdatasize) &&
-      !memcmp (data, codecdata, sz)) {
+  if (vdec->codecdata && (info.size == vdec->codecdatasize) &&
+      !memcmp (info.data, vdec->codecdata, info.size)) {
     GST_DEBUG_OBJECT (self, "skipping codec_data buffer");
     self->prepend_codec_data = TRUE;
   } else {
     if (self->prepend_codec_data) {
       GST_DEBUG_OBJECT (self, "prepending codec_data buffer");
-      push_input (vdec, codecdata, codecdatasize);
+      push_input (vdec, vdec->codecdata, vdec->codecdatasize);
       self->prepend_codec_data = FALSE;
     }
-    push_input (vdec, data, sz);
+    if (mapped) {
+      push_input (vdec, info.data, info.size);
+    }
+  }
+  if (mapped) {
+    gst_buffer_unmap (buf, &info);
   }
-
   gst_buffer_unref (buf);
 
   return NULL;
@@ -216,8 +207,7 @@ gst_ducati_mpeg2dec_class_init (GstDucatiMpeg2DecClass * klass)
 }
 
 static void
-gst_ducati_mpeg2dec_init (GstDucatiMpeg2Dec * self,
-    gpointer gclass)
+gst_ducati_mpeg2dec_init (GstDucatiMpeg2Dec * self, gpointer gclass)
 {
   GstDucatiVidDec *vdec = GST_DUCATIVIDDEC (self);
   vdec->pageMemType = XDM_MEMTYPE_RAW;
diff --git a/src/gstducatimpeg4dec.c b/src/gstducatimpeg4dec.c
index 8952600..783f617 100644
--- a/src/gstducatimpeg4dec.c
+++ b/src/gstducatimpeg4dec.c
@@ -272,26 +272,19 @@ gst_ducati_mpeg4dec_push_input (GstDucatiVidDec * vdec, GstBuffer * buf)
 {
   GstDucatiMpeg4Dec *self = GST_DUCATIMPEG4DEC (vdec);
   GstBuffer *remaining = NULL;
-  gsize bufoffset, bufmaxsize, buftotalsize;
-  gint insize;
+  gint insize = 0;
   guint8 *in = NULL;
   gint size = 0;
   guint8 last_start_code = 0xff;
-  buftotalsize = gst_buffer_get_sizes (buf, &bufoffset, &bufmaxsize);
-  in = g_slice_alloc (buftotalsize);
-  insize = gst_buffer_extract (buf, bufoffset, in, buftotalsize);
-
-  if (G_UNLIKELY (vdec->first_in_buffer) && vdec->codec_data) {
-    gsize offset, maxsize, totalsize;
-    guint8 *codecdata = NULL;
-    gsize codecdatasize;
-
-    totalsize = gst_buffer_get_sizes (vdec->codec_data, &offset, &maxsize);
-    codecdata = g_slice_alloc (totalsize);
-    codecdatasize =
-        gst_buffer_extract (vdec->codec_data, offset, codecdata, totalsize);
-
-    push_input (vdec, codecdata, codecdatasize);
+  GstMapInfo info;
+  gboolean mapped;
+  mapped = gst_buffer_map (buf, &info, GST_MAP_READ);
+  if (mapped) {
+    in = info.data;
+    insize = info.size;
+  }
+  if (G_UNLIKELY (vdec->first_in_buffer) && vdec->codecdata) {
+    push_input (vdec, vdec->codecdata, vdec->codecdatasize);
   }
 
   while (insize > (SC_SZ + 1)) {
@@ -360,7 +353,9 @@ gst_ducati_mpeg4dec_push_input (GstDucatiVidDec * vdec, GstBuffer * buf)
           GST_BUFFER_DURATION (buf);
     }
   }
-
+  if (mapped) {
+    gst_buffer_unmap (buf, &info);
+  }
   gst_buffer_unref (buf);
 
   return remaining;
@@ -411,8 +406,7 @@ gst_ducati_mpeg4dec_class_init (GstDucatiMpeg4DecClass * klass)
 }
 
 static void
-gst_ducati_mpeg4dec_init (GstDucatiMpeg4Dec * self,
-    gpointer gclass)
+gst_ducati_mpeg4dec_init (GstDucatiMpeg4Dec * self, gpointer gclass)
 {
 #ifndef GST_DISABLE_GST_DEBUG
   GstDucatiVidDec *dec = GST_DUCATIVIDDEC (self);
diff --git a/src/gstducativc1dec.c b/src/gstducativc1dec.c
index 023d200..324e75d 100644
--- a/src/gstducativc1dec.c
+++ b/src/gstducativc1dec.c
@@ -160,10 +160,8 @@ gst_ducati_vc1dec_push_input (GstDucatiVidDec * vdec, GstBuffer * buf)
   GstDucatiVC1Dec *self = GST_DUCATIVC1DEC (vdec);
   IVC1VDEC_Params *params = (IVC1VDEC_Params *) vdec->params;
   guint32 val;
-  gsize bufoffset, bufmaxsize, buftotalsize;
-  gsize bufdatasize;
-  guint8 *bufdata = NULL;
-
+  GstMapInfo info;
+  gboolean mapped;
 
   /* need a base ts for frame layer timestamps */
   if (self->first_ts == GST_CLOCK_TIME_NONE)
@@ -238,11 +236,11 @@ gst_ducati_vc1dec_push_input (GstDucatiVidDec * vdec, GstBuffer * buf)
     push_input (vdec, (const guint8 *) &val, 4);
   }
 
-  buftotalsize = gst_buffer_get_sizes (buf, &bufoffset, &bufmaxsize);
-  bufdata = g_slice_alloc (buftotalsize);
-  bufdatasize = gst_buffer_extract (buf, bufoffset, bufdata, buftotalsize);
-  push_input (vdec, bufdata, bufdatasize);
-  g_slice_free1 (buftotalsize, bufdata);
+  mapped = gst_buffer_map (buf, &info, GST_MAP_READ);
+  if (mapped) {
+    push_input (vdec, info.data, info.size);
+    gst_buffer_unmap (buf, &info);
+  }
   gst_buffer_unref (buf);
 
   return NULL;
diff --git a/src/gstducatividdec.c b/src/gstducatividdec.c
index a6339d7..9735ff1 100644
--- a/src/gstducatividdec.c
+++ b/src/gstducatividdec.c
@@ -275,10 +275,11 @@ codec_create (GstDucatiVidDec * self)
 static inline GstBuffer *
 codec_buffer_pool_get (GstDucatiVidDec * self, GstBuffer * buf)
 {
+  GstBuffer *ret_buf;
   if (G_UNLIKELY (!self->pool)) {
     guint size =
         GST_ROUND_UP_4 (self->padded_width) *
-        GST_ROUND_UP_2 (self->padded_height) * 3 / 2;
+        GST_ROUND_UP_2 (self->padded_height) * 1.5;
 
     GST_DEBUG_OBJECT (self, "creating bufferpool");
     GST_DEBUG_OBJECT (self, "%s\n",
@@ -287,7 +288,9 @@ codec_buffer_pool_get (GstDucatiVidDec * self, GstBuffer * buf)
         gst_drm_buffer_pool_new (GST_ELEMENT (self), dce_get_fd (),
         gst_pad_get_current_caps (self->srcpad), size);
   }
-  return GST_BUFFER (gst_drm_buffer_pool_get (self->pool, FALSE));
+  ret_buf = GST_BUFFER (gst_drm_buffer_pool_get (self->pool, FALSE));
+  gst_buffer_pool_set_active (GST_BUFFER_POOL (self->pool), TRUE);
+  return ret_buf;
 }
 
 static GstMetaDucatiBufferPriv *
@@ -315,7 +318,7 @@ get_buffer_priv (GstDucatiVidDec * self, GstBuffer * buf)
         GST_ROUND_UP_4 (self->stride) * GST_ROUND_UP_2 (self->padded_height);
     size =
         GST_ROUND_UP_4 (self->stride) * GST_ROUND_UP_2 (self->padded_height) *
-        3 / 2;
+        1.5;
 
     priv = gst_ducati_buffer_priv_set (buf, bo, uv_offset, size);
   }
@@ -608,34 +611,35 @@ codec_process (GstDucatiVidDec * self, gboolean send, gboolean flush,
         err = XDM_EFAIL;
       }
       gst_caps_unref (caps);
-
-      /* this buffer still has the old caps so we skip it */
-      send = FALSE;
     }
 
     if (send) {
-      gint crop_width, crop_height;
-
       GstVideoCropMeta *crop = gst_buffer_get_video_crop_meta (outbuf);
-      /* send region of interest to sink on first buffer: */
-      XDM_Rect *r = &(self->outArgs->displayBufs.bufDesc[0].activeFrameRegion);
-
-      crop_width = r->bottomRight.x - r->topLeft.x;
-      crop_height = r->bottomRight.y - r->topLeft.y;
-
-      if (crop_width > self->input_width)
-        crop_width = self->input_width;
-      if (crop_height > self->input_height)
-        crop_height = self->input_height;
-
-      GST_INFO_OBJECT (self, "active frame region %d, %d, %d, %d, crop %dx%d",
-          r->topLeft.x, r->topLeft.y, r->bottomRight.x, r->bottomRight.y,
-          crop_width, crop_height);
-
-      crop->x = r->topLeft.x;
-      crop->y = r->topLeft.y;
-      crop->width = crop_width;
-      crop->height = crop_height;
+      if (crop) {
+        gint crop_width, crop_height;
+        /* send region of interest to sink on first buffer: */
+        XDM_Rect *r =
+            &(self->outArgs->displayBufs.bufDesc[0].activeFrameRegion);
+
+        crop_width = r->bottomRight.x - r->topLeft.x;
+        crop_height = r->bottomRight.y - r->topLeft.y;
+
+        if (crop_width > self->input_width)
+          crop_width = self->input_width;
+        if (crop_height > self->input_height)
+          crop_height = self->input_height;
+
+        GST_INFO_OBJECT (self, "active frame region %d, %d, %d, %d, crop %dx%d",
+            r->topLeft.x, r->topLeft.y, r->bottomRight.x, r->bottomRight.y,
+            crop_width, crop_height);
+
+        crop->x = r->topLeft.x;
+        crop->y = r->topLeft.y;
+        crop->width = crop_width;
+        crop->height = crop_height;
+      } else {
+        GST_INFO_OBJECT (self, "Crop metadata not present in buffer");
+      }
     }
 
     if (G_UNLIKELY (self->first_out_buffer) && send) {
@@ -825,20 +829,28 @@ gst_ducati_viddec_parse_caps (GstDucatiVidDec * self, GstStructure * s)
     if (codec_data) {
       int i;
       GstMapInfo info;
+      gboolean mapped;
       GstBuffer *buffer = gst_value_get_buffer (codec_data);
 
       GST_DEBUG_OBJECT (self, "codec_data: %" GST_PTR_FORMAT, buffer);
 
-      gst_buffer_map (buffer, &info, GST_MAP_READ);
+      mapped = gst_buffer_map (buffer, &info, GST_MAP_READ);
       GST_DEBUG_OBJECT (self, "codec_data dump, size = %d ", info.size);
       for (i = 0; i < info.size; i++) {
         GST_DEBUG_OBJECT (self, "%02x ", info.data[i]);
       }
-      self->codecdata = g_slice_alloc (info.size);
-      memcpy (self->codecdata, info.data, info.size);
-      self->codecdatasize = info.size;
-      gst_buffer_unmap (buffer, &info);
-      self->codec_data = gst_buffer_ref (buffer);
+      if (info.size) {
+        self->codecdata = g_slice_alloc (info.size);
+        if (self->codecdata) {
+          memcpy (self->codecdata, info.data, info.size);
+        } else {
+          GST_DEBUG_OBJECT (self, "g_slice_alloc failed");
+        }
+        self->codecdatasize = info.size;
+      }
+      if (mapped) {
+        gst_buffer_unmap (buffer, &info);
+      }
     }
 
     return TRUE;
@@ -917,18 +929,18 @@ gst_ducati_viddec_allocate_params (GstDucatiVidDec * self, gint params_sz,
 static GstBuffer *
 gst_ducati_viddec_push_input (GstDucatiVidDec * self, GstBuffer * buf)
 {
-  gsize bufoffset, bufmaxsize, buftotalsize;
-  guint sz;
-  guint8 *data = NULL;
+  GstMapInfo info;
+  gboolean mapped;
   if (G_UNLIKELY (self->first_in_buffer) && self->codecdata) {
     push_input (self, self->codecdata, self->codecdatasize);
   }
-
   /* just copy entire buffer */
-  buftotalsize = gst_buffer_get_sizes (buf, &bufoffset, &bufmaxsize);
-  data = g_slice_alloc (buftotalsize);
-  sz = gst_buffer_extract (buf, bufoffset, data, buftotalsize);
-  push_input (self, data, sz);
+
+  mapped = gst_buffer_map (buf, &info, GST_MAP_READ);
+  if (mapped) {
+    push_input (self, info.data, info.size);
+    gst_buffer_unmap (buf, &info);
+  }
   gst_buffer_unref (buf);
 
   return NULL;
@@ -1063,8 +1075,8 @@ gst_ducati_viddec_set_sink_caps (GstDucatiVidDec * self, GstCaps * caps)
   self->stride = GST_ROUND_UP_4 (self->padded_width);
 
   self->outsize =
-      GST_ROUND_UP_4 (self->stride) * GST_ROUND_UP_2 (self->padded_height) * 3 /
-      2;
+      GST_ROUND_UP_4 (self->stride) * GST_ROUND_UP_2 (self->padded_height) *
+      1.5;
 
   GST_INFO_OBJECT (self, "outsize %d stride %d outcaps: %" GST_PTR_FORMAT,
       self->outsize, self->stride, outcaps);
@@ -1317,13 +1329,12 @@ allocate_buffer:
         NULL);
     if (ret_acq_buf == GST_FLOW_OK) {
       GstMetaDmaBuf *meta = gst_buffer_get_dma_buf_meta (outbuf);
-      if (!meta) {
-        goto aqcuire_from_own_pool;
+      if (meta) {
+        goto common;
+      } else {
+        gst_buffer_unref (outbuf);
       }
-      goto common;
     }
-  } else {
-    goto aqcuire_from_own_pool;
   }
 
 aqcuire_from_own_pool:
@@ -1341,42 +1352,6 @@ common:
     return ret;
   }
 
-  outcaps = gst_pad_get_current_caps (self->srcpad);
-  if (outcaps
-      && !gst_caps_is_equal (outcaps,
-          gst_pad_get_current_caps (self->srcpad))) {
-    GstStructure *s;
-    gsize bufoffset, bufmaxsize, buftotalsize;
-    guint sz;
-    guint8 *data = NULL;
-
-    GST_INFO_OBJECT (self, "doing upstream negotiation bufsize %d",
-        gst_buffer_get_size (outbuf));
-
-    s = gst_caps_get_structure (outcaps, 0);
-    gst_structure_get_int (s, "rowstride", &self->stride);
-    self->outsize =
-        GST_ROUND_UP_4 (self->stride) * GST_ROUND_UP_2 (self->padded_height) *
-        3 / 2;
-
-    GST_INFO_OBJECT (self, "outsize %d stride %d outcaps: %" GST_PTR_FORMAT,
-        self->outsize, self->stride, outcaps);
-
-    gst_pad_set_caps (self->srcpad, outcaps);
-
-    buftotalsize = gst_buffer_get_sizes (outbuf, &bufoffset, &bufmaxsize);
-    data = g_slice_alloc (buftotalsize);
-    sz = gst_buffer_extract (outbuf, bufoffset, data, buftotalsize);
-
-/* TO DO for vpe
-    if (sz != self->outsize) {
-      GST_INFO_OBJECT (self, "dropping buffer (bufsize %d != outsize %d)",
-          sz, self->outsize);
-      gst_buffer_unref (outbuf);
-      goto allocate_buffer;
-    }*/
-  }
-
   if (G_UNLIKELY (!self->codec)) {
     if (!codec_create (self)) {
       GST_ERROR_OBJECT (self, "could not create codec");
@@ -1726,10 +1701,7 @@ gst_ducati_viddec_finalize (GObject * obj)
   /* Will unref the remaining buffers if needed */
   g_hash_table_unref (self->dce_locked_bufs);
   g_hash_table_unref (self->passed_in_bufs);
-  if (self->codec_data) {
-    gst_buffer_unref (self->codec_data);
-    self->codec_data = NULL;
-  }
+
   if (self->codecdata) {
     g_slice_free1 (self->codecdatasize, self->codecdata);
     self->codecdata = NULL;
diff --git a/src/gstducatividdec.h b/src/gstducatividdec.h
index ad877f3..bc9f310 100644
--- a/src/gstducatividdec.h
+++ b/src/gstducatividdec.h
@@ -104,7 +104,6 @@ struct _GstDucatiVidDec
   GstBufferPool *externalpool;
 
   /* by default, codec_data from sinkpad is prepended to first buffer: */
-  GstBuffer *codec_data;
 
   guint8 *codecdata;
   gsize codecdatasize;
diff --git a/src/gstducatividenc.c b/src/gstducatividenc.c
index 0f85088..017cade 100644
--- a/src/gstducatividenc.c
+++ b/src/gstducatividenc.c
@@ -62,10 +62,8 @@ static void gst_ducati_videnc_get_property (GObject * object, guint prop_id,
 
 static gboolean gst_ducati_videnc_set_format (GstVideoEncoder *
     base_video_encoder, GstVideoCodecState * state);
-static gboolean gst_ducati_videnc_start (GstVideoEncoder *
-    base_video_encoder);
-static gboolean gst_ducati_videnc_stop (GstVideoEncoder *
-    base_video_encoder);
+static gboolean gst_ducati_videnc_start (GstVideoEncoder * base_video_encoder);
+static gboolean gst_ducati_videnc_stop (GstVideoEncoder * base_video_encoder);
 static GstFlowReturn gst_ducati_videnc_finish (GstVideoEncoder *
     base_video_encoder);
 static GstFlowReturn gst_ducati_videnc_handle_frame (GstVideoEncoder *
@@ -147,7 +145,8 @@ gst_ducati_videnc_class_init (GstDucatiVidEncClass * klass)
   basevideoencoder_class->handle_frame =
       GST_DEBUG_FUNCPTR (gst_ducati_videnc_handle_frame);
 
-  basevideoencoder_class->src_event = GST_DEBUG_FUNCPTR (gst_ducati_videnc_event);
+  basevideoencoder_class->src_event =
+      GST_DEBUG_FUNCPTR (gst_ducati_videnc_event);
 
   klass->allocate_params = gst_ducati_videnc_allocate_params_default;
   klass->configure = gst_ducati_videnc_configure_default;
@@ -206,29 +205,31 @@ gst_ducati_videnc_set_format (GstVideoEncoder * base_video_encoder,
 
 
   GST_DEBUG_OBJECT (self, "picking an output format ...");
-  allowed_caps = gst_pad_get_allowed_caps (GST_VIDEO_ENCODER_SRC_PAD (base_video_encoder));
+  allowed_caps =
+      gst_pad_get_allowed_caps (GST_VIDEO_ENCODER_SRC_PAD (base_video_encoder));
   if (!allowed_caps) {
     GST_DEBUG_OBJECT (self, "... but no peer, using template caps");
     allowed_caps =
-        gst_pad_get_pad_template_caps (GST_VIDEO_ENCODER_SRC_PAD (base_video_encoder));
+        gst_pad_get_pad_template_caps (GST_VIDEO_ENCODER_SRC_PAD
+        (base_video_encoder));
   }
   GST_DEBUG_OBJECT (self, "chose caps %" GST_PTR_FORMAT, allowed_caps);
   allowed_caps = gst_caps_truncate (allowed_caps);
   GST_DEBUG_OBJECT (self, "allowed caps %" GST_PTR_FORMAT, allowed_caps);
   output_state = gst_video_encoder_set_output_state (GST_VIDEO_ENCODER (self),
-        allowed_caps, state);
+      allowed_caps, state);
   gst_video_codec_state_unref (output_state);
 
 
   if (!gst_video_encoder_negotiate (GST_VIDEO_ENCODER (self))) {
-     GST_DEBUG_OBJECT (self, "negotiate failed");
-     return FALSE;
+    GST_DEBUG_OBJECT (self, "negotiate failed");
+    return FALSE;
   }
 
 
   if (self->input_state)
-     gst_video_codec_state_unref (self->input_state);
-    self->input_state = gst_video_codec_state_ref (state);
+    gst_video_codec_state_unref (self->input_state);
+  self->input_state = gst_video_codec_state_ref (state);
   self->configure = TRUE;
 
   return TRUE;
@@ -337,7 +338,8 @@ gst_ducati_videnc_configure (GstDucatiVidEnc * self)
 
   g_assert (self->input_pool == NULL);
 
-  allowed_sink_caps = gst_pad_get_allowed_caps (GST_VIDEO_ENCODER_SINK_PAD (self));
+  allowed_sink_caps =
+      gst_pad_get_allowed_caps (GST_VIDEO_ENCODER_SINK_PAD (self));
   if (!allowed_sink_caps) {
     GST_DEBUG_OBJECT (self, "... but no peer, using template caps");
     allowed_sink_caps =
@@ -346,10 +348,12 @@ gst_ducati_videnc_configure (GstDucatiVidEnc * self)
   GST_DEBUG_OBJECT (self, "chose caps %" GST_PTR_FORMAT, allowed_sink_caps);
   allowed_sink_caps = gst_caps_truncate (allowed_sink_caps);
   self->input_pool = gst_drm_buffer_pool_new (GST_ELEMENT (self),
-      dce_get_fd (), gst_caps_fixate(allowed_sink_caps), GST_VIDEO_INFO_SIZE (&state->info));
+      dce_get_fd (), gst_caps_fixate (allowed_sink_caps),
+      GST_VIDEO_INFO_SIZE (&state->info));
 
   g_assert (self->output_pool == NULL);
-  allowed_src_caps = gst_pad_get_allowed_caps (GST_VIDEO_ENCODER_SRC_PAD (self));
+  allowed_src_caps =
+      gst_pad_get_allowed_caps (GST_VIDEO_ENCODER_SRC_PAD (self));
   if (!allowed_src_caps) {
     GST_DEBUG_OBJECT (self, "... but no peer, using template caps");
     allowed_src_caps =
@@ -358,7 +362,7 @@ gst_ducati_videnc_configure (GstDucatiVidEnc * self)
   GST_DEBUG_OBJECT (self, "chose caps %" GST_PTR_FORMAT, allowed_src_caps);
   allowed_src_caps = gst_caps_truncate (allowed_src_caps);
   self->output_pool = gst_drm_buffer_pool_new (GST_ELEMENT (self),
-      dce_get_fd (), gst_caps_fixate(allowed_src_caps), max_out_size);
+      dce_get_fd (), gst_caps_fixate (allowed_src_caps), max_out_size);
 
   GST_INFO_OBJECT (self, "configured");
 
@@ -406,7 +410,8 @@ gst_ducati_videnc_configure_default (GstDucatiVidEnc * self)
   dynParams = (VIDENC2_DynamicParams *) self->dynParams;
 
   dynParams->refFrameRate =
-      gst_util_uint64_scale (1000, GST_VIDEO_INFO_FPS_N (&state->info), GST_VIDEO_INFO_FPS_D (&state->info));
+      gst_util_uint64_scale (1000, GST_VIDEO_INFO_FPS_N (&state->info),
+      GST_VIDEO_INFO_FPS_D (&state->info));
   dynParams->targetFrameRate = dynParams->refFrameRate;
   dynParams->inputWidth = self->rect.w;
   dynParams->inputHeight = self->rect.h;
@@ -675,43 +680,51 @@ gst_ducati_videnc_handle_frame (GstVideoEncoder * base_video_encoder,
   inbuf = gst_buffer_ref (frame->input_buffer);
   ts = GST_BUFFER_PTS (inbuf);
 have_inbuf:
-  dmabuf_fd_in = gst_ducati_videnc_buffer_lock(self, inbuf);
+  dmabuf_fd_in = gst_ducati_videnc_buffer_lock (self, inbuf);
   if (dmabuf_fd_in < 0) {
-     gsize offset, maxsize, totalsize;
-     guint8 *codecdata = NULL;
-     gsize codecdatasize;
+    GstMapInfo info;
+    gboolean mapped;
 
     GST_DEBUG_OBJECT (self, "memcpying input");
     gst_buffer_unref (inbuf);
     inbuf = GST_BUFFER (gst_drm_buffer_pool_get (self->input_pool, FALSE));
-    gst_buffer_pool_set_active (GST_BUFFER_POOL(self->input_pool), TRUE);
+    gst_buffer_pool_set_active (GST_BUFFER_POOL (self->input_pool), TRUE);
+
+    mapped = gst_buffer_map (frame->input_buffer, &info, GST_MAP_READ);
+    if (mapped) {
+      gst_buffer_fill (inbuf, 0, info.data, info.size);
+      gst_buffer_unmap (frame->input_buffer, &info);
+    }
 
-    totalsize =  gst_buffer_get_sizes (frame->input_buffer, &offset, &maxsize);
-    codecdata = g_slice_alloc (totalsize);
-    codecdatasize = gst_buffer_extract (frame->input_buffer, offset, codecdata, totalsize);
-    gst_buffer_fill (inbuf, offset, codecdata, codecdatasize);
-    g_free(codecdata);
     GST_BUFFER_PTS (inbuf) = ts;
     goto have_inbuf;
   }
 
   outbuf = GST_BUFFER (gst_drm_buffer_pool_get (self->output_pool, FALSE));
-  gst_buffer_pool_set_active (GST_BUFFER_POOL(self->output_pool), TRUE);
-  crop = gst_buffer_get_video_crop_meta(outbuf);
+  gst_buffer_pool_set_active (GST_BUFFER_POOL (self->output_pool), TRUE);
+  crop = gst_buffer_get_video_crop_meta (outbuf);
   crop->width = GST_VIDEO_INFO_WIDTH (&state->info);
   crop->height = GST_VIDEO_INFO_HEIGHT (&state->info);
-  dmabuf_fd_out = gst_ducati_videnc_buffer_lock(self, outbuf);
+  dmabuf_fd_out = gst_ducati_videnc_buffer_lock (self, outbuf);
 
   self->inBufs->planeDesc[0].buf = (XDAS_Int8 *) dmabuf_fd_in;
   self->inBufs->planeDesc[0].memType = XDM_MEMTYPE_RAW;
-  self->inBufs->planeDesc[0].bufSize.tileMem.width = GST_VIDEO_INFO_WIDTH (&state->info);
-  self->inBufs->planeDesc[0].bufSize.tileMem.height = GST_VIDEO_INFO_HEIGHT (&state->info);
-  self->inBufs->planeDesc[0].bufSize.bytes = GST_VIDEO_INFO_WIDTH (&state->info) * GST_VIDEO_INFO_HEIGHT (&state->info);
+  self->inBufs->planeDesc[0].bufSize.tileMem.width =
+      GST_VIDEO_INFO_WIDTH (&state->info);
+  self->inBufs->planeDesc[0].bufSize.tileMem.height =
+      GST_VIDEO_INFO_HEIGHT (&state->info);
+  self->inBufs->planeDesc[0].bufSize.bytes =
+      GST_VIDEO_INFO_WIDTH (&state->info) *
+      GST_VIDEO_INFO_HEIGHT (&state->info);
   self->inBufs->planeDesc[1].buf = (XDAS_Int8 *) dmabuf_fd_in;
   self->inBufs->planeDesc[1].memType = XDM_MEMTYPE_RAW;
-  self->inBufs->planeDesc[1].bufSize.tileMem.width = GST_VIDEO_INFO_WIDTH (&state->info);
-  self->inBufs->planeDesc[1].bufSize.tileMem.height = GST_VIDEO_INFO_HEIGHT (&state->info) / 2;
-  self->inBufs->planeDesc[1].bufSize.bytes = GST_VIDEO_INFO_WIDTH (&state->info) * GST_VIDEO_INFO_HEIGHT (&state->info) / 2;
+  self->inBufs->planeDesc[1].bufSize.tileMem.width =
+      GST_VIDEO_INFO_WIDTH (&state->info);
+  self->inBufs->planeDesc[1].bufSize.tileMem.height =
+      GST_VIDEO_INFO_HEIGHT (&state->info) / 2;
+  self->inBufs->planeDesc[1].bufSize.bytes =
+      GST_VIDEO_INFO_WIDTH (&state->info) *
+      GST_VIDEO_INFO_HEIGHT (&state->info) / 2;
   /* setting imageRegion doesn't seem to be strictly needed if activeFrameRegion
    * is set but we set it anyway...
    */
@@ -741,7 +754,7 @@ have_inbuf:
   t = gst_util_get_timestamp () - t;
   GST_DEBUG_OBJECT (self, "VIDENC2_process took %10dns (%d ms)", (gint) t,
       (gint) (t / 1000000));
-  gst_ducati_videnc_buffer_unlock(self, outbuf);
+  gst_ducati_videnc_buffer_unlock (self, outbuf);
   if (err) {
     GST_WARNING_OBJECT (self, "process failed: err=%d, extendedError=%08x",
         err, self->outArgs->extendedError);
@@ -759,29 +772,27 @@ have_inbuf:
   }
 
   if (self->outArgs->bytesGenerated > 0) {
-    gsize offset, maxsize, totalsize;
-    guint8 *codecdata = NULL;
-    gsize codecdatasize;
+    GstMapInfo info;
+    gboolean mapped;
     if (GST_DUCATIVIDENC_GET_CLASS (self)->is_sync_point (self,
-           self->outArgs->encodedFrameType)) {
-    GST_VIDEO_CODEC_FRAME_SET_SYNC_POINT(frame);
+            self->outArgs->encodedFrameType)) {
+      GST_VIDEO_CODEC_FRAME_SET_SYNC_POINT (frame);
     }
     if (frame->output_buffer) {
-       gst_buffer_unref (frame->output_buffer);
+      gst_buffer_unref (frame->output_buffer);
     }
 
-
-    totalsize =  gst_buffer_get_sizes (outbuf, &offset, &maxsize);
-    codecdata = g_slice_alloc0 (self->outArgs->bytesGenerated);
-    codecdatasize = gst_buffer_extract (outbuf, offset, codecdata, self->outArgs->bytesGenerated);
-
-    frame->output_buffer = gst_video_encoder_allocate_output_buffer (GST_VIDEO_ENCODER(self),self->outArgs->bytesGenerated);
-
-    gst_buffer_fill (frame->output_buffer, offset, codecdata, codecdatasize);
-    g_free(codecdata);
+    frame->output_buffer =
+        gst_video_encoder_allocate_output_buffer (GST_VIDEO_ENCODER (self),
+        self->outArgs->bytesGenerated);
+    mapped = gst_buffer_map (outbuf, &info, GST_MAP_READ);
+    if (mapped) {
+      gst_buffer_fill (frame->output_buffer, 0, info.data, info.size);
+      gst_buffer_unmap (outbuf, &info);
+    }
 
     GST_CAT_DEBUG_OBJECT (GST_CAT_PERFORMANCE, self,
-            "Encoded frame in %u bytes", self->outArgs->bytesGenerated);
+        "Encoded frame in %u bytes", self->outArgs->bytesGenerated);
 
     /* As we can get frames in a different order we sent them (if the codec
        supports B frames and we set it up for generating those), we need to
@@ -812,7 +823,7 @@ have_inbuf:
     GstBuffer *buf = (GstBuffer *) self->outArgs->freeBufID[i];
 
     GST_LOG_OBJECT (self, "free buffer: %p", buf);
-    gst_ducati_videnc_buffer_unlock(self, buf);
+    gst_ducati_videnc_buffer_unlock (self, buf);
     gst_buffer_unref (buf);
   }
 
-- 
1.7.9.5

