From cdbb29bb621dac53dea46648329c3b5f8c989e86 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Tue, 30 May 2017 12:38:19 -0500
Subject: [PATCH 11/16] remoteproc/pru: switch to client-driven boot
 methodology

The PRU remoteproc driver currently supports a hybrid boot methodology
- it supports auto-boot only for non PRU-Ethernet firmwares/usecases
and no auto-boot for PRU-Ethernet usecases in which the PRU Ethernet
driver is responsible for booting the PRUs. This is made possible due
to a short-term/temporary solution by using a module parameter and
specific PRU capabilities based on board detection in the driver. This
is not a scalable solution as the driver leveraged specific board
compatibles.

The PRU remoteproc driver is now modified to _not_ support auto-boot
by default for all use-cases so that the PRU load and boot is dictated
by the corresponding client drivers. This allows flexibility for the
client drivers/applications to set a firmware name (if needed) based
on their desired functionality and boot the PRU. The sysfs bind and
unbind attributes have also been suppressed so that the PRU devices
cannot be unbound and thereby shutdown a PRU from underneath a PRU
client driver.

Signed-off-by: Suman Anna <s-anna@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
---
 drivers/remoteproc/pru_rproc.c | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/drivers/remoteproc/pru_rproc.c b/drivers/remoteproc/pru_rproc.c
index 8eda5e7..f91a4da 100644
--- a/drivers/remoteproc/pru_rproc.c
+++ b/drivers/remoteproc/pru_rproc.c
@@ -749,12 +749,12 @@ static int pru_rproc_probe(struct platform_device *pdev)
 
 	/*
 	 * rproc_add will auto-boot the processor normally, but this is
-	 * not desired with the PRU Ethernet usecase. The PRU Ethernet
-	 * driver will boot the corresponding remote-processor as part
-	 * of its state machine.
+	 * not desired with PRU client driven boot-flow methodoly. A PRU
+	 * application/client driver will boot the corresponding PRU
+	 * remote-processor as part of its state machine either through
+	 * the remoteproc sysfs interface or through the equivalent kernel API
 	 */
-	if (use_eth)
-		rproc->auto_boot = false;
+	rproc->auto_boot = false;
 
 	pru = rproc->priv;
 	pru->id = pdata->id;
@@ -1075,6 +1075,7 @@ static int pru_rproc_remove(struct platform_device *pdev)
 	.driver = {
 		.name   = "pru-rproc",
 		.of_match_table = pru_rproc_match,
+		.suppress_bind_attrs = true,
 	},
 	.probe  = pru_rproc_probe,
 	.remove = pru_rproc_remove,
-- 
1.9.1

