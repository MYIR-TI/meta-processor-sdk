From 0d12a827cc183b7fe825e59a6ccdd5677140c721 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Mon, 20 Nov 2017 15:21:10 -0500
Subject: [PATCH 103/103] hsr/prp: fix duplicate discard mode handling for PRP

PRP has a duplicate discard mode that can be set to either
duplicate discard by default (0x20) or duplicate accept (0x21).
This causes the mode to be reflected in the SV frame TLV type value
to be either of these values. Currently this can't be changed. So add
a debugfs interface to change this at run time. Mark this as a HACK
since proper way to do this seems to be through the netlink socket
interface for which driver requires more enhancement.

While at it, fix a cut-n-paste error in comments for hsr_mode debugfs
code and also add range check for hsr mode parameter value when received
over debugfs interface.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 net/hsr-prp/hsr_prp_debugfs.c | 78 ++++++++++++++++++++++++++++++++++++++++++-
 net/hsr-prp/hsr_prp_device.c  | 10 ++++--
 net/hsr-prp/hsr_prp_main.h    |  6 ++++
 3 files changed, 91 insertions(+), 3 deletions(-)

diff --git a/net/hsr-prp/hsr_prp_debugfs.c b/net/hsr-prp/hsr_prp_debugfs.c
index e03cf46..c6ccddd 100644
--- a/net/hsr-prp/hsr_prp_debugfs.c
+++ b/net/hsr-prp/hsr_prp_debugfs.c
@@ -144,6 +144,64 @@ static void print_mac_address(struct seq_file *sfp, unsigned char *mac)
 	.release = single_release,
 };
 
+/* dd_mode_show - print the value of duplicate_discard debugfs file
+ * for prp device
+ */
+static int
+dd_mode_show(struct seq_file *sfp, void *data)
+{
+	struct hsr_prp_priv *priv = (struct hsr_prp_priv *)sfp->private;
+
+	seq_printf(sfp, "%u\n", priv->dup_discard_mode);
+
+	return 0;
+}
+
+/* dd_mode_write - write the user provided value to duplicate_discard debugfs
+ * file
+ */
+static ssize_t
+dd_mode_write(struct file *file, const char __user *user_buf,
+	      size_t count, loff_t *ppos)
+{
+	struct hsr_prp_priv *priv =
+		((struct seq_file *)(file->private_data))->private;
+	unsigned long mode;
+	int err;
+
+	err = kstrtoul_from_user(user_buf, count, 0, &mode);
+	if (err)
+		return err;
+
+	if (priv->dup_discard_mode < IEC62439_3_PRP_DA ||
+	    priv->dup_discard_mode > IEC62439_3_PRP_DD)
+		return -EINVAL;
+
+	priv->dup_discard_mode = mode;
+
+	return count;
+}
+
+/* dd_mode_open - Open the duplicate discard mode debugfs file
+ *
+ * Description:
+ * This routine opens a debugfs file duplicate_discard for prp device
+ */
+static int
+dd_mode_open(struct inode *inode, struct file *filp)
+{
+	return single_open(filp, dd_mode_show, inode->i_private);
+}
+
+static const struct file_operations dd_mode_fops = {
+	.owner	= THIS_MODULE,
+	.open	= dd_mode_open,
+	.read	= seq_read,
+	.write	= dd_mode_write,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
 /* hsr_mode_show - print the value of hsr_mode debugfs file
  * for hsr device
  */
@@ -179,12 +237,15 @@ static void print_mac_address(struct seq_file *sfp, unsigned char *mac)
 	if (!(priv->rx_offloaded && priv->l2_fwd_offloaded))
 		return -EPERM;
 
+	if (mode < IEC62439_3_HSR_MODE_H || mode > IEC62439_3_HSR_MODE_M)
+		return -EINVAL;
+
 	priv->hsr_mode = mode;
 
 	return count;
 }
 
-/* hsr_mode_open - Open the prueth_hsr_mode_open debugfs file
+/* hsr_mode_open - Open the hsr_mode debugfs file
  *
  * Description:
  * This routine opens a debugfs file hsr_mode for hsr device
@@ -264,6 +325,18 @@ int hsr_prp_debugfs_init(struct hsr_prp_priv *priv,
 		priv->hsr_mode_file = de;
 	}
 
+	if (priv->prot_version == PRP_V1) {
+		de = debugfs_create_file("duplicate_discard", 0444,
+					 priv->root_dir, priv,
+					 &dd_mode_fops);
+		if (!de) {
+			netdev_err(hsr_prp_dev,
+				   "Can't create duplcate_discard mode file\n");
+			return rc;
+		}
+		priv->dd_mode_file = de;
+	}
+
 	return 0;
 } /* end of hst_prp_debugfs_init */
 
@@ -283,6 +356,9 @@ int hsr_prp_debugfs_init(struct hsr_prp_priv *priv,
 	if (priv->prot_version == HSR_V1)
 		debugfs_remove(priv->hsr_mode_file);
 	priv->hsr_mode_file = NULL;
+	if (priv->prot_version == PRP_V1)
+		debugfs_remove(priv->dd_mode_file);
+	priv->dd_mode_file = NULL;
 	debugfs_remove(priv->root_dir);
 	priv->root_dir = NULL;
 }
diff --git a/net/hsr-prp/hsr_prp_device.c b/net/hsr-prp/hsr_prp_device.c
index 0254d1b..0f64c33 100644
--- a/net/hsr-prp/hsr_prp_device.c
+++ b/net/hsr-prp/hsr_prp_device.c
@@ -372,7 +372,11 @@ static void hsr_prp_announce(unsigned long data)
 			send_supervision_frame(master, HSR_TLV_LIFE_CHECK,
 					       priv->prot_version);
 		else /* PRP */
-			send_supervision_frame(master, PRP_TLV_LIFE_CHECK_DD,
+			send_supervision_frame(master,
+					       (priv->dup_discard_mode ==
+						IEC62439_3_PRP_DD) ?
+						PRP_TLV_LIFE_CHECK_DD :
+						PRP_TLV_LIFE_CHECK_DA,
 					       priv->prot_version);
 
 		priv->announce_timer.expires = jiffies +
@@ -503,9 +507,11 @@ int hsr_prp_dev_finalize(struct net_device *hsr_prp_dev,
 	priv->prot_version = protocol_version;
 	if (priv->prot_version == PRP_V1) {
 		/* For PRP, lan_id has most significant 3 bits holding
-		 * the net_id of PRP_LAN_ID
+		 * the net_id of PRP_LAN_ID and also duplicate discard
+		 * mode set.
 		 */
 		priv->net_id = PRP_LAN_ID << 1;
+		priv->dup_discard_mode = IEC62439_3_PRP_DD;
 	} else {
 		priv->hsr_mode = IEC62439_3_HSR_MODE_H;
 	}
diff --git a/net/hsr-prp/hsr_prp_main.h b/net/hsr-prp/hsr_prp_main.h
index e8137d4..bed07c0 100644
--- a/net/hsr-prp/hsr_prp_main.h
+++ b/net/hsr-prp/hsr_prp_main.h
@@ -212,6 +212,10 @@ struct hsr_prp_port {
 #define HSR	0
 #define PRP	1
 
+/* PRP duplicate discard modes */
+#define IEC62439_3_PRP_DA	1
+#define IEC62439_3_PRP_DD	2
+
 #define IEC62439_3_HSR_MODE_H	1
 #define IEC62439_3_HSR_MODE_N	2
 #define IEC62439_3_HSR_MODE_T	3
@@ -242,6 +246,7 @@ struct hsr_prp_priv {
 				 * of lan_id
 				 */
 	u8 hsr_mode;		/* value of hsr mode */
+	u8 dup_discard_mode;		/* Duplicate Discard mode for PRP */
 	spinlock_t seqnr_lock;	/* locking for sequence_nr */
 	unsigned char		sup_multicast_addr[ETH_ALEN];
 #ifdef	CONFIG_DEBUG_FS
@@ -249,6 +254,7 @@ struct hsr_prp_priv {
 	struct dentry *node_tbl_file;
 	struct dentry *stats_file;
 	struct dentry *hsr_mode_file;
+	struct dentry *dd_mode_file;
 #endif
 };
 
-- 
1.9.1

