From 6edf04dc182a36f284d3da461169b38e3033c7de Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Mon, 19 Jun 2017 10:43:42 -0400
Subject: [PATCH 41/86] hsr: add mode T support for HSR in offload case

For HSR, add support for mode T which is transparent mode. In this
mode, the hsr device just duplicate the packets and send it over
its slaves.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
---
 net/hsr-prp/hsr_prp_debugfs.c | 85 ++++++++++++++++++++++++++++++++++++++++++-
 net/hsr-prp/hsr_prp_device.c  |  2 +
 net/hsr-prp/hsr_prp_forward.c | 24 ++++++++----
 net/hsr-prp/hsr_prp_main.h    |  9 +++++
 4 files changed, 112 insertions(+), 8 deletions(-)

diff --git a/net/hsr-prp/hsr_prp_debugfs.c b/net/hsr-prp/hsr_prp_debugfs.c
index 7cf2cac..fb53ad6 100644
--- a/net/hsr-prp/hsr_prp_debugfs.c
+++ b/net/hsr-prp/hsr_prp_debugfs.c
@@ -136,6 +136,67 @@ static void print_mac_address(struct seq_file *sfp, unsigned char *mac)
 	.llseek = seq_lseek,
 	.release = single_release,
 };
+
+/* hsr_mode_show - print the value of hsr_mode debugfs file
+ * for hsr device
+ */
+static int
+hsr_mode_show(struct seq_file *sfp, void *data)
+{
+	struct hsr_prp_priv *priv = (struct hsr_prp_priv *)sfp->private;
+
+	seq_printf(sfp, "%u\n", priv->hsr_mode);
+
+	return 0;
+}
+
+/* hsr_mode_write - write the user provided value to
+ * hsr_mode debugfs file
+ */
+static ssize_t
+hsr_mode_write(struct file *file, const char __user *user_buf,
+	       size_t count, loff_t *ppos)
+{
+	struct hsr_prp_priv *priv =
+		((struct seq_file *)(file->private_data))->private;
+	unsigned long mode;
+	int err;
+
+	err = kstrtoul_from_user(user_buf, count, 0, &mode);
+	if (err)
+		return err;
+
+	/* Support mode change only if offloaded as more change
+	 * is needed to support non offloaded case
+	 */
+	if (!(priv->rx_offloaded && priv->l2_fwd_offloaded))
+		return -EPERM;
+
+	priv->hsr_mode = mode;
+
+	return count;
+}
+
+/* hsr_mode_open - Open the prueth_hsr_mode_open debugfs file
+ *
+ * Description:
+ * This routine opens a debugfs file hsr_mode for hsr device
+ */
+static int
+hsr_mode_open(struct inode *inode, struct file *filp)
+{
+	return single_open(filp, hsr_mode_show, inode->i_private);
+}
+
+static const struct file_operations hsr_mode_fops = {
+	.owner	= THIS_MODULE,
+	.open	= hsr_mode_open,
+	.read	= seq_read,
+	.write	= hsr_mode_write,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
 /* hsr_prp_debugfs_init - create hsr-prp node_table file for dumping
  * the node table
  *
@@ -149,7 +210,14 @@ int hsr_prp_debugfs_init(struct hsr_prp_priv *priv,
 	int rc = -1;
 	struct dentry *de = NULL;
 
+#ifdef TODO
 	de = debugfs_create_dir(hsr_prp_dev->name, NULL);
+#else
+	if (priv->prot_version <= HSR_V1)
+		de = debugfs_create_dir("hsr", NULL);
+	else
+		de = debugfs_create_dir("prp", NULL);
+#endif
 	if (!de) {
 		netdev_err(hsr_prp_dev, "Cannot create hsr-prp debugfs root\n");
 		return rc;
@@ -172,11 +240,23 @@ int hsr_prp_debugfs_init(struct hsr_prp_priv *priv,
 				 &hsr_prp_stats_fops);
 	if (!de) {
 		netdev_err(hsr_prp_dev,
-			   "Cannot create hsr-prp stats directory\n");
+			   "Cannot create hsr-prp stats file\n");
 		return rc;
 	}
 	priv->stats_file = de;
 
+	if (priv->prot_version == HSR_V1) {
+		de = debugfs_create_file("hsr_mode", 0444,
+					 priv->root_dir, priv,
+					 &hsr_mode_fops);
+		if (!de) {
+			netdev_err(hsr_prp_dev,
+				   "Cannot create hsr-prp hsr_mode file\n");
+			return rc;
+		}
+		priv->hsr_mode_file = de;
+	}
+
 	return 0;
 } /* end of hst_prp_debugfs_init */
 
@@ -193,6 +273,9 @@ int hsr_prp_debugfs_init(struct hsr_prp_priv *priv,
 	priv->node_tbl_file = NULL;
 	debugfs_remove(priv->stats_file);
 	priv->stats_file = NULL;
+	if (priv->prot_version == HSR_V1)
+		debugfs_remove(priv->hsr_mode_file);
+	priv->hsr_mode_file = NULL;
 	debugfs_remove(priv->root_dir);
 	priv->root_dir = NULL;
 }
diff --git a/net/hsr-prp/hsr_prp_device.c b/net/hsr-prp/hsr_prp_device.c
index ca6ea4c..4e84cb1 100644
--- a/net/hsr-prp/hsr_prp_device.c
+++ b/net/hsr-prp/hsr_prp_device.c
@@ -503,6 +503,8 @@ int hsr_prp_dev_finalize(struct net_device *hsr_prp_dev,
 		 * the net_id of PRP_LAN_ID
 		 */
 		priv->net_id = PRP_LAN_ID << 1;
+	} else {
+		priv->hsr_mode = IEC62439_3_HSR_MODE_H;
 	}
 
 	spin_lock_init(&priv->seqnr_lock);
diff --git a/net/hsr-prp/hsr_prp_forward.c b/net/hsr-prp/hsr_prp_forward.c
index 3f98fcc..bbc2642 100644
--- a/net/hsr-prp/hsr_prp_forward.c
+++ b/net/hsr-prp/hsr_prp_forward.c
@@ -274,6 +274,9 @@ static struct sk_buff *create_tagged_skb(struct sk_buff *skb_o,
 
 		prp_fill_rct(skb, frame, port);
 		return skb;
+	} else if ((port->priv->prot_version == HSR_V1) &&
+		   (port->priv->hsr_mode == IEC62439_3_HSR_MODE_T)) {
+		return skb_clone(skb_o, GFP_ATOMIC);
 	}
 
 	/* Create the new skb with enough headroom to fit the HSR tag */
@@ -577,13 +580,20 @@ static int hsr_prp_fill_frame_info(struct hsr_prp_frame_info *frame,
 			if (port->type != HSR_PRP_PT_MASTER) {
 				frame->is_from_san = true;
 			} else {
-				/* Sequence nr for the master node */
-				spin_lock_irqsave(&port->priv->seqnr_lock,
-						  irqflags);
-				frame->sequence_nr = port->priv->sequence_nr;
-				port->priv->sequence_nr++;
-				spin_unlock_irqrestore(&port->priv->seqnr_lock,
-						       irqflags);
+				if (((priv->prot_version == HSR_V1) &&
+				     (priv->hsr_mode
+					!= IEC62439_3_HSR_MODE_T)) ||
+				     (priv->prot_version == PRP_V1) ||
+				     (priv->prot_version == HSR_V0))	{
+					/* Sequence nr for the master node */
+					spin_lock_irqsave(&priv->seqnr_lock,
+							  irqflags);
+					frame->sequence_nr = priv->sequence_nr;
+					priv->sequence_nr++;
+					spin_unlock_irqrestore(&priv->
+							       seqnr_lock,
+							       irqflags);
+				}
 			}
 		}
 	}
diff --git a/net/hsr-prp/hsr_prp_main.h b/net/hsr-prp/hsr_prp_main.h
index d34174d..84c5fe9 100644
--- a/net/hsr-prp/hsr_prp_main.h
+++ b/net/hsr-prp/hsr_prp_main.h
@@ -210,6 +210,13 @@ struct hsr_prp_port {
 
 #define HSR	0
 #define PRP	1
+
+#define IEC62439_3_HSR_MODE_H	1
+#define IEC62439_3_HSR_MODE_N	2
+#define IEC62439_3_HSR_MODE_T	3
+#define IEC62439_3_HSR_MODE_U	4
+#define IEC62439_3_HSR_MODE_M	5
+
 struct hsr_prp_priv {
 	struct rcu_head		rcu_head;
 	struct list_head	ports;
@@ -233,12 +240,14 @@ struct hsr_prp_priv {
 	u8 net_id;		/* for PRP, it occupies most significant 3 bits
 				 * of lan_id
 				 */
+	u8 hsr_mode;		/* value of hsr mode */
 	spinlock_t seqnr_lock;	/* locking for sequence_nr */
 	unsigned char		sup_multicast_addr[ETH_ALEN];
 #ifdef	CONFIG_DEBUG_FS
 	struct dentry *root_dir;
 	struct dentry *node_tbl_file;
 	struct dentry *stats_file;
+	struct dentry *hsr_mode_file;
 #endif
 };
 
-- 
1.9.1

