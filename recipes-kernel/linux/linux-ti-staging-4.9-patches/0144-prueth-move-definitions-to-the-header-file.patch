From dec8a8ab2a4572197b4ce09ff6178f73a7119c51 Mon Sep 17 00:00:00 2001
From: Vitaly Andrianov <vitalya@ti.com>
Date: Fri, 22 Dec 2017 08:00:27 -0500
Subject: [PATCH 144/146] prueth: move definitions to the header file

The prueth.c is quite large file and we need to split it into logical
parts. This commit moves common definitions to the header file.

Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
---
 drivers/net/ethernet/ti/prueth.c | 302 --------------------------------------
 drivers/net/ethernet/ti/prueth.h | 304 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 304 insertions(+), 302 deletions(-)

diff --git a/drivers/net/ethernet/ti/prueth.c b/drivers/net/ethernet/ti/prueth.c
index b965c8a..e2d844d 100644
--- a/drivers/net/ethernet/ti/prueth.c
+++ b/drivers/net/ethernet/ti/prueth.c
@@ -44,317 +44,15 @@
 #define PRUETH_MODULE_VERSION "0.2"
 #define PRUETH_MODULE_DESCRIPTION "PRUSS Ethernet driver"
 
-#define OCMC_RAM_SIZE		(SZ_64K - SZ_8K)
-
-/* Pn_COL_BUFFER_OFFSET @ 0xEE00 0xF400 0xFA00 */
-#define OCMC_RAM_SIZE_SWITCH	(SZ_64K)
-
-/* TX Minimum Inter packet gap */
-#define TX_MIN_IPG		0xb8
-
-#define TX_START_DELAY		0x40
-#define TX_CLK_DELAY		0x6
-
-/* PRUSS local memory map */
-#define ICSS_LOCAL_SHARED_RAM   0x00010000
-
-/* Netif debug messages possible */
-#define PRUETH_EMAC_DEBUG	(NETIF_MSG_DRV | \
-				 NETIF_MSG_PROBE | \
-				 NETIF_MSG_LINK | \
-				 NETIF_MSG_TIMER | \
-				 NETIF_MSG_IFDOWN | \
-				 NETIF_MSG_IFUP | \
-				 NETIF_MSG_RX_ERR | \
-				 NETIF_MSG_TX_ERR | \
-				 NETIF_MSG_TX_QUEUED | \
-				 NETIF_MSG_INTR | \
-				 NETIF_MSG_TX_DONE | \
-				 NETIF_MSG_RX_STATUS | \
-				 NETIF_MSG_PKTDATA | \
-				 NETIF_MSG_HW | \
-				 NETIF_MSG_WOL)
-
 static int debug_level = -1;
 module_param(debug_level, int, 0);
 MODULE_PARM_DESC(debug_level, "PRUETH debug level (NETIF_MSG bits)");
 
-#define EMAC_MAX_PKTLEN		(ETH_HLEN + VLAN_HLEN + ETH_DATA_LEN)
-#define EMAC_MIN_PKTLEN		(60)
-
-enum pruss_device {
-	PRUSS_AM57XX = 0,
-	PRUSS_AM4376,
-	PRUSS_AM3359,
-	PRUSS_K2G
-};
-
-#define PRUSS0 0
-#define PRUSS1 1
-#define PRUSS2 2
-
-/* PRU Ethernet Type - Ethernet functionality (protocol
- * implemented) provided by the PRU firmware being loaded.
- */
-enum pruss_ethtype {
-	PRUSS_ETHTYPE_EMAC = 0,
-	PRUSS_ETHTYPE_HSR,
-	PRUSS_ETHTYPE_PRP,
-	PRUSS_ETHTYPE_SWITCH,
-	PRUSS_ETHTYPE_MAX,
-};
-
-#define HSR_TAG_LEN		(10)
-#define EMAC_MAX_PKTLEN_HSR	(EMAC_MAX_PKTLEN + HSR_TAG_LEN)
-#define PRUETH_IS_EMAC(p)	((p)->eth_type == PRUSS_ETHTYPE_EMAC)
-#define PRUETH_IS_HSR(p)	((p)->eth_type == PRUSS_ETHTYPE_HSR)
-#define PRUETH_IS_PRP(p)	((p)->eth_type == PRUSS_ETHTYPE_PRP)
-#define PRUETH_IS_SWITCH(p)	((p)->eth_type == PRUSS_ETHTYPE_SWITCH)
-
-#define PRUETH_HAS_HSR(p)	PRUETH_IS_HSR(p)
-#define PRUETH_HAS_PRP(p)	PRUETH_IS_PRP(p)
-#define PRUETH_HAS_RED(p)	(PRUETH_HAS_HSR(p) || PRUETH_HAS_PRP(p))
-
-#define PRUETH_HAS_SWITCH(p) \
-	(PRUETH_IS_SWITCH(p) || PRUETH_HAS_HSR(p) || PRUETH_HAS_PRP(p))
-
-#define MS_TO_NS(msec)		((msec) * 1000 * 1000)
-#define PRUETH_RED_TABLE_CHECK_PERIOD_MS	10
-#define PRUETH_HAS_PTP(p)       PRUETH_HAS_PRP(p)
-/* A group of PCPs are mapped to a Queue. This is the size of firmware
- * array in shared memory
- */
-#define PCP_GROUP_TO_QUEUE_MAP_SIZE	8
-
-/* In switch mode there are 3 real ports i.e. 3 mac addrs.
- * however Linux sees only the host side port. The other 2 ports
- * are the switch ports.
- * In emac mode there are 2 real ports i.e. 2 mac addrs.
- * Linux sees both the ports.
- */
-enum prueth_port {
-	PRUETH_PORT_HOST = 0,	/* host side port */
-	PRUETH_PORT_MII0,	/* physical port MII 0 */
-	PRUETH_PORT_MII1,	/* physical port MII 1 */
-	PRUETH_PORT_MAX,
-};
-
-/* In both switch & emac modes there are 3 port queues
- * EMAC mode:
- *	RX packets for both MII0 & MII1 ports come on
- *	QUEUE_HOST.
- *	TX packets for MII0 go on QUEUE_MII0, TX packets
- *	for MII1 go on QUEUE_MII1.
- * Switch mode:
- *	Host port RX packets come on QUEUE_HOST
- *	TX packets might have to go on MII0 or MII1 or both.
- *	MII0 TX queue is QUEUE_MII0 and MII1 TX queue is
- *	QUEUE_MII1.
- */
-enum prueth_port_queue_id {
-	PRUETH_PORT_QUEUE_HOST = 0,
-	PRUETH_PORT_QUEUE_MII0,
-	PRUETH_PORT_QUEUE_MII1,
-	PRUETH_PORT_QUEUE_MII0_RX,
-	PRUETH_PORT_QUEUE_MII1_RX,
-	PRUETH_PORT_QUEUE_MAX,
-};
-
-#define NUM_RX_QUEUES	(NUM_QUEUES / 2)
-/* Each port queue has 4 queues and 1 collision queue */
-enum prueth_queue_id {
-	PRUETH_QUEUE1 = 0,
-	PRUETH_QUEUE2,
-	PRUETH_QUEUE3,
-	PRUETH_QUEUE4,
-	PRUETH_COLQ,	/* collision queue */
-};
-
-/* PRUeth memory range identifiers */
-enum prueth_mem {
-	PRUETH_MEM_DRAM0 = 0,
-	PRUETH_MEM_DRAM1,
-	PRUETH_MEM_SHARED_RAM,
-	PRUETH_MEM_IEP,
-	PRUETH_MEM_MII,
-	PRUETH_MEM_OCMC,
-	PRUETH_MEM_MAX,
-};
-
 /* ensure that order of PRUSS mem regions is same as above */
 static enum pruss_mem pruss_mem_ids[] = { PRUSS_MEM_DRAM0, PRUSS_MEM_DRAM1,
 					  PRUSS_MEM_SHRD_RAM2, PRUSS_MEM_IEP,
 					  PRUSS_MEM_MII_RT };
 
-/**
- * @fw_name: firmware names of firmware to run on PRU
- */
-struct prueth_firmwares {
-	const char *fw_name[PRUSS_ETHTYPE_MAX];
-};
-
-/**
- * struct prueth_private_data - PRU Ethernet private data
- * @driver_data: soc that contains the pruss
- * @fw_pru: firmware to run on each pruss
- */
-struct prueth_private_data {
-	enum pruss_device driver_data;
-	struct prueth_firmwares fw_pru[PRUSS_NUM_PRUS];
-};
-
-/* data for each emac port */
-struct prueth_emac {
-	struct prueth *prueth;
-	struct net_device *ndev;
-	struct sk_buff *tx_ev_msg[PTP_PDLY_RSP_MSG_ID + 1]; /* tx ev needs ts */
-	u8 mac_addr[6];
-	u32 msg_enable;
-
-	int link;
-	int speed;
-	int duplex;
-
-	const char *phy_id;
-	struct device_node *phy_node;
-	int phy_if;
-	struct phy_device *phydev;
-
-	enum prueth_port port_id;
-	/* emac mode irqs */
-	int rx_irq;
-	int tx_irq;
-
-	struct prueth_queue_desc __iomem *rx_queue_descs;
-	struct prueth_queue_desc __iomem *tx_queue_descs;
-	struct prueth_queue_desc __iomem *tx_colq_descs;
-
-	unsigned int prp_emac_mode;
-	struct port_statistics stats; /* stats holder when i/f is down */
-	u32 tx_collisions;
-	u32 tx_collision_drops;
-	u32 rx_overflows;
-	u32 tx_packet_counts[NUM_QUEUES];
-	u32 rx_packet_counts[NUM_RX_QUEUES];
-
-	spinlock_t lock;	/* serialize access */
-#ifdef	CONFIG_DEBUG_FS
-	struct dentry *root_dir;
-	struct dentry *stats_file;
-	struct dentry *prp_emac_mode_file;
-#endif
-	int ptp_tx_enable;
-	int ptp_rx_enable;
-	int ptp_tx_irq;
-};
-
-struct prueth_mmap_port_cfg_basis {
-	u16 queue_size[NUM_QUEUES];
-	u16 queue1_bd_offset;
-	u16 queue1_buff_offset;
-	u16 queue1_desc_offset;
-	u16 col_queue_size;
-	u16 col_bd_offset;
-	u16 col_buff_offset;
-	u16 col_queue_desc_offset;
-};
-
-struct prueth_mmap_sram_emac {
-	u16 icss_emac_firmware_release_1_offset;  /* = eof_48k_buffer_bd */
-	u16 icss_emac_firmware_release_2_offset;  /* +4 */
-
-	u16 host_q1_rx_context_offset;            /* +4 */
-	u16 host_q2_rx_context_offset;            /* +8 */
-	u16 host_q3_rx_context_offset;            /* +8 */
-	u16 host_q4_rx_context_offset;            /* +8 */
-
-	u16 host_queue_descriptor_offset_addr;    /* +8 */
-	u16 host_queue_offset_addr;               /* +8 */
-	u16 host_queue_size_addr;                 /* +8 */
-	u16 host_queue_desc_offset;               /* +16 */
-};
-
-struct prueth_mmap_sram_sw {
-	u16 col_bd_offset[PRUETH_PORT_MAX];
-};
-
-struct prueth_mmap_sram_cfg {
-	/* P0_Q1_BD_OFFSET = SRAM_START_OFFSET */
-	u16 bd_offset[PRUETH_PORT_MAX][NUM_QUEUES];
-
-	u16 end_of_bd_pool;
-	u16 port_bd_size;
-	u16 host_bd_size;
-	u16 eof_48k_buffer_bd;
-
-	union {
-		struct prueth_mmap_sram_sw   mmap_sram_sw;
-		struct prueth_mmap_sram_emac mmap_sram_emac;
-	};
-};
-
-struct prueth_mmap_ocmc_cfg {
-	u16 buffer_offset[PRUETH_PORT_MAX][NUM_QUEUES];
-};
-
-/**
- * struct prueth - PRUeth structure
- * @dev: device
- * @pruss: pruss handle
- * @pru0: rproc instance to PRU0
- * @pru1: rproc instance to PRU1
- * @mem: PRUSS memory resources we need to access
- * @sram_pool: OCMC ram pool for buffers
- *
- * @eth_node: node for each emac node
- * @emac: emac data for three ports, one host and two physical
- * @registered_netdevs: net device for each registered emac
- * @fw_data: firmware names to be used with PRU remoteprocs
- * @pruss_id: PRUSS instance id
- */
-struct prueth {
-	struct device *dev;
-	struct pruss *pruss;
-	struct rproc *pru0, *pru1;
-	struct pruss_mem_region mem[PRUETH_MEM_MAX];
-	struct gen_pool *sram_pool;
-
-	struct device_node *eth_node[PRUETH_PORT_MAX];
-	struct device_node *prueth_np;
-	struct prueth_emac *emac[PRUETH_PORT_MAX];
-	struct net_device *registered_netdevs[PRUETH_PORT_MAX];
-	const struct prueth_private_data *fw_data;
-	int pruss_id;
-	size_t ocmc_ram_size;
-	unsigned int eth_type;
-	unsigned int hsr_mode;
-	unsigned int emac_configured;
-	unsigned int tbl_check_period;
-	unsigned int node_table_clear;
-	unsigned int tbl_check_mask;
-	struct hrtimer tbl_check_timer;
-	struct prueth_mmap_port_cfg_basis mmap_port_cfg_basis[PRUETH_PORT_MAX];
-	struct prueth_mmap_sram_cfg mmap_sram_cfg;
-	struct prueth_mmap_ocmc_cfg mmap_ocmc_cfg;
-	struct lre_statistics lre_stats;
-	struct iep *iep;
-	/* To provide a synchronization point to wait before proceed to port
-	 * specific initialization or configuration. This is needed when
-	 * concurrent device open happens.
-	 */
-	struct mutex mlock;
-#ifdef	CONFIG_DEBUG_FS
-	struct dentry *root_dir;
-	struct dentry *node_tbl_file;
-	struct dentry *nt_clear_file;
-	struct dentry *hsr_mode_file;
-	struct dentry *dlrmt_file;
-	struct dentry *dd_file;
-	struct dentry *tr_file;
-	struct dentry *error_stats_file;
-#endif
-};
-
 static int pruss0_ethtype = PRUSS_ETHTYPE_EMAC;
 module_param(pruss0_ethtype, int, 0444);
 MODULE_PARM_DESC(pruss0_ethtype, "Choose PRUSS0 eth-type firmware");
diff --git a/drivers/net/ethernet/ti/prueth.h b/drivers/net/ethernet/ti/prueth.h
index 5c7555a..f21ba8e 100644
--- a/drivers/net/ethernet/ti/prueth.h
+++ b/drivers/net/ethernet/ti/prueth.h
@@ -16,6 +16,8 @@
 #ifndef __NET_TI_PRUETH_H
 #define __NET_TI_PRUETH_H
 
+#include "icss_switch.h"
+
 /**
  * struct prueth_queue_desc - Queue descriptor
  * @rd_ptr:	Read pointer, points to a buffer descriptor in Shared PRU RAM.
@@ -270,4 +272,306 @@ struct prueth_hsr_prp_node {
 	u16 time_last_seen_b;
 } __packed;
 
+#define OCMC_RAM_SIZE		(SZ_64K - SZ_8K)
+
+/* Pn_COL_BUFFER_OFFSET @ 0xEE00 0xF400 0xFA00 */
+#define OCMC_RAM_SIZE_SWITCH	(SZ_64K)
+
+/* TX Minimum Inter packet gap */
+#define TX_MIN_IPG		0xb8
+
+#define TX_START_DELAY		0x40
+#define TX_CLK_DELAY		0x6
+
+/* PRUSS local memory map */
+#define ICSS_LOCAL_SHARED_RAM   0x00010000
+
+/* Netif debug messages possible */
+#define PRUETH_EMAC_DEBUG	(NETIF_MSG_DRV | \
+				 NETIF_MSG_PROBE | \
+				 NETIF_MSG_LINK | \
+				 NETIF_MSG_TIMER | \
+				 NETIF_MSG_IFDOWN | \
+				 NETIF_MSG_IFUP | \
+				 NETIF_MSG_RX_ERR | \
+				 NETIF_MSG_TX_ERR | \
+				 NETIF_MSG_TX_QUEUED | \
+				 NETIF_MSG_INTR | \
+				 NETIF_MSG_TX_DONE | \
+				 NETIF_MSG_RX_STATUS | \
+				 NETIF_MSG_PKTDATA | \
+				 NETIF_MSG_HW | \
+				 NETIF_MSG_WOL)
+
+#define EMAC_MAX_PKTLEN		(ETH_HLEN + VLAN_HLEN + ETH_DATA_LEN)
+#define EMAC_MIN_PKTLEN		(60)
+
+enum pruss_device {
+	PRUSS_AM57XX = 0,
+	PRUSS_AM4376,
+	PRUSS_AM3359,
+	PRUSS_K2G
+};
+
+#define PRUSS0 0
+#define PRUSS1 1
+#define PRUSS2 2
+
+/* PRU Ethernet Type - Ethernet functionality (protocol
+ * implemented) provided by the PRU firmware being loaded.
+ */
+enum pruss_ethtype {
+	PRUSS_ETHTYPE_EMAC = 0,
+	PRUSS_ETHTYPE_HSR,
+	PRUSS_ETHTYPE_PRP,
+	PRUSS_ETHTYPE_SWITCH,
+	PRUSS_ETHTYPE_MAX,
+};
+
+#define HSR_TAG_LEN		(10)
+#define EMAC_MAX_PKTLEN_HSR	(EMAC_MAX_PKTLEN + HSR_TAG_LEN)
+#define PRUETH_IS_EMAC(p)	((p)->eth_type == PRUSS_ETHTYPE_EMAC)
+#define PRUETH_IS_HSR(p)	((p)->eth_type == PRUSS_ETHTYPE_HSR)
+#define PRUETH_IS_PRP(p)	((p)->eth_type == PRUSS_ETHTYPE_PRP)
+#define PRUETH_IS_SWITCH(p)	((p)->eth_type == PRUSS_ETHTYPE_SWITCH)
+
+#define PRUETH_HAS_HSR(p)	PRUETH_IS_HSR(p)
+#define PRUETH_HAS_PRP(p)	PRUETH_IS_PRP(p)
+#define PRUETH_HAS_RED(p)	(PRUETH_HAS_HSR(p) || PRUETH_HAS_PRP(p))
+
+#define PRUETH_HAS_SWITCH(p) \
+	(PRUETH_IS_SWITCH(p) || PRUETH_HAS_HSR(p) || PRUETH_HAS_PRP(p))
+
+#define MS_TO_NS(msec)		((msec) * 1000 * 1000)
+#define PRUETH_RED_TABLE_CHECK_PERIOD_MS	10
+#define PRUETH_HAS_PTP(p)       PRUETH_HAS_PRP(p)
+/* A group of PCPs are mapped to a Queue. This is the size of firmware
+ * array in shared memory
+ */
+#define PCP_GROUP_TO_QUEUE_MAP_SIZE	8
+
+/* In switch mode there are 3 real ports i.e. 3 mac addrs.
+ * however Linux sees only the host side port. The other 2 ports
+ * are the switch ports.
+ * In emac mode there are 2 real ports i.e. 2 mac addrs.
+ * Linux sees both the ports.
+ */
+enum prueth_port {
+	PRUETH_PORT_HOST = 0,	/* host side port */
+	PRUETH_PORT_MII0,	/* physical port MII 0 */
+	PRUETH_PORT_MII1,	/* physical port MII 1 */
+	PRUETH_PORT_MAX,
+};
+
+/* In both switch & emac modes there are 3 port queues
+ * EMAC mode:
+ *	RX packets for both MII0 & MII1 ports come on
+ *	QUEUE_HOST.
+ *	TX packets for MII0 go on QUEUE_MII0, TX packets
+ *	for MII1 go on QUEUE_MII1.
+ * Switch mode:
+ *	Host port RX packets come on QUEUE_HOST
+ *	TX packets might have to go on MII0 or MII1 or both.
+ *	MII0 TX queue is QUEUE_MII0 and MII1 TX queue is
+ *	QUEUE_MII1.
+ */
+enum prueth_port_queue_id {
+	PRUETH_PORT_QUEUE_HOST = 0,
+	PRUETH_PORT_QUEUE_MII0,
+	PRUETH_PORT_QUEUE_MII1,
+	PRUETH_PORT_QUEUE_MII0_RX,
+	PRUETH_PORT_QUEUE_MII1_RX,
+	PRUETH_PORT_QUEUE_MAX,
+};
+
+#define NUM_RX_QUEUES	(NUM_QUEUES / 2)
+/* Each port queue has 4 queues and 1 collision queue */
+enum prueth_queue_id {
+	PRUETH_QUEUE1 = 0,
+	PRUETH_QUEUE2,
+	PRUETH_QUEUE3,
+	PRUETH_QUEUE4,
+	PRUETH_COLQ,	/* collision queue */
+};
+
+/* PRUeth memory range identifiers */
+enum prueth_mem {
+	PRUETH_MEM_DRAM0 = 0,
+	PRUETH_MEM_DRAM1,
+	PRUETH_MEM_SHARED_RAM,
+	PRUETH_MEM_IEP,
+	PRUETH_MEM_MII,
+	PRUETH_MEM_OCMC,
+	PRUETH_MEM_MAX,
+};
+
+/**
+ * @fw_name: firmware names of firmware to run on PRU
+ */
+struct prueth_firmwares {
+	const char *fw_name[PRUSS_ETHTYPE_MAX];
+};
+
+/**
+ * struct prueth_private_data - PRU Ethernet private data
+ * @driver_data: soc that contains the pruss
+ * @fw_pru: firmware to run on each pruss
+ */
+struct prueth_private_data {
+	enum pruss_device driver_data;
+	struct prueth_firmwares fw_pru[PRUSS_NUM_PRUS];
+};
+
+/* data for each emac port */
+struct prueth_emac {
+	struct prueth *prueth;
+	struct net_device *ndev;
+	struct sk_buff *tx_ev_msg[PTP_PDLY_RSP_MSG_ID + 1]; /* tx ev needs ts */
+	u8 mac_addr[6];
+	u32 msg_enable;
+
+	int link;
+	int speed;
+	int duplex;
+
+	const char *phy_id;
+	struct device_node *phy_node;
+	int phy_if;
+	struct phy_device *phydev;
+
+	enum prueth_port port_id;
+	/* emac mode irqs */
+	int rx_irq;
+	int tx_irq;
+
+	struct prueth_queue_desc __iomem *rx_queue_descs;
+	struct prueth_queue_desc __iomem *tx_queue_descs;
+	struct prueth_queue_desc __iomem *tx_colq_descs;
+
+	unsigned int prp_emac_mode;
+	struct port_statistics stats; /* stats holder when i/f is down */
+	u32 tx_collisions;
+	u32 tx_collision_drops;
+	u32 rx_overflows;
+	u32 tx_packet_counts[NUM_QUEUES];
+	u32 rx_packet_counts[NUM_RX_QUEUES];
+
+	spinlock_t lock;	/* serialize access */
+#ifdef	CONFIG_DEBUG_FS
+	struct dentry *root_dir;
+	struct dentry *stats_file;
+	struct dentry *prp_emac_mode_file;
+#endif
+	int ptp_tx_enable;
+	int ptp_rx_enable;
+	int ptp_tx_irq;
+};
+
+struct prueth_mmap_port_cfg_basis {
+	u16 queue_size[NUM_QUEUES];
+	u16 queue1_bd_offset;
+	u16 queue1_buff_offset;
+	u16 queue1_desc_offset;
+	u16 col_queue_size;
+	u16 col_bd_offset;
+	u16 col_buff_offset;
+	u16 col_queue_desc_offset;
+};
+
+struct prueth_mmap_sram_emac {
+	u16 icss_emac_firmware_release_1_offset;  /* = eof_48k_buffer_bd */
+	u16 icss_emac_firmware_release_2_offset;  /* +4 */
+
+	u16 host_q1_rx_context_offset;            /* +4 */
+	u16 host_q2_rx_context_offset;            /* +8 */
+	u16 host_q3_rx_context_offset;            /* +8 */
+	u16 host_q4_rx_context_offset;            /* +8 */
+
+	u16 host_queue_descriptor_offset_addr;    /* +8 */
+	u16 host_queue_offset_addr;               /* +8 */
+	u16 host_queue_size_addr;                 /* +8 */
+	u16 host_queue_desc_offset;               /* +16 */
+};
+
+struct prueth_mmap_sram_sw {
+	u16 col_bd_offset[PRUETH_PORT_MAX];
+};
+
+struct prueth_mmap_sram_cfg {
+	/* P0_Q1_BD_OFFSET = SRAM_START_OFFSET */
+	u16 bd_offset[PRUETH_PORT_MAX][NUM_QUEUES];
+
+	u16 end_of_bd_pool;
+	u16 port_bd_size;
+	u16 host_bd_size;
+	u16 eof_48k_buffer_bd;
+
+	union {
+		struct prueth_mmap_sram_sw   mmap_sram_sw;
+		struct prueth_mmap_sram_emac mmap_sram_emac;
+	};
+};
+
+struct prueth_mmap_ocmc_cfg {
+	u16 buffer_offset[PRUETH_PORT_MAX][NUM_QUEUES];
+};
+
+/**
+ * struct prueth - PRUeth structure
+ * @dev: device
+ * @pruss: pruss handle
+ * @pru0: rproc instance to PRU0
+ * @pru1: rproc instance to PRU1
+ * @mem: PRUSS memory resources we need to access
+ * @sram_pool: OCMC ram pool for buffers
+ *
+ * @eth_node: node for each emac node
+ * @emac: emac data for three ports, one host and two physical
+ * @registered_netdevs: net device for each registered emac
+ * @fw_data: firmware names to be used with PRU remoteprocs
+ * @pruss_id: PRUSS instance id
+ */
+struct prueth {
+	struct device *dev;
+	struct pruss *pruss;
+	struct rproc *pru0, *pru1;
+	struct pruss_mem_region mem[PRUETH_MEM_MAX];
+	struct gen_pool *sram_pool;
+
+	struct device_node *eth_node[PRUETH_PORT_MAX];
+	struct device_node *prueth_np;
+	struct prueth_emac *emac[PRUETH_PORT_MAX];
+	struct net_device *registered_netdevs[PRUETH_PORT_MAX];
+	const struct prueth_private_data *fw_data;
+	int pruss_id;
+	size_t ocmc_ram_size;
+	unsigned int eth_type;
+	unsigned int hsr_mode;
+	unsigned int emac_configured;
+	unsigned int tbl_check_period;
+	unsigned int node_table_clear;
+	unsigned int tbl_check_mask;
+	struct hrtimer tbl_check_timer;
+	struct prueth_mmap_port_cfg_basis mmap_port_cfg_basis[PRUETH_PORT_MAX];
+	struct prueth_mmap_sram_cfg mmap_sram_cfg;
+	struct prueth_mmap_ocmc_cfg mmap_ocmc_cfg;
+	struct lre_statistics lre_stats;
+	struct iep *iep;
+	/* To provide a synchronization point to wait before proceed to port
+	 * specific initialization or configuration. This is needed when
+	 * concurrent device open happens.
+	 */
+	struct mutex mlock;
+#ifdef	CONFIG_DEBUG_FS
+	struct dentry *root_dir;
+	struct dentry *node_tbl_file;
+	struct dentry *nt_clear_file;
+	struct dentry *hsr_mode_file;
+	struct dentry *dlrmt_file;
+	struct dentry *dd_file;
+	struct dentry *tr_file;
+	struct dentry *error_stats_file;
+#endif
+};
+
 #endif /* __NET_TI_PRUETH_H */
-- 
1.9.1

