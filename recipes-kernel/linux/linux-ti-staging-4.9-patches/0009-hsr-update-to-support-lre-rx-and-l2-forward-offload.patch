From eaf1b4e5b5bf88bac402821b37c0006d3bd7ae07 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Mon, 13 Feb 2017 16:00:06 -0500
Subject: [PATCH 09/43] hsr: update to support lre rx and l2 forward offload

hsr LRE functionality as well L2 forwarding is expected to be offloaded
to hardware (h/w) or firmware (f/w). When the LRE Ingress function is
offloaded, the LRE function of duplicating and tagging in egress direction
is still handled in the hsr driver.  At the ingress, the supervisor
frames are processed at h/w or f/w and is responsible for maintaining the
node table for remote nodes and statistics. h/w or f/w is also expected to
drop duplicate of the received frames to host and forward only one copy to
slave A or Slave B depending on which interface frame came first. Non Host
and broadcast/multicast frames gets forwarded through hsr L2 forwarder
code if NETIF_F_HW_L2FW_DOFFLOAD is not supported. If supported, then no
forwarding happens in the hsr L2 forwarder and the same is assumed to be
handled at h/w or f/w.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
---
 net/hsr/hsr_device.c  | 29 ++++++++++++++++++--
 net/hsr/hsr_forward.c | 76 +++++++++++++++++++++++++++++++++++++++------------
 net/hsr/hsr_main.h    |  2 ++
 3 files changed, 87 insertions(+), 20 deletions(-)

diff --git a/net/hsr/hsr_device.c b/net/hsr/hsr_device.c
index dee1b8e..517c699 100644
--- a/net/hsr/hsr_device.c
+++ b/net/hsr/hsr_device.c
@@ -465,7 +465,9 @@ int hsr_dev_finalize(struct net_device *hsr_dev, struct net_device *slave[2],
 
 	setup_timer(&hsr->announce_timer, hsr_announce, (unsigned long)hsr);
 
-	setup_timer(&hsr->prune_timer, hsr_prune_nodes, (unsigned long)hsr);
+	if (!hsr->rx_offloaded)
+		setup_timer(&hsr->prune_timer, hsr_prune_nodes,
+			    (unsigned long)hsr);
 
 	ether_addr_copy(hsr->sup_multicast_addr, def_multicast_addr);
 	hsr->sup_multicast_addr[ETH_ALEN - 1] = multicast_spec;
@@ -489,6 +491,16 @@ int hsr_dev_finalize(struct net_device *hsr_dev, struct net_device *slave[2],
 	if (res)
 		return res;
 
+	/* HSR LRE Rx offload supported in lower device? */
+	if ((slave[0]->features & NETIF_F_HW_HSR_RX_OFFLOAD) &&
+	    (slave[1]->features & NETIF_F_HW_HSR_RX_OFFLOAD))
+		hsr->rx_offloaded = true;
+
+	/* HSR LRE L2 forward offload supported in lower device? */
+	if ((slave[0]->features & NETIF_F_HW_L2FW_DOFFLOAD) &&
+	    (slave[1]->features & NETIF_F_HW_L2FW_DOFFLOAD))
+		hsr->l2_fwd_offloaded = true;
+
 	res = register_netdevice(hsr_dev);
 	if (res)
 		goto fail;
@@ -500,7 +512,20 @@ int hsr_dev_finalize(struct net_device *hsr_dev, struct net_device *slave[2],
 	if (res)
 		goto fail;
 
-	mod_timer(&hsr->prune_timer, jiffies + msecs_to_jiffies(PRUNE_PERIOD));
+	/* For LRE rx offload, pruning is expected to happen
+	 * at the hardware or firmware . So don't do this in software
+	 */
+	if (!hsr->rx_offloaded)
+		mod_timer(&hsr->prune_timer,
+			  jiffies + msecs_to_jiffies(PRUNE_PERIOD));
+	/* for offloaded case, expect both slaves have the
+	 * same MAC address configured. If not fail.
+	 */
+	if (hsr->rx_offloaded &&
+	    !ether_addr_equal(slave[0]->dev_addr,
+			      slave[1]->dev_addr))
+		goto fail;
+
 	res = hsr_prp_debugfs_init(hsr);
 	if (res)
 		goto fail;
diff --git a/net/hsr/hsr_forward.c b/net/hsr/hsr_forward.c
index 4ebe2aa..2102df9 100644
--- a/net/hsr/hsr_forward.c
+++ b/net/hsr/hsr_forward.c
@@ -203,14 +203,21 @@ static struct sk_buff *frame_get_tagged_skb(struct hsr_frame_info *frame,
 }
 
 
-static void hsr_deliver_master(struct sk_buff *skb, struct net_device *dev,
-			       struct hsr_node *node_src)
+static void hsr_deliver_master(struct sk_buff *skb, struct hsr_node *node_src,
+			       struct hsr_port *port)
 {
+	struct net_device *dev = port->dev;
 	bool was_multicast_frame;
 	int res;
 
 	was_multicast_frame = (skb->pkt_type == PACKET_MULTICAST);
-	hsr_addr_subst_source(node_src, skb);
+	/* For LRE offloaded case, assume same MAC address is on both
+	 * interfaces of the remote node and hence no need to substitute
+	 * the source MAC address.
+	 */
+	if (!port->hsr->rx_offloaded)
+		hsr_addr_subst_source(node_src, skb);
+
 	skb_pull(skb, ETH_HLEN);
 	res = netif_rx(skb);
 	if (res == NET_RX_DROP) {
@@ -226,7 +233,8 @@ static void hsr_deliver_master(struct sk_buff *skb, struct net_device *dev,
 static int hsr_xmit(struct sk_buff *skb, struct hsr_port *port,
 		    struct hsr_frame_info *frame)
 {
-	if (frame->port_rcv->type == HSR_PT_MASTER) {
+	if (!port->hsr->rx_offloaded &&
+	    frame->port_rcv->type == HSR_PT_MASTER) {
 		hsr_addr_subst_dest(frame->node_src, skb, port);
 
 		/* Address substitution (IEC62439-3 pp 26, 50): replace mac
@@ -237,7 +245,6 @@ static int hsr_xmit(struct sk_buff *skb, struct hsr_port *port,
 	return dev_queue_xmit(skb);
 }
 
-
 /* Forward the frame through all devices except:
  * - Back through the receiving device
  * - If it's a HSR frame: through a device where it has passed before
@@ -267,36 +274,54 @@ static void hsr_forward_do(struct hsr_frame_info *frame)
 		if ((port->type != HSR_PT_MASTER) && frame->is_local_exclusive)
 			continue;
 
-		/* Don't send frame over port where it has been sent before */
-		if (hsr_register_frame_out(port, frame->node_src,
+		/* Don't send frame over port where it has been sent before
+		 * if not rx offloaded
+		 */
+		if (!port->hsr->rx_offloaded &&
+		    hsr_register_frame_out(port, frame->node_src,
 					   frame->sequence_nr))
 			continue;
 
-		if (frame->is_supervision && (port->type == HSR_PT_MASTER)) {
+		/* In LRE offloaded case, don't expect supervision frames from
+		 * slave ports for host as they get processed at the h/w or
+		 * firmware
+		 */
+		if (frame->is_supervision &&
+		    (port->type == HSR_PT_MASTER) &&
+		    (!port->hsr->rx_offloaded)) {
 			hsr_handle_sup_frame(frame->skb_hsr,
 					     frame->node_src,
 					     frame->port_rcv);
 			continue;
 		}
 
+		/* if L2 forward is offloaded, don't forward frame
+		 * across slaves
+		 */
+		if (port->hsr->l2_fwd_offloaded &&
+		    (((frame->port_rcv->type == HSR_PT_SLAVE_A) &&
+		    (port->type ==  HSR_PT_SLAVE_B)) ||
+		    ((frame->port_rcv->type == HSR_PT_SLAVE_B) &&
+		    (port->type ==  HSR_PT_SLAVE_A))))
+			continue;
+
 		if (port->type != HSR_PT_MASTER)
 			skb = frame_get_tagged_skb(frame, port);
 		else
 			skb = frame_get_stripped_skb(frame, port);
-		if (skb == NULL) {
+		if (!skb) {
 			/* FIXME: Record the dropped frame? */
 			continue;
 		}
 
 		skb->dev = port->dev;
 		if (port->type == HSR_PT_MASTER)
-			hsr_deliver_master(skb, port->dev, frame->node_src);
+			hsr_deliver_master(skb, frame->node_src, port);
 		else
 			hsr_xmit(skb, port, frame);
 	}
 }
 
-
 static void check_local_dest(struct hsr_priv *hsr, struct sk_buff *skb,
 			     struct hsr_frame_info *frame)
 {
@@ -315,19 +340,31 @@ static void check_local_dest(struct hsr_priv *hsr, struct sk_buff *skb,
 		frame->is_local_dest = false;
 	}
 }
-
-
 static int hsr_fill_frame_info(struct hsr_frame_info *frame,
 			       struct sk_buff *skb, struct hsr_port *port)
 {
 	struct ethhdr *ethhdr;
 	unsigned long irqflags;
+	struct hsr_priv *priv = port->hsr;
 
 	frame->is_supervision = is_supervision_frame(port->hsr, skb);
-	frame->node_src = hsr_get_node(&port->hsr->node_db, skb,
-				       frame->is_supervision);
-	if (frame->node_src == NULL)
-		return -1; /* Unknown node and !is_supervision, or no mem */
+	if (frame->is_supervision && priv->rx_offloaded &&
+	    (port->type != HSR_PT_MASTER)) {
+		WARN_ONCE(1,
+			  "HSR: unexpected rx supervisor frame when offloaded");
+		return -1;
+	}
+
+	/* For Offloaded case, there is no need for node list since
+	 * firmware/hardware implements LRE function.
+	 */
+	if (!priv->rx_offloaded) {
+		frame->node_src = hsr_get_node(&port->hsr->node_db, skb,
+					       frame->is_supervision);
+		/* Unknown node and !is_supervision, or no mem */
+		if (!frame->node_src)
+			return -1;
+	}
 
 	ethhdr = (struct ethhdr *) skb_mac_header(skb);
 	frame->is_vlan = false;
@@ -370,7 +407,10 @@ void hsr_forward_skb(struct sk_buff *skb, struct hsr_port *port)
 
 	if (hsr_fill_frame_info(&frame, skb, port) < 0)
 		goto out_drop;
-	hsr_register_frame_in(frame.node_src, port, frame.sequence_nr);
+	/* No need to register frame when rx offload is supported */
+	if (!port->hsr->rx_offloaded)
+		hsr_register_frame_in(frame.node_src, port, frame.sequence_nr);
+
 	hsr_forward_do(&frame);
 
 	if (frame.skb_hsr != NULL)
diff --git a/net/hsr/hsr_main.h b/net/hsr/hsr_main.h
index 7e8f0a0..a12e71f 100644
--- a/net/hsr/hsr_main.h
+++ b/net/hsr/hsr_main.h
@@ -169,6 +169,8 @@ struct hsr_priv {
 	struct list_head	self_node_db;	/* MACs of slaves */
 	struct timer_list	announce_timer;	/* Supervision frame dispatch */
 	struct timer_list	prune_timer;
+	bool			rx_offloaded;	/* lre handle in hw */
+	bool			l2_fwd_offloaded; /* L2 forward in hw */
 	int announce_count;
 	u16 sequence_nr;
 	u16 sup_sequence_nr;			/* For HSRv1 separate seq_nr for supervision */
-- 
1.9.1

