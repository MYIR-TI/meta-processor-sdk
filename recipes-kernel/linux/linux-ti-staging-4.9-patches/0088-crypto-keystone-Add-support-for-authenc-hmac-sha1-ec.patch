From fc6a3c91cfbd6f3b23cefc6cb10be1b6a0b1ca0b Mon Sep 17 00:00:00 2001
From: Vitaly Andrianov <vitalya@ti.com>
Date: Tue, 26 Sep 2017 09:39:20 -0400
Subject: [PATCH 88/92] crypto: keystone: Add support for authenc -
 hmac(sha1),ecb(cipher_null) algorithms

This patch adds support for following algorithm implementations in the
kernel crypto framework:
 -  authenc(hmac(sha1),ecb(cipher_null))

Signed-off-by: Tinku Mannan <tmannan@ti.com>
Signed-off-by: Brian Wheeler <brian.wheeler@nokia.com>
Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
---
 drivers/crypto/keystone-sa-hlp.h   |  6 ++++++
 drivers/crypto/keystone-sa-lld.c   |  3 +++
 drivers/crypto/keystone-sa-utils.c | 29 ++++++++++++++++++++++++++++-
 3 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/drivers/crypto/keystone-sa-hlp.h b/drivers/crypto/keystone-sa-hlp.h
index 0e1d844..4a44abf 100644
--- a/drivers/crypto/keystone-sa-hlp.h
+++ b/drivers/crypto/keystone-sa-hlp.h
@@ -28,6 +28,12 @@
 
 #define AES_XCBC_DIGEST_SIZE	16
 
+/* Values for NULL algorithms */
+#define NULL_KEY_SIZE			0
+#define NULL_BLOCK_SIZE			1
+#define NULL_DIGEST_SIZE		0
+#define NULL_IV_SIZE			0
+
 /* Number of 32 bit words in EPIB  */
 #define SA_DMA_NUM_EPIB_WORDS	4
 
diff --git a/drivers/crypto/keystone-sa-lld.c b/drivers/crypto/keystone-sa-lld.c
index 9defb69..ff06e3b 100644
--- a/drivers/crypto/keystone-sa-lld.c
+++ b/drivers/crypto/keystone-sa-lld.c
@@ -59,6 +59,9 @@ void sa_conv_calg_to_salg(const char *cra_name, int *ealg_id, int *aalg_id)
 	if (!strcmp(cra_name, "authenc(hmac(sha1),cbc(aes))")) {
 		*ealg_id = SA_EALG_ID_AES_CBC;
 		*aalg_id = SA_AALG_ID_HMAC_SHA1;
+	} else if (!strcmp(cra_name, "authenc(hmac(sha1),ecb(cipher_null))")) {
+		*ealg_id = SA_EALG_ID_NULL;
+		*aalg_id = SA_AALG_ID_HMAC_SHA1;
 	} else if (!strcmp(cra_name, "authenc(hmac(sha1),cbc(des3_ede))")) {
 		*ealg_id = SA_EALG_ID_3DES_CBC;
 		*aalg_id = SA_AALG_ID_HMAC_SHA1;
diff --git a/drivers/crypto/keystone-sa-utils.c b/drivers/crypto/keystone-sa-utils.c
index 303a0ac..c330792 100644
--- a/drivers/crypto/keystone-sa-utils.c
+++ b/drivers/crypto/keystone-sa-utils.c
@@ -530,7 +530,10 @@ int sa_init_sc(struct sa_ctx_info *ctx, const u8 *enc_key,
 	sa_swiz_128(sc_buf, sc_buf, SA_CTX_MAX_SZ);
 
 	/* Setup SWINFO */
-	first_engine = enc ? enc_eng->eng_id : auth_eng->eng_id;
+	if (ealg_id == SA_EALG_ID_NULL)
+		first_engine = auth_eng->eng_id;
+	else
+		first_engine = enc ? enc_eng->eng_id : auth_eng->eng_id;
 
 	/* TODO: take care of AEAD algorithms */
 	hash_size = sa_get_hash_size(aalg_id);
@@ -1406,6 +1409,30 @@ static int sa_aead_decrypt(struct aead_request *req)
 			.decrypt = sa_aead_decrypt,
 		}
 	},
+	{	.type = CRYPTO_ALG_TYPE_AEAD,
+		.alg.aead = {
+			.base = {
+				.cra_name = "authenc(hmac(sha1),ecb(cipher_null))",
+				.cra_driver_name =
+					"authenc-hmac-sha1-cipher_null-keystone-sa",
+				.cra_blocksize = NULL_BLOCK_SIZE,
+				.cra_flags = CRYPTO_ALG_TYPE_AEAD |
+					CRYPTO_ALG_KERN_DRIVER_ONLY |
+					CRYPTO_ALG_ASYNC,
+				.cra_ctxsize = sizeof(struct sa_tfm_ctx),
+				.cra_module = THIS_MODULE,
+				.cra_alignmask = 0,
+				.cra_priority = 3000,
+			},
+			.ivsize = NULL_IV_SIZE,
+			.maxauthsize = SHA1_DIGEST_SIZE,
+			.init = sa_cra_init_aead,
+			.exit = sa_exit_tfm_aead,
+			.setkey	= sa_aead_setkey,
+			.encrypt = sa_aead_encrypt,
+			.decrypt = sa_aead_decrypt,
+		}
+	},
 };
 
 /* Register the algorithms in crypto framework */
-- 
1.9.1

