From 66578b9e662d5c825fa011c3e6142e9b698ebea7 Mon Sep 17 00:00:00 2001
From: Suman Anna <s-anna@ti.com>
Date: Fri, 2 Jun 2017 11:04:44 -0500
Subject: [PATCH 08/16] remoteproc: add a rproc_set_firmware() API

A new API, rproc_set_firmware() is added to allow the remoteproc client
drivers to be able to configure a custom firmware name that is different
from the default name registered by a remoteproc platform driver. This
function is being introduced to provide a kernel-level equivalent of
the current sysfs interface, so as to allow these kernel-drivers to
choose different firmwares based on their functional feature it is
implementing using the remote processor.

Signed-off-by: Suman Anna <s-anna@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
---
 drivers/remoteproc/remoteproc_core.c | 60 ++++++++++++++++++++++++++++++++++++
 include/linux/remoteproc.h           |  2 ++
 2 files changed, 62 insertions(+)

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index e798edd..4e8978d 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -1861,6 +1861,66 @@ void rproc_report_crash(struct rproc *rproc, enum rproc_crash_type type)
 }
 EXPORT_SYMBOL(rproc_report_crash);
 
+/**
+ * rproc_set_firmware() - assign a new firmware
+ * @rproc: rproc handle to which the new firmware is being assigned
+ * @fw_name: new firmware name to be assigned
+ *
+ * This function allows remoteproc clients to configure a custom firmware
+ * name that is different from the name registered by the remoteproc driver.
+ * The function does not trigger a remote processor boot, only sets the
+ * firmware name used for a subsequent boot. This function should also be
+ * called only when the remote processor is offline.
+ *
+ * This allows either the userspace to configure a different name through
+ * sysfs or a kernel-level non-remoteproc driver to set a specific firmware
+ * when it is controlling the boot and shutdown of the remote processor.
+ *
+ * Returns 0 on success or a negative value upon failure
+ */
+int rproc_set_firmware(struct rproc *rproc, const char *fw_name)
+{
+	struct device *dev = rproc->dev.parent;
+	int ret, len;
+	char *p;
+
+	if (!rproc || !fw_name)
+		return -EINVAL;
+
+	ret = mutex_lock_interruptible(&rproc->lock);
+	if (ret) {
+		dev_err(dev, "can't lock rproc %s: %d\n", rproc->name, ret);
+		return -EINVAL;
+	}
+
+	if (rproc->state != RPROC_OFFLINE) {
+		dev_err(dev, "can't change firmware while running\n");
+		ret = -EBUSY;
+		goto out;
+	}
+
+	len = strcspn(fw_name, "\n");
+	if (!len) {
+		dev_err(dev, "can't provide a NULL firmware\n");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	p = kstrndup(fw_name, len, GFP_KERNEL);
+	if (!p) {
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	kfree(rproc->firmware);
+	rproc->firmware = p;
+
+out:
+	mutex_unlock(&rproc->lock);
+	return ret;
+}
+EXPORT_SYMBOL(rproc_set_firmware);
+
 static int __init remoteproc_init(void)
 {
 	rproc_init_sysfs();
diff --git a/include/linux/remoteproc.h b/include/linux/remoteproc.h
index 86a745c..f5b8609 100644
--- a/include/linux/remoteproc.h
+++ b/include/linux/remoteproc.h
@@ -585,4 +585,6 @@ void rproc_add_subdev(struct rproc *rproc,
 
 void rproc_remove_subdev(struct rproc *rproc, struct rproc_subdev *subdev);
 
+int rproc_set_firmware(struct rproc *rproc, const char *fw_name);
+
 #endif /* REMOTEPROC_H */
-- 
1.9.1

