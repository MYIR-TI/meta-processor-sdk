From 06f995acd21a63cacecf8bda1b0642c2bc49634f Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Fri, 4 Aug 2017 16:23:38 -0400
Subject: [PATCH 48/86] hsr/prp: do sanity check for offload before creating
 the interface

Add more sanity check before creating the offloaded hsr/prp interface.
For example, if the underlying device offload hsr, then prp setup
must be blocked. Also both slaves must have the same offload flag
to create the offloaded interface.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 net/hsr-prp/hsr_prp_device.c | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/net/hsr-prp/hsr_prp_device.c b/net/hsr-prp/hsr_prp_device.c
index cb58a7a..184dce8 100644
--- a/net/hsr-prp/hsr_prp_device.c
+++ b/net/hsr-prp/hsr_prp_device.c
@@ -477,6 +477,8 @@ int hsr_prp_dev_finalize(struct net_device *hsr_prp_dev,
 			 struct net_device *slave[2],
 			 unsigned char multicast_spec, u8 protocol_version)
 {
+	netdev_features_t mask =
+		NETIF_F_HW_PRP_RX_OFFLOAD | NETIF_F_HW_HSR_RX_OFFLOAD;
 	struct hsr_prp_priv *priv;
 	struct hsr_prp_port *port;
 	int res;
@@ -539,6 +541,20 @@ int hsr_prp_dev_finalize(struct net_device *hsr_prp_dev,
 	if (res)
 		return res;
 
+	if (priv->prot_version == PRP_V1) {
+		if ((slave[0]->features & NETIF_F_HW_HSR_RX_OFFLOAD) ||
+		    (slave[1]->features & NETIF_F_HW_HSR_RX_OFFLOAD)) {
+			res = -EINVAL;
+			goto fail;
+		}
+	} else {
+		if ((slave[0]->features & NETIF_F_HW_PRP_RX_OFFLOAD) ||
+		    (slave[1]->features & NETIF_F_HW_PRP_RX_OFFLOAD)) {
+			res = -EINVAL;
+			goto fail;
+		}
+	}
+
 	/* HSR/PRP LRE Rx offload supported in lower device? */
 	if (((slave[0]->features & NETIF_F_HW_HSR_RX_OFFLOAD) &&
 	     (slave[1]->features & NETIF_F_HW_HSR_RX_OFFLOAD)) ||
@@ -546,6 +562,12 @@ int hsr_prp_dev_finalize(struct net_device *hsr_prp_dev,
 	     (slave[1]->features & NETIF_F_HW_PRP_RX_OFFLOAD)))
 		priv->rx_offloaded = true;
 
+	/* Make sure offload flags match in the slave devices */
+	if ((slave[0]->features & mask) ^ (slave[1]->features & mask)) {
+		res = -EINVAL;
+		goto fail;
+	}
+
 	/* HSR LRE L2 forward offload supported in lower device for hsr? */
 	if ((priv->prot_version < PRP_V1) &&
 	    ((slave[0]->features & NETIF_F_HW_L2FW_DOFFLOAD) &&
-- 
1.9.1

