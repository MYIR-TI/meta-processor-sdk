From f2ccb96fed8850363ddaeabf832c34ce4fee8710 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Fri, 8 Sep 2017 13:45:40 -0400
Subject: [PATCH 62/82] net: prueth: fix incorrect reporting of packet drop at
 egress for emac

When the xmit function runs out of buffer, the right procedure is
to stop the queue and return NETDEV_TX_BUSY so that the driver can
resume transmission when buffer becomes available. Thus fix this
by calling netif_stop_queue() when this condition occurs and return
correct error code to caller. Currently switch firmware doesn't
support tx interrupt. So do this conditionally for emac for now.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 drivers/net/ethernet/ti/prueth.c | 21 ++++++++++++++++++---
 1 file changed, 18 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/ti/prueth.c b/drivers/net/ethernet/ti/prueth.c
index 1c870cf..4c85d50 100644
--- a/drivers/net/ethernet/ti/prueth.c
+++ b/drivers/net/ethernet/ti/prueth.c
@@ -3307,6 +3307,7 @@ static u16 prueth_get_tx_queue_id(struct prueth *prueth, struct sk_buff *skb)
 static int emac_ndo_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 {
 	struct prueth_emac *emac = netdev_priv(ndev);
+	struct prueth *prueth = emac->prueth;
 	int ret = 0;
 	u16 qid;
 
@@ -3332,9 +3333,22 @@ static int emac_ndo_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 
 	if (ret) {
 		if (ret != -ENOBUFS && ret != -EBUSY &&
-		    netif_msg_tx_err(emac) && net_ratelimit())
+		    netif_msg_tx_err(emac) && net_ratelimit()) {
 			netdev_err(ndev, "packet queue failed: %d\n", ret);
-		goto fail_tx;
+			goto fail_tx;
+		} else {
+			/* out of buffer or collision. stop queue and
+			 * return NETDEV_TX_BUSY. Core will re-send the
+			 * packet when queue is woke up by tx interrupt.
+			 * Right now we don't have tx interrupt generated
+			 * for switch firmware. So return NETDEV_TX_BUSY
+			 * for now and change it later once support is
+			 * available .
+			 */
+			if (!PRUETH_HAS_SWITCH(prueth))
+				netif_stop_queue(ndev);
+			return NETDEV_TX_BUSY;
+		}
 	}
 
 	ndev->stats.tx_packets++;
@@ -3346,7 +3360,8 @@ static int emac_ndo_start_xmit(struct sk_buff *skb, struct net_device *ndev)
 fail_tx:
 	/* error */
 	ndev->stats.tx_dropped++;
-	return NETDEV_TX_BUSY;
+	dev_kfree_skb_any(skb);
+	return NETDEV_TX_OK;
 }
 
 /**
-- 
1.9.1

