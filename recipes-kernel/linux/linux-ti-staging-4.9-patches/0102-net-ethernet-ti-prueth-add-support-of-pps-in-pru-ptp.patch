From 7ad8d3774d943c022a123967860cea4b72e1771e Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Tue, 14 Nov 2017 17:51:01 -0500
Subject: [PATCH 102/102] net: ethernet: ti: prueth: add support of pps in pru
 ptp ordinary clock

This patch adds support of PPS in ICSS-PRU PTP ordinary clock.

To enable PPS after PRU-ICSS ordinary clock is started, issue the
command from linux prompt:

    $ echo 1 > /sys/devices/platform/pruss2_eth/ptp/ptp1/pps_enable

To read PTP clock timestamps at which PPS is generated, issue the
command:

    $ cat /sys/class/pps/pps0/assert

To disable PPS:

    $ echo 0 > /sys/devices/platform/pruss2_eth/ptp/ptp1/pps_enable

To observe PPS on AM572x IDK, a 0-ohm resistor needs to be populated
at R908 on the IDK. See schematic
http://www.ti.com/lit/df/tidrlh4/tidrlh4.pdf.

The PPS can then be probed at pin-17 of the Expansion Connector J21.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
---
 drivers/net/ethernet/ti/iep.c | 359 ++++++++++++++++++++++++++++++++++++------
 drivers/net/ethernet/ti/iep.h |  36 ++++-
 2 files changed, 340 insertions(+), 55 deletions(-)

diff --git a/drivers/net/ethernet/ti/iep.c b/drivers/net/ethernet/ti/iep.c
index 24918c4..6e57754 100644
--- a/drivers/net/ethernet/ti/iep.c
+++ b/drivers/net/ethernet/ti/iep.c
@@ -15,14 +15,6 @@
 #include "icss_time_sync.h"
 #include "iep.h"
 
-/* 25% duty cycle */
-#define PULSE_SYNC_WIDTH    (PULSE_SYNC_INTERVAL / PTP_SYNC0_PERIOD_DIVIDER)
-/* 1ms pulse sync interval */
-#define PULSE_SYNC_INTERVAL          1000000
-#define TIMESYNC_SECONDS_COUNT_SIZE  6
-#define PTP_TWO_STEP_ENABLE          1
-#define TIMESYNC_ENABLE              1
-
 static inline u32 iep_read_reg(struct iep *iep, unsigned int reg)
 {
 	return readl_relaxed(iep->iep_reg + reg);
@@ -44,23 +36,55 @@ void iep_set_reg(struct iep *iep, unsigned int reg, u32 mask, u32 set)
 	iep_write_reg(iep, reg, val);
 }
 
+static inline u64 iep_get_cmp(struct iep *iep)
+{
+	u64 v;
+
+	memcpy_fromio(&v, iep->iep_reg + PRUSS_IEP_CMP1_REG0, sizeof(v));
+	return v;
+}
+
+static inline void iep_set_cmp(struct iep *iep, u64 v)
+{
+	memcpy_toio(iep->iep_reg + PRUSS_IEP_CMP1_REG0, &v, sizeof(v));
+}
+
+static inline cycle_t iep_get_count(struct iep *iep)
+{
+	u64 v;
+
+	memcpy_fromio(&v, iep->iep_reg + PRUSS_IEP_COUNT_REG0, 8);
+	return v;
+}
+
 static cycle_t iep_cc_read(const struct cyclecounter *cc)
 {
 	struct iep *iep = container_of(cc, struct iep, cc);
-	u64 val = 0;
 
-	memcpy_fromio(&val, iep->iep_reg + PRUSS_IEP_COUNT_REG0, 8);
+	return iep_get_count(iep);
+}
+
+/* Implementation is good for 1 sec or less */
+static u64 iep_ns2cyc(struct iep *iep, u64 nsec)
+{
+	u64 dividend, cycles;
+
+	WARN_ON(nsec > 1000000000ULL);
 
-	return val;
+	dividend = nsec << iep->cc.shift;
+	cycles = div_u64(dividend, iep->cc.mult);
+	return cycles;
 }
 
 static int iep_adjfreq(struct ptp_clock_info *ptp, s32 ppb)
 {
 	struct iep *iep = container_of(ptp, struct iep, info);
 	u64 adj;
-	u32 diff, mult;
+	u32 diff, mult, v;
 	int neg_adj = 0;
 	unsigned long flags;
+	struct timespec64 ts;
+	u64 ns_to_sec, cyc_to_sec;
 
 	if (ppb < 0) {
 		neg_adj = 1;
@@ -73,10 +97,31 @@ static int iep_adjfreq(struct ptp_clock_info *ptp, s32 ppb)
 
 	spin_lock_irqsave(&iep->ptp_lock, flags);
 
-	timecounter_read(&iep->tc);
+	ts = ns_to_timespec64(timecounter_read(&iep->tc));
 
 	iep->cc.mult = neg_adj ? mult - diff : mult + diff;
 
+	if (iep->pps_enable) {
+		ns_to_sec = NSEC_PER_SEC - ts.tv_nsec;
+		cyc_to_sec = iep_ns2cyc(iep, ns_to_sec);
+
+		/* +++TODO: fine tune the randomly fixed 10 ticks */
+		/* if it's too late to update CMP1, skip it */
+		if (cyc_to_sec >= 10) {
+			/* if the previous HIT is not reported yet,
+			 * skip update
+			 */
+			v = iep_read_reg(iep, PRUSS_IEP_CMP_STAT_REG);
+			if (!(v & IEP_CMP1_HIT)) {
+				iep->cmp1_last = iep->tc.cycle_last +
+						 cyc_to_sec;
+
+				/* update CMP reg */
+				iep_set_cmp(iep, iep->cmp1_last);
+			}
+		}
+	}
+
 	spin_unlock_irqrestore(&iep->ptp_lock, flags);
 
 	return 0;
@@ -124,39 +169,262 @@ static int iep_settime(struct ptp_clock_info *ptp, const struct timespec64 *ts)
 	return 0;
 }
 
+/* PPS */
+static inline void iep_pps_stop(struct iep *iep)
+{
+	u32 v;
+
+	/* disable sync0 */
+	iep_write_reg(iep, PRUSS_IEP_SYNC_CTRL_REG, 0);
+
+	/* clear sync0 status */
+	iep_write_reg(iep, PRUSS_IEP_SYNC0_STAT_REG, 0);
+
+	/* disable CMP1 */
+	v = iep_read_reg(iep, PRUSS_IEP_CMP_CFG_REG);
+	v &= ~IEP_CMP1_EN;
+	iep_write_reg(iep, PRUSS_IEP_CMP_CFG_REG, v);
+
+	/* clear CMP1 status */
+	iep_write_reg(iep, PRUSS_IEP_CMP_STAT_REG, IEP_CMP1_HIT);
+}
+
+static inline void iep_pps_start(struct iep *iep)
+{
+	u32 v;
+
+	/* enable CMP1 */
+	v = iep_read_reg(iep, PRUSS_IEP_CMP_CFG_REG);
+	v |= IEP_CMP1_EN;
+	iep_write_reg(iep, PRUSS_IEP_CMP_CFG_REG, v);
+
+	/* enable sync0 1-shot mode */
+	iep_write_reg(iep, PRUSS_IEP_SYNC_CTRL_REG, IEP_SYNC0_EN | IEP_SYNC_EN);
+}
+
+static int iep_pps_enable(struct iep *iep, int on)
+{
+	unsigned long flags;
+	struct timespec64 ts;
+	u64 cyc_to_sec, ns_to_sec, cyc_per_sec, cyc_last2;
+
+	on = (on ? 1 : 0);
+
+	if (iep->pps_enable == on)
+		return 0;
+
+	iep->pps_enable = on;
+
+	/* will stop after up coming pulse */
+	if (!on)
+		return 0;
+
+	/* get current time and counter value */
+	iep_gettime(&iep->info, &ts);
+
+	spin_lock_irqsave(&iep->ptp_lock, flags);
+
+	/* current iep ticks per sec */
+	cyc_per_sec = iep_ns2cyc(iep, NSEC_PER_SEC);
+
+	/* align cmp count to next sec boundary */
+	ns_to_sec = NSEC_PER_SEC - ts.tv_nsec;
+	cyc_to_sec = iep_ns2cyc(iep, ns_to_sec);
+	iep->cmp1_last = iep->tc.cycle_last + cyc_to_sec;
+
+	/* how many ticks has elapsed since last time */
+	cyc_last2 = (u64)iep_get_count(iep);
+
+	/* if it is too close to sec boundary, start 1 sec later */
+	/* +++TODO: tune this randomly fixed 10 ticks allowance */
+	if (iep->cmp1_last <= cyc_last2 + 10)
+		iep->cmp1_last = iep->cmp1_last + cyc_per_sec;
+
+	iep_set_cmp(iep, iep->cmp1_last);
+	iep_pps_start(iep);
+
+	spin_unlock_irqrestore(&iep->ptp_lock, flags);
+	return 0;
+}
+
+static int iep_pps_init(struct iep *iep)
+{
+	u32 v;
+
+	iep_pps_stop(iep);
+
+	/* Following are one time configurations */
+
+	/* config pulse width to 10 ms, ie 2000000 cycles */
+	iep_write_reg(iep, PRUSS_IEP_SYNC_PWIDTH_REG, IEP_DEFAULT_PPS_WIDTH);
+
+	/* set SYNC start to 0 */
+	iep_write_reg(iep, PRUSS_IEP_SYNC_START_REG, 0);
+
+	/* makes sure SYNC0 period is 0 */
+	iep_write_reg(iep, PRUSS_IEP_SYNC0_PERIOD_REG, 0);
+
+	/* +++TODO: pad config
+	 * mux CTRL_CORE_PAD_VOUT1_D7(0x4A00_35F8) (TRM p4727)
+	 *	VOUT1_D7_MUXMODE[0:3] = 0xA: pr2_edc_sync0_out
+	 *		Expansion Connector:17 (schematic p33)
+	 */
+	v = readl_relaxed(iep->pr2_sync0_mux);
+	v = (v & ~0xf) | 0xa;
+	writel_relaxed(v, iep->pr2_sync0_mux);
+
+	iep->pps_report_next_op = -1;
+	iep->pps_enable = -1;
+
+	return 0;
+}
+
 static int iep_enable(struct ptp_clock_info *ptp,
 		      struct ptp_clock_request *rq, int on)
 {
+	struct iep *iep = container_of(ptp, struct iep, info);
+
+	switch (rq->type) {
+	case PTP_CLK_REQ_PPS:
+		return iep_pps_enable(iep, on);
+	default:
+		break;
+	}
 	return -EOPNOTSUPP;
 }
 
+/* Returns whether a pps event is reported */
+static bool iep_pps_report(struct iep *iep)
+{
+	struct ptp_clock_event pevent;
+	u64 pps_cmp1, ns;
+	u32 v, reported = 0;
+
+	v = iep_read_reg(iep, PRUSS_IEP_CMP_STAT_REG);
+	if (v & IEP_CMP1_HIT) {
+		/* write 1 to clear CMP1 status */
+		iep_write_reg(iep, PRUSS_IEP_CMP_STAT_REG, v);
+
+		/* a pulse has occurred */
+		pps_cmp1 = iep_get_cmp(iep);
+		ns = timecounter_cyc2time(&iep->tc, pps_cmp1);
+		pevent.type = PTP_CLOCK_PPSUSR;
+		pevent.pps_times.ts_real = ns_to_timespec64(ns);
+		ptp_clock_event(iep->ptp_clock, &pevent);
+
+		++reported;
+
+		/* need to keep SYNC0_EN & SYNC_EN for the PWIDTH time for
+		 * otherwise ongoing pulse will be terminated. Remember
+		 * we need to do this in the next check. If the check
+		 * happens every 50ms, the latest to disable the sync0
+		 * is 100ms after it happened, ie. a check happens right
+		 * before the sync0, then is found out in the next
+		 * check and is disabled in the check after the next.
+		 */
+		iep->pps_ops[++iep->pps_report_next_op] = DISABLE_SYNC0;
+	}
+
+	return reported;
+}
+
+static inline void iep_do_pps_report_post_ops(struct iep *iep)
+{
+	int i;
+
+	for (i = 0; i <= iep->pps_report_next_op; i++) {
+		switch (iep->pps_ops[i]) {
+		case DISABLE_SYNC0:
+			/* disable sync0 */
+			iep_write_reg(iep, PRUSS_IEP_SYNC_CTRL_REG, 0);
+			/* clear sync0 status */
+			iep_write_reg(iep, PRUSS_IEP_SYNC0_STAT_REG, 0);
+			break;
+
+		case ENABLE_SYNC0:
+			/* enable sync0 1-shot mode */
+			iep_write_reg(iep, PRUSS_IEP_SYNC_CTRL_REG,
+				      IEP_SYNC0_EN | IEP_SYNC_EN);
+			break;
+		}
+	}
+
+	iep->pps_report_next_op = -1;
+}
+
+static long iep_overflow_check(struct ptp_clock_info *ptp)
+{
+	struct iep *iep = container_of(ptp, struct iep, info);
+	unsigned long delay = iep->ov_check_period;
+	struct timespec64 ts;
+	unsigned long flags;
+	bool reported = false;
+	u64 ns_to_sec, cyc_to_sec;
+
+	spin_lock_irqsave(&iep->ptp_lock, flags);
+	ts = ns_to_timespec64(timecounter_read(&iep->tc));
+
+	if (iep->pps_enable >= 0) {
+		if (!iep->pps_enable) {
+			iep_pps_stop(iep);
+			iep->pps_enable = -1;
+		} else {
+			if (iep->pps_report_next_op >= 0)
+				/* perform ops left behind in last
+				 *  overflow check
+				 */
+				iep_do_pps_report_post_ops(iep);
+
+			reported = iep_pps_report(iep);
+		}
+	}
+
+	if (!reported)
+		goto done;
+
+	/* load the next pulse */
+
+	/* Do we need to get the updated time and counter again?
+	 * Probably not. Just use the last one. ns to sec boundary
+	 * will be larger to compensate.
+	 */
+
+	/* Align cmp count to next sec boundary. If overflow check is
+	 * done every 50ms, the ns_to_sec  will be at least 950ms,
+	 * ie. a check just happened right before the sync and is found
+	 * out in the next check.
+	 */
+	ns_to_sec = NSEC_PER_SEC - ts.tv_nsec;
+	cyc_to_sec = iep_ns2cyc(iep, ns_to_sec);
+	iep->cmp1_last = iep->tc.cycle_last + cyc_to_sec;
+
+	iep_set_cmp(iep, iep->cmp1_last);
+
+	if (iep->pps_report_next_op >= 0)
+		iep->pps_ops[++iep->pps_report_next_op] = ENABLE_SYNC0;
+
+done:
+	spin_unlock_irqrestore(&iep->ptp_lock, flags);
+
+	pr_debug("iep overflow check at %lld.%09lu\n", ts.tv_sec, ts.tv_nsec);
+	return (long)delay;
+}
+
 static struct ptp_clock_info iep_info = {
 	.owner		= THIS_MODULE,
 	.name		= "PRUSS timer",
 	.max_adj	= 1000000,
 	.n_ext_ts	= 0,
 	.n_pins		= 0,
-	.pps		= 0,
+	.pps		= 1,
 	.adjfreq	= iep_adjfreq,
 	.adjtime	= iep_adjtime,
 	.gettime64	= iep_gettime,
 	.settime64	= iep_settime,
 	.enable		= iep_enable,
+	.do_aux_work	= iep_overflow_check,
 };
 
-static void iep_overflow_check(struct work_struct *work)
-{
-	struct iep *iep = container_of(work, struct iep, overflow_work.work);
-	struct timespec64 ts;
-	unsigned long flags;
-
-	spin_lock_irqsave(&iep->ptp_lock, flags);
-	ts = ns_to_timespec64(timecounter_read(&iep->tc));
-	spin_unlock_irqrestore(&iep->ptp_lock, flags);
-	pr_debug("iep overflow check at %lld.%09lu\n", ts.tv_sec, ts.tv_nsec);
-	schedule_delayed_work(&iep->overflow_work, iep->ov_check_period);
-}
-
 void iep_reset_timestamp(struct iep *iep, u16 ts_ofs)
 {
 	memset_io(iep->sram + ts_ofs, 0, sizeof(u64));
@@ -207,7 +475,6 @@ int iep_tx_timestamp(struct iep *iep, u16 ts_ofs, struct sk_buff *skb)
 	return 0;
 }
 
-/* +++TODO: why rtos use memcpy for writing 4B? */
 static int iep_dram_init(struct iep *iep)
 {
 	void __iomem *sram = iep->sram;
@@ -227,13 +494,13 @@ static int iep_dram_init(struct iep *iep)
 	/* Write Sync0 period for sync signal generation in PTP
 	 * memory in shared RAM
 	 */
-	writel(PULSE_SYNC_WIDTH, sram + TIMESYNC_SYNC0_WIDTH_OFFSET);
+	writel(IEP_DEFAULT_PPS_WIDTH, sram + TIMESYNC_SYNC0_WIDTH_OFFSET);
 
 	/* Write CMP1 period for sync signal generation in PTP
 	 * memory in shared RAM
 	 */
 	temp64 = PULSE_SYNC_INTERVAL;
-	memcpy_fromio(sram + TIMESYNC_CMP1_CMP_OFFSET, &temp64, sizeof(temp64));
+	memcpy_toio(sram + TIMESYNC_CMP1_CMP_OFFSET, &temp64, sizeof(temp64));
 
 	/* Write Sync0 period for sync signal generation in PTP
 	 * memory in shared RAM
@@ -244,7 +511,7 @@ static int iep_dram_init(struct iep *iep)
 	writeb(0, sram + TIMESYNC_DOMAIN_NUMBER_LIST);
 	writeb(0, sram + TIMESYNC_DOMAIN_NUMBER_LIST + 1);
 
-	/* Configure 1-step/2-step (Linux: N/A) */
+	/* Configure 1-step/2-step */
 	writeb(PTP_TWO_STEP_ENABLE, sram + DISABLE_SWITCH_SYNC_RELAY_OFFSET);
 
 	/* Configures the setting to Link local frame without HSR tag */
@@ -252,12 +519,6 @@ static int iep_dram_init(struct iep *iep)
 	return 0;
 }
 
-static int iep_init_ecap(struct iep *iep)
-{
-	/* +++TODO: enable dra7.dtsi/ecap0{} */
-	return 0;
-}
-
 static int iep_config(struct iep *iep)
 {
 	u32 val;
@@ -266,10 +527,9 @@ static int iep_config(struct iep *iep)
 	iep_write_reg(iep, PRUSS_IEP_CMP1_REG0, PULSE_SYNC_INTERVAL);
 
 	/* Program Sync 0 Width. The value in register is
-	 * multiplied by 5 by HW
+	 * multiplied by 1 by HW
 	 */
-	iep_write_reg(iep, PRUSS_IEP_SYNC_PWIDTH_REG,
-		      PULSE_SYNC_WIDTH * 5);
+	iep_write_reg(iep, PRUSS_IEP_SYNC_PWIDTH_REG, IEP_DEFAULT_PPS_WIDTH);
 
 	/* Program Sync 0 Start cycles */
 	iep_write_reg(iep, PRUSS_IEP_SYNC_START_REG, 0);
@@ -312,10 +572,6 @@ int iep_register(struct iep *iep)
 
 	iep_dram_init(iep);
 
-	iep_init_ecap(iep);
-
-	/*   TimeSync_edmaConfig +++TODO */
-
 	iep_config(iep);
 
 	iep_set_reg(iep, PRUSS_IEP_GLOBAL_CFG,
@@ -330,18 +586,24 @@ int iep_register(struct iep *iep)
 		return err;
 	}
 
-	iep_start(iep);
+	iep->pr2_sync0_mux = (u32 __iomem *)ioremap(CTRL_CORE_PAD_VOUT1_D7,
+						    sizeof(u32));
 
+	iep_pps_init(iep);
+	iep_start(iep);
 	iep->phc_index = ptp_clock_index(iep->ptp_clock);
 
-	schedule_delayed_work(&iep->overflow_work, iep->ov_check_period);
+	ptp_schedule_worker(iep->ptp_clock, iep->ov_check_period);
 	return 0;
 }
 
 void iep_unregister(struct iep *iep)
 {
+	if (WARN_ON(!iep->ptp_clock))
+		return;
+
+	iep_pps_stop(iep);
 	iep_stop(iep);
-	cancel_delayed_work_sync(&iep->overflow_work);
 	ptp_clock_unregister(iep->ptp_clock);
 	iep->ptp_clock = NULL;
 }
@@ -359,8 +621,7 @@ struct iep *iep_create(struct device *dev, void __iomem *sram,
 	iep->sram = sram;
 	iep->iep_reg = iep_reg;
 	spin_lock_init(&iep->ptp_lock);
-	INIT_DELAYED_WORK(&iep->overflow_work, iep_overflow_check);
-	iep->ov_check_period = 5 * HZ;
+	iep->ov_check_period = msecs_to_jiffies(50);
 	iep->ov_check_period_slow = iep->ov_check_period;
 
 	iep->cc.shift = IEP_TC_DEFAULT_SHIFT;
diff --git a/drivers/net/ethernet/ti/iep.h b/drivers/net/ethernet/ti/iep.h
index 5f15d31..7650986 100644
--- a/drivers/net/ethernet/ti/iep.h
+++ b/drivers/net/ethernet/ti/iep.h
@@ -25,19 +25,25 @@
 #include <linux/skbuff.h>
 #include <linux/timecounter.h>
 
-#define IEP_SYNC_EN                  0x1
-#define IEP_SYNC0_EN                 0x2
-#define IEP_CMP1_EN                  0x4
+#define IEP_SYNC_EN                  BIT(0)
+#define IEP_SYNC0_EN                 BIT(1)
+#define IEP_CMP1_EN                  BIT(2)
+#define IEP_CMP1_HIT                 BIT(1)
 
+/* IEP reg offsets */
 #define PRUSS_IEP_GLOBAL_CFG         0x00
 #define PRUSS_IEP_COMPENSATION       0x08
 #define PRUSS_IEP_SLOW_COMPENSATION  0x0C
 #define PRUSS_IEP_COUNT_REG0         0x10
 #define PRUSS_IEP_COUNT_REG1         0x14
 #define PRUSS_IEP_CMP_CFG_REG        0x70
+#define PRUSS_IEP_CMP_STAT_REG       0x74
 #define PRUSS_IEP_CMP1_REG0          0x80
+#define PRUSS_IEP_CMP1_REG1          0x84
 #define PRUSS_IEP_SYNC_CTRL_REG      0x180
+#define PRUSS_IEP_SYNC0_STAT_REG     0x188
 #define PRUSS_IEP_SYNC_PWIDTH_REG    0x190
+#define PRUSS_IEP_SYNC0_PERIOD_REG   0x194
 #define PRUSS_IEP_SYNC_START_REG     0x19c
 
 #define PRUSS_IEP_CMP_INC_MASK       0xfff00
@@ -50,13 +56,25 @@
 #define IEP_TC_DEFAULT_SHIFT         28
 #define IEP_TC_DEFAULT_MULT          (5 << IEP_TC_DEFAULT_SHIFT)
 
-#define IEP_GLOBAL_CFG_REG_MASK	0xfffff
-#define IEP_GLOBAL_CFG_REG_VAL	0x00111
+#define IEP_GLOBAL_CFG_REG_MASK      0xfffff
+#define IEP_GLOBAL_CFG_REG_VAL       0x00111
+
+/* 10 ms width */
+#define IEP_DEFAULT_PPS_WIDTH        (PRUSS_IEP_CLOCK_RATE / 100)
+
+#define CTRL_CORE_PAD_VOUT1_D7       0x4a0035f8
+
+/* 1ms pulse sync interval */
+#define PULSE_SYNC_INTERVAL          1000000
+#define TIMESYNC_SECONDS_COUNT_SIZE  6
+#define PTP_TWO_STEP_ENABLE          1
+#define TIMESYNC_ENABLE              1
 
 struct iep {
 	struct device *dev;
 	void __iomem *sram;
 	void __iomem *iep_reg;
+	u32 __iomem  *pr2_sync0_mux;
 	struct ptp_clock_info info;
 	struct ptp_clock *ptp_clock;
 	int phc_index;
@@ -66,9 +84,15 @@ struct iep {
 	u32 cc_mult; /* for the nominal frequency */
 	struct cyclecounter cc;
 	struct timecounter tc;
-	struct delayed_work overflow_work;
 	unsigned long ov_check_period;
 	unsigned long ov_check_period_slow;
+	u64 cmp1_last;
+	int pps_enable;
+	int pps_report_next_op;
+	enum {
+		DISABLE_SYNC0,
+		ENABLE_SYNC0,
+	} pps_ops[4];
 };
 
 void iep_reset_timestamp(struct iep *iep, u16 ts_ofs);
-- 
1.9.1

