From dc7ad05d34c2f904ee0852994bccd95ae0816f2a Mon Sep 17 00:00:00 2001
From: Vitaly Andrianov <vitalya@ti.com>
Date: Tue, 26 Sep 2017 09:42:29 -0400
Subject: [PATCH 91/92] crypto:keystone:add support for SHA2

Added support for HMAC-SHA2-256-128 algorithm.

Signed-off-by: Sudhanand Dayalan <s-dayalan@ti.com>
Signed-off-by: Brian Wheeler <brian.wheeler@nokia.com>
Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
---
 drivers/crypto/keystone-sa-hlp.h   |   4 +
 drivers/crypto/keystone-sa-lld.c   | 236 ++++++++++++++++++++++++++++++++++++-
 drivers/crypto/keystone-sa-utils.c |  52 +++++---
 3 files changed, 270 insertions(+), 22 deletions(-)

diff --git a/drivers/crypto/keystone-sa-hlp.h b/drivers/crypto/keystone-sa-hlp.h
index 4a44abf..6b86fb9 100644
--- a/drivers/crypto/keystone-sa-hlp.h
+++ b/drivers/crypto/keystone-sa-hlp.h
@@ -26,6 +26,10 @@
 #include <asm/aes_glue.h>
 #include <crypto/aes.h>
 
+/* Make 32-bit word from 4 bytes */
+#define SA_MK_U32(b0, b1, b2, b3) (((b0) << 24) | ((b1) << 16) | \
+				   ((b2) << 8) | (b3))
+
 #define AES_XCBC_DIGEST_SIZE	16
 
 /* Values for NULL algorithms */
diff --git a/drivers/crypto/keystone-sa-lld.c b/drivers/crypto/keystone-sa-lld.c
index b01b1b1..3cd02de 100644
--- a/drivers/crypto/keystone-sa-lld.c
+++ b/drivers/crypto/keystone-sa-lld.c
@@ -59,6 +59,9 @@ void sa_conv_calg_to_salg(const char *cra_name, int *ealg_id, int *aalg_id)
 	if (!strcmp(cra_name, "authenc(hmac(sha1),cbc(aes))")) {
 		*ealg_id = SA_EALG_ID_AES_CBC;
 		*aalg_id = SA_AALG_ID_HMAC_SHA1;
+	} else if (!strcmp(cra_name, "authenc(hmac(sha256),cbc(aes))")) {
+		*ealg_id = SA_EALG_ID_AES_CBC;
+		*aalg_id = SA_AALG_ID_HMAC_SHA2_256;
 	} else if (!strcmp(cra_name, "authenc(hmac(sha1),ecb(cipher_null))")) {
 		*ealg_id = SA_EALG_ID_NULL;
 		*aalg_id = SA_AALG_ID_HMAC_SHA1;
@@ -105,7 +108,7 @@ struct sa_eng_info sa_eng_info_tbl[SA_ALG_ID_LAST] = {
 	[SA_AALG_ID_HMAC_MD5]	= { SA_ENG_ID_AM1, SA_CTX_AUTH_TYPE2_SZ},
 	[SA_AALG_ID_HMAC_SHA1]	= { SA_ENG_ID_AM1, SA_CTX_AUTH_TYPE2_SZ},
 	[SA_AALG_ID_HMAC_SHA2_224] = { SA_ENG_ID_NONE, 0},
-	[SA_AALG_ID_HMAC_SHA2_256] = { SA_ENG_ID_NONE, 0},
+	[SA_AALG_ID_HMAC_SHA2_256] = { SA_ENG_ID_AM1, SA_CTX_AUTH_TYPE2_SZ},
 	[SA_AALG_ID_GMAC]	= { SA_ENG_ID_EM1, SA_CTX_ENC_TYPE2_SZ},
 	[SA_AALG_ID_CMAC]	= {SA_ENG_ID_EM1, SA_CTX_AUTH_TYPE1_SZ},
 	[SA_AALG_ID_CBC_MAC]	= { SA_ENG_ID_NONE, 0},
@@ -233,8 +236,231 @@ void sa_hmac_sha1_get_pad(const u8 *key, u16 key_sz, u32 *ipad, u32 *opad)
 		opad[i] = cpu_to_be32(opad[i]);
 }
 
+#define ROTATE(a, n)     (((a)<<(n))|(((a)&0xffffffff)>>(32-(n))))
+
+/*
+ * FIPS specification refers to right rotations, while our ROTATE macro
+ * is left one. This is why you might notice that rotation coefficients
+ * differ from those observed in FIPS document by 32-N...
+ */
+#define Sigma0(x)	(ROTATE((x), 30) ^ ROTATE((x), 19) ^ ROTATE((x), 10))
+#define Sigma1(x)	(ROTATE((x), 26) ^ ROTATE((x), 21) ^ ROTATE((x), 7))
+#define sigma0(x)	(ROTATE((x), 25) ^ ROTATE((x), 14) ^ ((x)>>3))
+#define sigma1(x)	(ROTATE((x), 15) ^ ROTATE((x), 13) ^ ((x)>>10))
+
+#define CH(x, y, z)	(((x) & (y)) ^ ((~(x)) & (z)))
+#define MAJ(x, y, z)	(((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
+
+/* SHA256 constants. Values obtained from RFC4634. */
+static const u32 K256[64] = {
+	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
+	0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
+	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
+	0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
+	0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
+	0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
+	0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
+	0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
+	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
+	0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
+	0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
+	0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
+	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
+	0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
+	0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
+	0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
+};
+
+/* Obtained from TI SA-LLD */
+static const u32 mac_last_word_mask[3] = {0xff000000, 0xffff0000, 0xffffff00};
+
+/* Structure used by SHA2 algorithm */
+struct sa_sha2_inst_t {
+	u32 h[8];		/* H Buffers */
+	u32 nl, nh;
+	u32 data[16];	/* 32 bit words in a BLOCK */
+	u16 num;
+	u16 md_len;
+};
+
+/* Initialize SHA2-256 context. */
+static inline void sa_sha256_init(struct sa_sha2_inst_t *inst)
+{
+	/* SHA256 initial hash values. Values obtained from RFC4634. */
+	inst->h[0]   = 0x6a09e667;
+	inst->h[1]   = 0xbb67ae85;
+	inst->h[2]   = 0x3c6ef372;
+	inst->h[3]   = 0xa54ff53a;
+	inst->h[4]   = 0x510e527f;
+	inst->h[5]   = 0x9b05688c;
+	inst->h[6]   = 0x1f83d9ab;
+	inst->h[7]   = 0x5be0cd19;
+	inst->nl     = 0;
+	inst->nh     = 0;
+	inst->num    = 0;
+	inst->md_len = SHA256_DIGEST_SIZE;
+}
+
+/* SHA2 block processing function. */
+static inline void sha256_block(struct sa_sha2_inst_t *inst, u32 *p)
+{
+	u32 a, b, c, d, e, f, g, h, s0, s1, T1, T2;
+	u32	X[16];
+	int i;
+
+	a = inst->h[0];
+	b = inst->h[1];
+	c = inst->h[2];
+	d = inst->h[3];
+	e = inst->h[4];
+	f = inst->h[5];
+	g = inst->h[6];
+	h = inst->h[7];
+
+	for (i = 0; i < 16; i++) {
+		T1 = X[i] = p[i];
+		T1 += h + Sigma1(e) + CH(e, f, g) + K256[i];
+		T2 = Sigma0(a) + MAJ(a, b, c);
+		h = g;
+		g = f;
+		f = e;
+		e = d + T1;
+		d = c;
+		c = b;
+		b = a;
+		a = T1 + T2;
+	}
+
+	for (; i < 64; i++) {
+		s0 = X[(i + 1) & 0x0f];
+		s0 = sigma0(s0);
+		s1 = X[(i + 14) & 0x0f];
+		s1 = sigma1(s1);
+
+		T1 = X[i & 0xf] += s0 + s1 + X[(i + 9) & 0xf];
+		T1 += h + Sigma1(e) + CH(e, f, g) + K256[i];
+		T2 = Sigma0(a) + MAJ(a, b, c);
+		h = g;
+		g = f;
+		f = e;
+		e = d + T1;
+		d = c;
+		c = b;
+		b = a;
+		a = T1 + T2;
+	}
+
+	inst->h[0] += a;
+	inst->h[1] += b;
+	inst->h[2] += c;
+	inst->h[3] += d;
+	inst->h[4] += e;
+	inst->h[5] += f;
+	inst->h[6] += g;
+	inst->h[7] += h;
+}
+
+/* SHA2-256 update function. */
+static inline void sa_sha256_update(struct sa_sha2_inst_t *inst,
+		u8 *data, u32 len)
+{
+	u32 *p;
+	u16 ew, ec, sw;
+	u32 l;
+	u32 offset = 0;
+
+	if (len == 0)
+		return;
+
+	l = (inst->nl + (len << 3)) & 0xffffffff;
+	if (l < inst->nl) /* overflow */
+		inst->nh++;
+
+	inst->nh += (len >> 29);
+	inst->nl = l;
+	/*
+	 * We now can process the input data in blocks of SHA_CBLOCK
+	 * chars and save the leftovers to inst->data.
+	 */
+	p = inst->data;
+	while (len >= SHA256_BLOCK_SIZE) {
+		for (sw = (SHA256_BLOCK_SIZE/4); sw; sw--, offset += 4) {
+			*p++ = SA_MK_U32(data[offset], data[offset + 1],
+					data[offset + 2], data[offset + 3]);
+		}
+		p = inst->data;
+		sha256_block(inst, p);
+		len -= SHA256_BLOCK_SIZE;
+	}
+	ec = (s16)len;
+	inst->num = ec;
+	ew = (ec >> 2);
+	ec &= 0x03;
+
+	for (sw = 0; sw < ew; sw++) {
+		p[sw] = SA_MK_U32(data[offset], data[offset + 1],
+				data[offset + 2], data[offset + 3]);
+	}
+
+	if (ec) {
+		p[sw] = (SA_MK_U32(data[offset], data[offset + 1],
+				data[offset + 2], data[offset + 3])) &
+			mac_last_word_mask[ec - 1];
+	}
+}
+
+/* Generate HMAC-SHA256 intermediate Hash */
+static inline void sa_hmac_sha256_get_pad(const u8 *key, u16 key_sz,
+		u32 *ipad, u32 *opad)
+{
+	u16 i;
+	struct sa_sha2_inst_t sha2_inst;
+	u8 k_ipad[SHA256_BLOCK_SIZE];
+	u8 k_opad[SHA256_BLOCK_SIZE];
+	u8 *key1 = (u8 *)key;
+
+	/* assumption is that key_sz will be even number always */
+	/* set up key xor ipad, opad */
+	for (i = 0; i < key_sz; i++) {
+		k_ipad[i] = key1[i] ^ 0x36;
+		k_opad[i] = key1[i] ^ 0x5c;
+	}
+
+	/* Instead of XOR with zero */
+	for (; i < SHA256_BLOCK_SIZE; i++) {
+		k_ipad[i] = 0x36;
+		k_opad[i] = 0x5c;
+	}
+
+	/*
+	 * Perform sha1 on K_ipad
+	 */
+	/*Init the SHA1 state for 1st pass */
+	sa_sha256_init(&sha2_inst);
+
+	/* start with inner pad k_ipad */
+	sa_sha256_update(&sha2_inst, (u8 *)k_ipad, SHA256_BLOCK_SIZE);
+
+	/* Output the intermediate hash */
+	for (i = 0; i < 8; i++)
+		ipad[i] = cpu_to_be32(sha2_inst.h[i]);
+
+	/*
+	 * Perform sha1 on K_opad
+	 */
+	/*Init the SHA1 state for 2nd pass */
+	sa_sha256_init(&sha2_inst);
+
+	/* start with outer pad k_opad */
+	sa_sha256_update(&sha2_inst, (u8 *)k_opad, SHA256_BLOCK_SIZE);
+
+	/* Output the intermediate hash */
+	for (i = 0; i < 8; i++)
+		opad[i] = cpu_to_be32(sha2_inst.h[i]);
+}
+
 /* Derive GHASH to be used in the GCM algorithm */
-void sa_calc_ghash(const u8 *key, u16 key_sz, u8 *ghash)
+static inline void sa_calc_ghash(const u8 *key, u16 key_sz, u8 *ghash)
 {
 	struct AES_KEY enc_key;
 
@@ -313,10 +539,7 @@ int sa_set_sc_enc(u16 alg_id, const u8 *key, u16 key_sz,
 		break;
 
 	case SA_EALG_ID_GCM:
-		/*
-		 * TODO: Add support for ESN.
-		 */
-		aad_len = 8;
+		aad_len = 8;	/* ESN not supported */
 
 		mci = (enc) ? sa_mci_tbl.aes_enc[SA_ENG_ALGO_GCM][key_idx] :
 			sa_mci_tbl.aes_dec[SA_ENG_ALGO_GCM][key_idx];
@@ -455,6 +678,7 @@ void sa_set_sc_auth(u16 alg_id, const u8 *key, u16 key_sz, u8 *sc_buf)
 		sc_buf[1] |= 0x4;
 		keyed_mac = 1;
 		mac_sz = SHA256_DIGEST_SIZE;
+		sa_hmac_sha256_get_pad(key, key_sz, ipad, opad);
 		break;
 	}
 
diff --git a/drivers/crypto/keystone-sa-utils.c b/drivers/crypto/keystone-sa-utils.c
index 16b9028..ca0019e 100644
--- a/drivers/crypto/keystone-sa-utils.c
+++ b/drivers/crypto/keystone-sa-utils.c
@@ -444,7 +444,7 @@ static int sa_format_cmdl_gcm(struct sa_cmdl_cfg *cfg, u8 *cmdl,
 		return offset;
 	}
 
-	dev_err(sa_ks2_dev, " (%s): Unsupported mode\n", __func__);
+	dev_err(sa_ks2_dev, "(%s): Unsupported mode\n", __func__);
 	return -1;
 }
 
@@ -459,14 +459,10 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 	}
 }
 
-/* Make 32-bit word from 4 bytes */
-#define SA_MK_U32(b0, b1, b2, b3) (((b0) << 24) | ((b1) << 16) | \
-				   ((b2) << 8) | (b3))
-
 /* Update Command label */
 static inline void
 sa_update_cmdl(struct device *dev, u8 enc_offset, u16 enc_size,	u8 *enc_iv,
-	       u8 auth_offset, u16 auth_size, u8 *auth_iv, u8 aad_size,
+	       u16 auth_size, u8 *auth_iv, u8 aad_size,
 	       u8 *aad,	struct sa_cmdl_upd_info	*upd_info, u32 *cmdl)
 {
 	switch (upd_info->submode) {
@@ -520,7 +516,8 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 
 		if (aad_size == 12) {
 			/*
-			 * Uncomment this when support for ESN is added
+			 * Uncomment this when support for
+			 * ESN is added
 			 * cmdl[6] =
 			 * SA_MK_U32(aad[8], aad[9], aad[10], aad[11]);
 			 */
@@ -539,10 +536,10 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 		cmdl[0] |= enc_size;
 
 		/* Auth offset - Data Appended */
-		cmdl[1] |= (16 << 24);
+		cmdl[1] |= (16 << 24);	/* AAD Size + IV (remaining) */
 
 		/* Option 1: Store Authentication length (8 byte) */
-		cmdl[3] |= (auth_size << 3);	/* Payload Length + AAD + IV */
+		cmdl[3] |= (auth_size << 3);/* Payload Length + AAD + IV */
 
 		/* Option 2: Store AAD with zero padding (16 bytes) */
 		cmdl[4] = SA_MK_U32(aad[0], aad[1], aad[2], aad[3]);
@@ -562,10 +559,10 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 		}
 
 		/* Option 3: AES CTR IV (salt|IV|1) */
-		cmdl[9] = SA_MK_U32(enc_iv[0], enc_iv[1],
-				enc_iv[2], enc_iv[3]);
-		cmdl[10] = SA_MK_U32(enc_iv[4], enc_iv[5],
-				enc_iv[6], enc_iv[7]);
+		cmdl[9] =
+			SA_MK_U32(enc_iv[0], enc_iv[1], enc_iv[2], enc_iv[3]);
+		cmdl[10] =
+			SA_MK_U32(enc_iv[4], enc_iv[5], enc_iv[6], enc_iv[7]);
 		break;
 
 	case SA_MODE_CCM:
@@ -1369,7 +1366,6 @@ static int sa_aead_perform(struct aead_request *req, u8 *iv, bool enc)
 	u8 enc_offset;
 	int sg_nents;
 	int psdata_offset, ret = 0;
-	u8 auth_offset = req->assoclen;
 	u8 *auth_iv = NULL;
 	u8 aad[16];
 	u8 aad_len = 0;
@@ -1425,10 +1421,10 @@ static int sa_aead_perform(struct aead_request *req, u8 *iv, bool enc)
 	}
 
 	memcpy(req_ctx->cmdl, sa_ctx->cmdl, sa_ctx->cmdl_size);
+
 	/* Update Command Label */
 	sa_update_cmdl(sa_ks2_dev, enc_offset, enc_len,
-		       iv, auth_offset, auth_len,
-		       auth_iv, aad_len, aad,
+		       iv, auth_len, auth_iv, aad_len, aad,
 		       &sa_ctx->cmdl_upd_info, req_ctx->cmdl);
 
 	/*
@@ -1772,6 +1768,30 @@ static int sa_aead_gcm_setkey(struct crypto_aead *authenc,
 			.decrypt = sa_aead_decrypt,
 		}
 	},
+	{	.type = CRYPTO_ALG_TYPE_AEAD,
+		.alg.aead = {
+			.base = {
+				.cra_name = "authenc(hmac(sha256),cbc(aes))",
+				.cra_driver_name =
+					"authenc-hmac-sha256-cbc-aes-keystone-sa",
+				.cra_blocksize = AES_BLOCK_SIZE,
+				.cra_flags = CRYPTO_ALG_TYPE_AEAD |
+					CRYPTO_ALG_KERN_DRIVER_ONLY |
+					CRYPTO_ALG_ASYNC,
+				.cra_ctxsize = sizeof(struct sa_tfm_ctx),
+				.cra_module = THIS_MODULE,
+				.cra_alignmask = 0,
+				.cra_priority = 3000,
+			},
+			.ivsize = AES_BLOCK_SIZE,
+			.maxauthsize = SHA256_DIGEST_SIZE,
+			.init = sa_cra_init_aead,
+			.exit = sa_exit_tfm_aead,
+			.setkey	= sa_aead_setkey,
+			.encrypt = sa_aead_encrypt,
+			.decrypt = sa_aead_decrypt,
+		}
+	},
 };
 
 /* Register the algorithms in crypto framework */
-- 
1.9.1

