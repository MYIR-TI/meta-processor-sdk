From 9e6faba796e960a78222bf52a7e15c567e96bef7 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Thu, 16 Feb 2017 16:04:49 -0500
Subject: [PATCH 12/22] hsr: add netlink interface to create prp device

This patch adds a netlink interface to create a prp device similar in
line with hsr. Also add a notifier for the same.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
---
 include/uapi/linux/if_link.h     |  13 ++
 include/uapi/linux/prp_netlink.h |  52 +++++
 net/hsr-prp/Makefile             |   6 +-
 net/hsr-prp/hsr_main.c           |   4 +-
 net/hsr-prp/hsr_netlink.c        |   2 +-
 net/hsr-prp/hsr_prp_device.c     |  32 ++-
 net/hsr-prp/hsr_prp_device.h     |   3 +-
 net/hsr-prp/hsr_prp_main.c       |  21 +-
 net/hsr-prp/hsr_prp_main.h       |  10 +-
 net/hsr-prp/prp_main.c           |  40 ++++
 net/hsr-prp/prp_netlink.c        | 452 +++++++++++++++++++++++++++++++++++++++
 net/hsr-prp/prp_netlink.h        |  34 +++
 12 files changed, 651 insertions(+), 18 deletions(-)
 create mode 100644 include/uapi/linux/prp_netlink.h
 create mode 100644 net/hsr-prp/prp_main.c
 create mode 100644 net/hsr-prp/prp_netlink.c
 create mode 100644 net/hsr-prp/prp_netlink.h

diff --git a/include/uapi/linux/if_link.h b/include/uapi/linux/if_link.h
index b4fba66..a9b5d53 100644
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@ -883,4 +883,17 @@ enum {
 
 #define IFLA_XDP_MAX (__IFLA_XDP_MAX - 1)
 
+/* PRP section */
+
+enum {
+	IFLA_PRP_UNSPEC,
+	IFLA_PRP_SLAVE1,
+	IFLA_PRP_SLAVE2,
+	IFLA_PRP_MULTICAST_SPEC,	/* Last byte of supervision addr */
+	IFLA_PRP_SUPERVISION_ADDR,	/* Supervision frame multicast addr */
+	IFLA_PRP_SEQ_NR,
+	__IFLA_PRP_MAX,
+};
+
+#define IFLA_PRP_MAX (__IFLA_PRP_MAX - 1)
 #endif /* _UAPI_LINUX_IF_LINK_H */
diff --git a/include/uapi/linux/prp_netlink.h b/include/uapi/linux/prp_netlink.h
new file mode 100644
index 0000000..5f7fb5f
--- /dev/null
+++ b/include/uapi/linux/prp_netlink.h
@@ -0,0 +1,52 @@
+/*
+ * prp_netlink.h: This is based on hsr_netlink.h from Arvid Brodin,
+ * arvid.brodin@alten.se
+ *
+ * Copyright (C) 2017 Texas Instruments Incorporated
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ *
+ * Author(s):
+ *	2017 Murali Karicheri <m-karicheri2@ti.com>
+ */
+
+#ifndef __UAPI_PRP_NETLINK_H
+#define __UAPI_PRP_NETLINK_H
+
+/* Generic Netlink PRP family definition
+ */
+
+/* attributes */
+enum {
+	PRP_A_UNSPEC,
+	PRP_A_NODE_ADDR,
+	PRP_A_IFINDEX,
+	PRP_A_IF1_AGE,
+	PRP_A_IF2_AGE,
+	PRP_A_NODE_ADDR_B,
+	PRP_A_IF1_SEQ,
+	PRP_A_IF2_SEQ,
+	PRP_A_IF1_IFINDEX,
+	PRP_A_IF2_IFINDEX,
+	PRP_A_ADDR_B_IFINDEX,
+	__PRP_A_MAX,
+};
+#define PRP_A_MAX (__PRP_A_MAX - 1)
+
+
+/* commands */
+enum {
+	PRP_C_UNSPEC,
+	PRP_C_NODE_DOWN,
+	PRP_C_GET_NODE_STATUS,
+	PRP_C_SET_NODE_STATUS,
+	PRP_C_GET_NODE_LIST,
+	PRP_C_SET_NODE_LIST,
+	__PRP_C_MAX,
+};
+#define PRP_C_MAX (__PRP_C_MAX - 1)
+
+#endif /* __UAPI_PRP_NETLINK_H */
diff --git a/net/hsr-prp/Makefile b/net/hsr-prp/Makefile
index bca0cf6..cd3ab96 100644
--- a/net/hsr-prp/Makefile
+++ b/net/hsr-prp/Makefile
@@ -4,7 +4,7 @@
 
 obj-$(CONFIG_HSR_PRP)	+= hsr-prp.o
 
-hsr-prp-y		:= hsr_prp_main.o hsr_main.o hsr_prp_framereg.o \
-			   hsr_prp_device.o hsr_netlink.o hsr_prp_slave.o \
-			   hsr_prp_forward.o
+hsr-prp-y		:= hsr_prp_main.o hsr_main.o prp_main.o \
+			   hsr_prp_framereg.o hsr_prp_device.o hsr_netlink.o \
+			   prp_netlink.o hsr_prp_slave.o hsr_prp_forward.o
 hsr-prp-$(CONFIG_DEBUG_FS) += hsr_prp_debugfs.o
diff --git a/net/hsr-prp/hsr_main.c b/net/hsr-prp/hsr_main.c
index 2a4f3fc..5396ed5 100644
--- a/net/hsr-prp/hsr_main.c
+++ b/net/hsr-prp/hsr_main.c
@@ -29,7 +29,7 @@ static int __init hsr_init(void)
 
 	BUILD_BUG_ON(sizeof(struct hsr_tag) != HSR_PRP_HLEN);
 
-	res = hsr_prp_register_notifier();
+	res = hsr_prp_register_notifier(HSR);
 	if (!res)
 		res = hsr_netlink_init();
 
@@ -38,7 +38,7 @@ static int __init hsr_init(void)
 
 static void __exit hsr_exit(void)
 {
-	hsr_prp_unregister_notifier();
+	hsr_prp_unregister_notifier(HSR);
 	hsr_netlink_exit();
 }
 
diff --git a/net/hsr-prp/hsr_netlink.c b/net/hsr-prp/hsr_netlink.c
index 300623f..9a58b6c 100644
--- a/net/hsr-prp/hsr_netlink.c
+++ b/net/hsr-prp/hsr_netlink.c
@@ -114,7 +114,7 @@ static int hsr_fill_info(struct sk_buff *skb, const struct net_device *dev)
 	.maxtype	= IFLA_HSR_MAX,
 	.policy		= hsr_policy,
 	.priv_size	= sizeof(struct hsr_prp_priv),
-	.setup		= hsr_prp_dev_setup,
+	.setup		= hsr_dev_setup,
 	.newlink	= hsr_newlink,
 	.fill_info	= hsr_fill_info,
 };
diff --git a/net/hsr-prp/hsr_prp_device.c b/net/hsr-prp/hsr_prp_device.c
index 3b864a9..c622ca52 100644
--- a/net/hsr-prp/hsr_prp_device.c
+++ b/net/hsr-prp/hsr_prp_device.c
@@ -337,7 +337,7 @@ static void hsr_prp_announce(unsigned long data)
 	rcu_read_lock();
 	master = hsr_prp_get_port(priv, HSR_PRP_PT_MASTER);
 
-	if (priv->announce_count < 3 && priv->prot_version == 0) {
+	if (priv->announce_count < 3 && priv->prot_version == HSR_V0) {
 		send_supervision_frame(master, HSR_TLV_ANNOUNCE,
 				       priv->prot_version);
 		priv->announce_count++;
@@ -390,18 +390,14 @@ static void hsr_prp_dev_destroy(struct net_device *hsr_prp_dev)
 	.ndo_fix_features = hsr_prp_fix_features,
 };
 
-static struct device_type hsr_type = {
-	.name = "hsr",
-};
-
-void hsr_prp_dev_setup(struct net_device *ndev)
+static void hsr_prp_dev_setup(struct net_device *ndev, struct device_type *type)
 {
 	random_ether_addr(ndev->dev_addr);
 
 	ether_setup(ndev);
 	ndev->header_ops = &hsr_prp_header_ops;
 	ndev->netdev_ops = &hsr_prp_device_ops;
-	SET_NETDEV_DEVTYPE(ndev, &hsr_type);
+	SET_NETDEV_DEVTYPE(ndev, type);
 	ndev->priv_flags |= IFF_NO_QUEUE;
 
 	ndev->destructor = hsr_prp_dev_destroy;
@@ -424,6 +420,24 @@ void hsr_prp_dev_setup(struct net_device *ndev)
 	ndev->features |= NETIF_F_NETNS_LOCAL;
 }
 
+static struct device_type hsr_type = {
+	.name = "hsr",
+};
+
+void hsr_dev_setup(struct net_device *dev)
+{
+	hsr_prp_dev_setup(dev, &hsr_type);
+}
+
+static struct device_type prp_type = {
+	.name = "prp",
+};
+
+void prp_dev_setup(struct net_device *dev)
+{
+	hsr_prp_dev_setup(dev, &prp_type);
+}
+
 /* Return true if dev is a HSR master; return false otherwise.
  */
 inline bool is_hsr_prp_master(struct net_device *dev)
@@ -444,6 +458,10 @@ int hsr_prp_dev_finalize(struct net_device *hsr_prp_dev,
 	struct hsr_prp_port *port;
 	int res;
 
+	/* PRP not supported yet */
+	if (protocol_version == PRP_V1)
+		return -EPROTONOSUPPORT;
+
 	priv = netdev_priv(hsr_prp_dev);
 	INIT_LIST_HEAD(&priv->ports);
 	INIT_LIST_HEAD(&priv->node_db);
diff --git a/net/hsr-prp/hsr_prp_device.h b/net/hsr-prp/hsr_prp_device.h
index 2ede0f4..9a66677 100644
--- a/net/hsr-prp/hsr_prp_device.h
+++ b/net/hsr-prp/hsr_prp_device.h
@@ -15,7 +15,8 @@
 #include <linux/netdevice.h>
 #include "hsr_prp_main.h"
 
-void hsr_prp_dev_setup(struct net_device *dev);
+void hsr_dev_setup(struct net_device *dev);
+void prp_dev_setup(struct net_device *dev);
 int hsr_prp_dev_finalize(struct net_device *dev, struct net_device *slave[2],
 			 unsigned char multicast_spec, u8 protocol_version);
 void hsr_prp_check_carrier_and_operstate(struct hsr_prp_priv *priv);
diff --git a/net/hsr-prp/hsr_prp_main.c b/net/hsr-prp/hsr_prp_main.c
index 74ec345..b3d6b54 100644
--- a/net/hsr-prp/hsr_prp_main.c
+++ b/net/hsr-prp/hsr_prp_main.c
@@ -23,6 +23,10 @@
 	.notifier_call = hsr_prp_netdev_notify,	/* Slave event notifications */
 };
 
+static struct notifier_block prp_nb = {
+	.notifier_call = hsr_prp_netdev_notify,	/* Slave event notifications */
+};
+
 int hsr_prp_netdev_notify(struct notifier_block *nb, unsigned long event,
 			  void *ptr)
 {
@@ -47,6 +51,13 @@ int hsr_prp_netdev_notify(struct notifier_block *nb, unsigned long event,
 		priv = port->priv;
 	}
 
+	if ((priv->prot_version <= HSR_V1) &&
+	    (nb != &hsr_nb))
+		return NOTIFY_DONE;
+	else if ((priv->prot_version == PRP_V1) &&
+		 (nb != &prp_nb))
+		return NOTIFY_DONE;
+
 	switch (event) {
 	case NETDEV_UP:		/* Administrative state DOWN */
 	case NETDEV_DOWN:	/* Administrative state UP */
@@ -112,12 +123,18 @@ struct hsr_prp_port *hsr_prp_get_port(struct hsr_prp_priv *priv,
 	return NULL;
 }
 
-int hsr_prp_register_notifier(void)
+int hsr_prp_register_notifier(u8 proto)
 {
+	if (proto == PRP)
+		return register_netdevice_notifier(&prp_nb);
+
 	return register_netdevice_notifier(&hsr_nb);
 }
 
-void hsr_prp_unregister_notifier(void)
+void hsr_prp_unregister_notifier(u8 proto)
 {
+	if (proto == PRP)
+		unregister_netdevice_notifier(&prp_nb);
+
 	unregister_netdevice_notifier(&hsr_nb);
 }
diff --git a/net/hsr-prp/hsr_prp_main.h b/net/hsr-prp/hsr_prp_main.h
index b06f158..cb53920 100644
--- a/net/hsr-prp/hsr_prp_main.h
+++ b/net/hsr-prp/hsr_prp_main.h
@@ -155,6 +155,8 @@ struct hsr_prp_port {
 	enum hsr_prp_port_type	type;
 };
 
+#define HSR	0
+#define PRP	1
 struct hsr_prp_priv {
 	struct rcu_head		rcu_head;
 	struct list_head	ports;
@@ -167,6 +169,9 @@ struct hsr_prp_priv {
 	int announce_count;
 	u16 sequence_nr;
 	u16 sup_sequence_nr;	/* For HSRv1 separate seq_nr for supervision */
+#define HSR_V0	0
+#define HSR_V1	1
+#define PRP_V1	2
 	u8 prot_version;	/* Indicate if HSRv0 or HSRv1 or PRPv1 */
 	spinlock_t seqnr_lock;	/* locking for sequence_nr */
 	unsigned char		sup_multicast_addr[ETH_ALEN];
@@ -194,8 +199,9 @@ static inline u16 hsr_get_skb_sequence_nr(struct sk_buff *skb)
 	return ntohs(hsr_ethhdr->hsr_tag.sequence_nr);
 }
 
-int hsr_prp_register_notifier(void);
-void hsr_prp_unregister_notifier(void);
+int hsr_prp_register_notifier(u8 proto);
+void hsr_prp_unregister_notifier(u8 proto);
+
 #if IS_ENABLED(CONFIG_DEBUG_FS)
 int hsr_prp_debugfs_init(struct hsr_prp_priv *priv,
 			 struct net_device *hsr_prp_dev);
diff --git a/net/hsr-prp/prp_main.c b/net/hsr-prp/prp_main.c
new file mode 100644
index 0000000..7def3ee
--- /dev/null
+++ b/net/hsr-prp/prp_main.c
@@ -0,0 +1,40 @@
+/*
+ * prp_main.c: hsr initialization code. This is based on hsr_main.c
+ *
+ * Copyright (C) 2017 Texas Instruments Incorporated
+ *
+ * Author(s):
+ *	Murali Karicheri <m-karicheri2@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <linux/netdevice.h>
+#include "hsr_prp_main.h"
+#include "prp_netlink.h"
+
+static int __init prp_init(void)
+{
+	int res;
+
+	res = hsr_prp_register_notifier(PRP);
+	if (!res)
+		res = prp_netlink_init();
+
+	return res;
+}
+
+static void __exit prp_exit(void)
+{
+	hsr_prp_unregister_notifier(PRP);
+	prp_netlink_exit();
+}
+
+module_init(prp_init);
+MODULE_LICENSE("GPL");
diff --git a/net/hsr-prp/prp_netlink.c b/net/hsr-prp/prp_netlink.c
new file mode 100644
index 0000000..35e7c17
--- /dev/null
+++ b/net/hsr-prp/prp_netlink.c
@@ -0,0 +1,452 @@
+/*
+ * prp_netlink.c:  Routines for handling Netlink messages for PRP.
+ * This is based on hsr_netlink.c from Arvid Brodin, arvid.brodin@alten.se
+ *
+ * Copyright (C) 2017 Texas Instruments Incorporated
+ *
+ * Author(s):
+ *	Murali Karicheri <m-karicheri2@ti.com?
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include "prp_netlink.h"
+#include <linux/kernel.h>
+#include <net/rtnetlink.h>
+#include <net/genetlink.h>
+#include "hsr_prp_main.h"
+#include "hsr_prp_device.h"
+#include "hsr_prp_framereg.h"
+
+static const struct nla_policy prp_policy[IFLA_PRP_MAX + 1] = {
+	[IFLA_PRP_SLAVE1]		= { .type = NLA_U32 },
+	[IFLA_PRP_SLAVE2]		= { .type = NLA_U32 },
+	[IFLA_PRP_MULTICAST_SPEC]	= { .type = NLA_U8 },
+	[IFLA_PRP_SUPERVISION_ADDR]	= { .type = NLA_BINARY,
+					    .len = ETH_ALEN },
+	[IFLA_PRP_SEQ_NR]		= { .type = NLA_U16 },
+};
+
+/* Here, it seems a netdevice has already been allocated for us, and the
+ * hsr_dev_setup routine has been executed. Nice!
+ */
+static int prp_newlink(struct net *src_net, struct net_device *dev,
+		       struct nlattr *tb[], struct nlattr *data[])
+{
+	struct net_device *link[2];
+	unsigned char multicast_spec;
+
+	if (!data) {
+		netdev_info(dev, "PRP: No slave devices specified\n");
+		return -EINVAL;
+	}
+	if (!data[IFLA_PRP_SLAVE1]) {
+		netdev_info(dev, "PRP: Slave1 device not specified\n");
+		return -EINVAL;
+	}
+	link[0] = __dev_get_by_index(src_net,
+				     nla_get_u32(data[IFLA_PRP_SLAVE1]));
+	if (!data[IFLA_PRP_SLAVE2]) {
+		netdev_info(dev, "PRP: Slave2 device not specified\n");
+		return -EINVAL;
+	}
+	link[1] = __dev_get_by_index(src_net,
+				     nla_get_u32(data[IFLA_PRP_SLAVE2]));
+
+	if (!link[0] || !link[1])
+		return -ENODEV;
+	if (link[0] == link[1])
+		return -EINVAL;
+
+	if (!data[IFLA_PRP_MULTICAST_SPEC])
+		multicast_spec = 0;
+	else
+		multicast_spec = nla_get_u8(data[IFLA_PRP_MULTICAST_SPEC]);
+
+	return hsr_prp_dev_finalize(dev, link, multicast_spec, PRP_V1);
+}
+
+static int prp_fill_info(struct sk_buff *skb, const struct net_device *dev)
+{
+	struct hsr_prp_priv *priv;
+	struct hsr_prp_port *port;
+	int res;
+
+	priv = netdev_priv(dev);
+
+	res = 0;
+
+	rcu_read_lock();
+	port = hsr_prp_get_port(priv, HSR_PRP_PT_SLAVE_A);
+	if (port)
+		res = nla_put_u32(skb, IFLA_PRP_SLAVE1, port->dev->ifindex);
+	rcu_read_unlock();
+	if (res)
+		goto nla_put_failure;
+
+	rcu_read_lock();
+	port = hsr_prp_get_port(priv, HSR_PRP_PT_SLAVE_B);
+	if (port)
+		res = nla_put_u32(skb, IFLA_PRP_SLAVE2, port->dev->ifindex);
+	rcu_read_unlock();
+	if (res)
+		goto nla_put_failure;
+
+	if (nla_put(skb, IFLA_PRP_SUPERVISION_ADDR, ETH_ALEN,
+		    priv->sup_multicast_addr) ||
+	    nla_put_u16(skb, IFLA_PRP_SEQ_NR, priv->sequence_nr))
+		goto nla_put_failure;
+
+	return 0;
+
+nla_put_failure:
+	return -EMSGSIZE;
+}
+
+static struct rtnl_link_ops prp_link_ops __read_mostly = {
+	.kind		= "prp",
+	.maxtype	= IFLA_PRP_MAX,
+	.policy		= prp_policy,
+	.priv_size	= sizeof(struct hsr_prp_priv),
+	.setup		= prp_dev_setup,
+	.newlink	= prp_newlink,
+	.fill_info	= prp_fill_info,
+};
+
+/* attribute policy */
+/* NLA_BINARY missing in libnl; use NLA_UNSPEC in userspace instead. */
+static const struct nla_policy prp_genl_policy[PRP_A_MAX + 1] = {
+	[PRP_A_NODE_ADDR] = { .type = NLA_BINARY, .len = ETH_ALEN },
+	[PRP_A_NODE_ADDR_B] = { .type = NLA_BINARY, .len = ETH_ALEN },
+	[PRP_A_IFINDEX] = { .type = NLA_U32 },
+	[PRP_A_IF1_AGE] = { .type = NLA_U32 },
+	[PRP_A_IF2_AGE] = { .type = NLA_U32 },
+	[PRP_A_IF1_SEQ] = { .type = NLA_U16 },
+	[PRP_A_IF2_SEQ] = { .type = NLA_U16 },
+};
+
+static struct genl_family prp_genl_family = {
+	.id = GENL_ID_GENERATE,
+	.hdrsize = 0,
+	.name = "PRP",
+	.version = 1,
+	.maxattr = PRP_A_MAX,
+};
+
+static const struct genl_multicast_group hsr_mcgrps[] = {
+	{ .name = "prp-network", },
+};
+
+/* This is called if for some node with MAC address addr, we only get frames
+ * over one of the slave interfaces. This would indicate an open network ring
+ * (i.e. a link has failed somewhere).
+ */
+/* This is called when we haven't heard from the node with MAC address addr for
+ * some time (just before the node is removed from the node table/list).
+ */
+void prp_nl_nodedown(struct hsr_prp_priv *priv, unsigned char addr[ETH_ALEN])
+{
+	struct sk_buff *skb;
+	void *msg_head;
+	struct hsr_prp_port *master;
+	int res;
+
+	skb = genlmsg_new(NLMSG_GOODSIZE, GFP_ATOMIC);
+	if (!skb)
+		goto fail;
+
+	msg_head = genlmsg_put(skb, 0, 0, &prp_genl_family, 0, PRP_C_NODE_DOWN);
+	if (!msg_head)
+		goto nla_put_failure;
+
+	res = nla_put(skb, PRP_A_NODE_ADDR, ETH_ALEN, addr);
+	if (res < 0)
+		goto nla_put_failure;
+
+	genlmsg_end(skb, msg_head);
+	genlmsg_multicast(&prp_genl_family, skb, 0, 0, GFP_ATOMIC);
+
+	return;
+
+nla_put_failure:
+	kfree_skb(skb);
+
+fail:
+	rcu_read_lock();
+	master = hsr_prp_get_port(priv, HSR_PRP_PT_MASTER);
+	netdev_warn(master->dev, "Could not send PRP node down\n");
+	rcu_read_unlock();
+}
+
+/* PRP_C_GET_NODE_STATUS lets userspace query the internal PRP node table
+ * about the status of a specific node in the network, defined by its MAC
+ * address.
+ *
+ * Input: hsr ifindex, node mac address
+ * Output: hsr ifindex, node mac address (copied from request),
+ *	   age of latest frame from node over slave 1, slave 2 [ms]
+ */
+static int prp_get_node_status(struct sk_buff *skb_in, struct genl_info *info)
+{
+	/* For receiving */
+	struct nlattr *na;
+	struct net_device *hsr_dev;
+
+	/* For sending */
+	struct sk_buff *skb_out;
+	void *msg_head;
+	struct hsr_prp_priv *priv;
+	struct hsr_prp_port *port;
+	unsigned char hsr_node_addr_b[ETH_ALEN];
+	int hsr_node_if1_age;
+	u16 hsr_node_if1_seq;
+	int hsr_node_if2_age;
+	u16 hsr_node_if2_seq;
+	int addr_b_ifindex;
+	int res;
+
+	if (!info)
+		goto invalid;
+
+	na = info->attrs[PRP_A_IFINDEX];
+	if (!na)
+		goto invalid;
+	na = info->attrs[PRP_A_NODE_ADDR];
+	if (!na)
+		goto invalid;
+
+	hsr_dev = __dev_get_by_index(genl_info_net(info),
+				     nla_get_u32(info->attrs[PRP_A_IFINDEX]));
+	if (!hsr_dev)
+		goto invalid;
+	if (!is_hsr_prp_master(hsr_dev))
+		goto invalid;
+
+	/* Send reply */
+	skb_out = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
+	if (!skb_out) {
+		res = -ENOMEM;
+		goto fail;
+	}
+
+	msg_head = genlmsg_put(skb_out, NETLINK_CB(skb_in).portid,
+			       info->snd_seq, &prp_genl_family, 0,
+			       PRP_C_SET_NODE_STATUS);
+	if (!msg_head) {
+		res = -ENOMEM;
+		goto nla_put_failure;
+	}
+
+	res = nla_put_u32(skb_out, PRP_A_IFINDEX, hsr_dev->ifindex);
+	if (res < 0)
+		goto nla_put_failure;
+
+	priv = netdev_priv(hsr_dev);
+	res = hsr_prp_get_node_data(
+			priv,
+			(unsigned char *)nla_data(info->attrs[PRP_A_NODE_ADDR]),
+			hsr_node_addr_b,
+			&addr_b_ifindex,
+			&hsr_node_if1_age,
+			&hsr_node_if1_seq,
+			&hsr_node_if2_age,
+			&hsr_node_if2_seq);
+	if (res < 0)
+		goto nla_put_failure;
+
+	res = nla_put(skb_out, PRP_A_NODE_ADDR, ETH_ALEN,
+		      nla_data(info->attrs[PRP_A_NODE_ADDR]));
+	if (res < 0)
+		goto nla_put_failure;
+
+	if (addr_b_ifindex > -1) {
+		res = nla_put(skb_out, PRP_A_NODE_ADDR_B, ETH_ALEN,
+			      hsr_node_addr_b);
+		if (res < 0)
+			goto nla_put_failure;
+
+		res = nla_put_u32(skb_out, PRP_A_ADDR_B_IFINDEX,
+				  addr_b_ifindex);
+		if (res < 0)
+			goto nla_put_failure;
+	}
+
+	res = nla_put_u32(skb_out, PRP_A_IF1_AGE, hsr_node_if1_age);
+	if (res < 0)
+		goto nla_put_failure;
+	res = nla_put_u16(skb_out, PRP_A_IF1_SEQ, hsr_node_if1_seq);
+	if (res < 0)
+		goto nla_put_failure;
+	rcu_read_lock();
+	port = hsr_prp_get_port(priv, HSR_PRP_PT_SLAVE_A);
+	if (port)
+		res = nla_put_u32(skb_out, PRP_A_IF1_IFINDEX,
+				  port->dev->ifindex);
+	rcu_read_unlock();
+	if (res < 0)
+		goto nla_put_failure;
+
+	res = nla_put_u32(skb_out, PRP_A_IF2_AGE, hsr_node_if2_age);
+	if (res < 0)
+		goto nla_put_failure;
+	res = nla_put_u16(skb_out, PRP_A_IF2_SEQ, hsr_node_if2_seq);
+	if (res < 0)
+		goto nla_put_failure;
+	rcu_read_lock();
+	port = hsr_prp_get_port(priv, HSR_PRP_PT_SLAVE_B);
+	if (port)
+		res = nla_put_u32(skb_out, PRP_A_IF2_IFINDEX,
+				  port->dev->ifindex);
+	rcu_read_unlock();
+	if (res < 0)
+		goto nla_put_failure;
+
+	genlmsg_end(skb_out, msg_head);
+	genlmsg_unicast(genl_info_net(info), skb_out, info->snd_portid);
+
+	return 0;
+
+invalid:
+	netlink_ack(skb_in, nlmsg_hdr(skb_in), -EINVAL);
+	return 0;
+
+nla_put_failure:
+	kfree_skb(skb_out);
+	/* Fall through */
+
+fail:
+	return res;
+}
+
+/* Get a list of MacAddressA of all nodes known to this node (including self).
+ */
+static int prp_get_node_list(struct sk_buff *skb_in, struct genl_info *info)
+{
+	/* For receiving */
+	struct nlattr *na;
+	struct net_device *hsr_dev;
+
+	/* For sending */
+	struct sk_buff *skb_out;
+	void *msg_head;
+	struct hsr_prp_priv *priv;
+	void *pos;
+	unsigned char addr[ETH_ALEN];
+	int res;
+
+	if (!info)
+		goto invalid;
+
+	na = info->attrs[PRP_A_IFINDEX];
+	if (!na)
+		goto invalid;
+
+	hsr_dev = __dev_get_by_index(genl_info_net(info),
+				     nla_get_u32(info->attrs[PRP_A_IFINDEX]));
+	if (!hsr_dev)
+		goto invalid;
+	if (!is_hsr_prp_master(hsr_dev))
+		goto invalid;
+
+	/* Send reply */
+	skb_out = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
+	if (!skb_out) {
+		res = -ENOMEM;
+		goto fail;
+	}
+
+	msg_head = genlmsg_put(skb_out, NETLINK_CB(skb_in).portid,
+			       info->snd_seq, &prp_genl_family, 0,
+			       PRP_C_SET_NODE_LIST);
+	if (!msg_head) {
+		res = -ENOMEM;
+		goto nla_put_failure;
+	}
+
+	res = nla_put_u32(skb_out, PRP_A_IFINDEX, hsr_dev->ifindex);
+	if (res < 0)
+		goto nla_put_failure;
+
+	priv = netdev_priv(hsr_dev);
+
+	rcu_read_lock();
+	pos = hsr_prp_get_next_node(priv, NULL, addr);
+	while (pos) {
+		res = nla_put(skb_out, PRP_A_NODE_ADDR, ETH_ALEN, addr);
+		if (res < 0) {
+			rcu_read_unlock();
+			goto nla_put_failure;
+		}
+		pos = hsr_prp_get_next_node(priv, pos, addr);
+	}
+	rcu_read_unlock();
+
+	genlmsg_end(skb_out, msg_head);
+	genlmsg_unicast(genl_info_net(info), skb_out, info->snd_portid);
+
+	return 0;
+
+invalid:
+	netlink_ack(skb_in, nlmsg_hdr(skb_in), -EINVAL);
+	return 0;
+
+nla_put_failure:
+	kfree_skb(skb_out);
+	/* Fall through */
+
+fail:
+	return res;
+}
+
+static const struct genl_ops hsr_ops[] = {
+	{
+		.cmd = PRP_C_GET_NODE_STATUS,
+		.flags = 0,
+		.policy = prp_genl_policy,
+		.doit = prp_get_node_status,
+		.dumpit = NULL,
+	},
+	{
+		.cmd = PRP_C_GET_NODE_LIST,
+		.flags = 0,
+		.policy = prp_genl_policy,
+		.doit = prp_get_node_list,
+		.dumpit = NULL,
+	},
+};
+
+int __init prp_netlink_init(void)
+{
+	int rc;
+
+	rc = rtnl_link_register(&prp_link_ops);
+	if (rc)
+		goto fail_rtnl_link_register;
+
+	rc = genl_register_family_with_ops_groups(&prp_genl_family, hsr_ops,
+						  hsr_mcgrps);
+	if (rc)
+		goto fail_genl_register_family;
+
+	return 0;
+
+fail_genl_register_family:
+	rtnl_link_unregister(&prp_link_ops);
+fail_rtnl_link_register:
+
+	return rc;
+}
+
+void __exit prp_netlink_exit(void)
+{
+	genl_unregister_family(&prp_genl_family);
+	rtnl_link_unregister(&prp_link_ops);
+}
+
+MODULE_ALIAS_RTNL_LINK("prp");
diff --git a/net/hsr-prp/prp_netlink.h b/net/hsr-prp/prp_netlink.h
new file mode 100644
index 0000000..bcf62c8
--- /dev/null
+++ b/net/hsr-prp/prp_netlink.h
@@ -0,0 +1,34 @@
+/*
+ * prp_netlink.h:
+ * This is based on hsr_netlink.h from Arvid Brodin, arvid.brodin@alten.se
+ *
+ * Copyright (C) 2017 Texas Instruments Incorporated
+ *
+ * Author(s):
+ *	Murali Karicheri <m-karicheri2@ti.com?
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#ifndef __PRP_NETLINK_H
+#define __PRP_NETLINK_H
+
+#include <linux/if_ether.h>
+#include <linux/module.h>
+#include <uapi/linux/prp_netlink.h>
+
+struct hsr_prp_priv;
+struct hsr_prp_port;
+
+int __init prp_netlink_init(void);
+void __exit prp_netlink_exit(void);
+
+void prp_nl_nodedown(struct hsr_prp_priv *priv, unsigned char addr[ETH_ALEN]);
+
+#endif /* __PRP_NETLINK_H */
-- 
1.9.1

