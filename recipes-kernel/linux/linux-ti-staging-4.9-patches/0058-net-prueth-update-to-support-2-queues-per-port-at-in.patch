From b0f339e7ea8056d13f25b7387aeb6e50ea574cfe Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Fri, 15 Sep 2017 15:53:31 -0400
Subject: [PATCH 58/82] net: prueth: update to support 2 queues per port at
 ingress/egress

One of the issue present in the current version of the firmware is that
there is a collision queue that can hold at the max one MTU sized frame.
In the case of HSR/PRP, the chances of two frames arriving simultaneously
at two ingress ports is high which results in one frame getting dropped
when the Host is still not read the previous frames in the Host interface
FIFO. Also same FIFO is shared by both PRUs making collision theoretically
possible. Instead the new design in firmware allocates 2 queues per PRU
per priority that is used exclusively by the PRU thereby avoiding
collision scenario. Tests have shown that this helps in eliminating
collision as long as the Host driver is able to drain the packet from the
queue fast enough to avoid buffer overflow. Additional buffers freed
from the collision queue is allocated to Q0-Q3 at host receive interface.

This patch makes update to the driver to use two separate interrupts per
port for switch case similar to of EMAC case. The Ingress/Egress  queue
usage is also made similar to EMAC. i.e 2 queues per priority per port
at Ingress. At the Egress, 4 queues used as in EMAC case plus a collision
queue.

The existing pcp to queue map is changed to map a group of PCPs to a queue.
Since two priority levels are supported at the ingress, 0-3 are mapped to
one queue and 4-7 to another queue for each PRU.
sw_pcp_rx_priority_queue_map[] provides this map and is written to shared
memory for firmware use.

Note that, this version of the driver is not compatible with prior version
(1.2) of the PRU firmware and will work only with PRU firmware version 1.3.
So this change has to go in sync with firmware version 1.3.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 drivers/net/ethernet/ti/prueth.c | 239 +++++++++++----------------------------
 1 file changed, 69 insertions(+), 170 deletions(-)

diff --git a/drivers/net/ethernet/ti/prueth.c b/drivers/net/ethernet/ti/prueth.c
index 74c3622..29ee9d6 100644
--- a/drivers/net/ethernet/ti/prueth.c
+++ b/drivers/net/ethernet/ti/prueth.c
@@ -121,7 +121,10 @@ enum pruss_ethtype {
 	(PRUETH_IS_SWITCH(p) || PRUETH_HAS_HSR(p) || PRUETH_HAS_PRP(p))
 
 #define PRUETH_RED_TABLE_CHECK_PERIOD	(HZ / 100)
-#define NUM_VLAN_PCP			8
+/* A group of PCPs are mapped to a Queue. This is the size of firmware
+ * array in shared memory
+ */
+#define PCP_GROUP_TO_QUEUE_MAP_SIZE	8
 
 /* In switch mode there are 3 real ports i.e. 3 mac addrs.
  * however Linux sees only the host side port. The other 2 ports
@@ -220,9 +223,6 @@ struct prueth_emac {
 	/* emac mode irqs */
 	int rx_irq;
 	int tx_irq;
-	/* switch & Red mode irqs */
-	int sw_rx_irq;
-	int sw_tx_irq;
 
 	struct prueth_queue_desc __iomem *rx_queue_descs;
 	struct prueth_queue_desc __iomem *tx_queue_descs;
@@ -322,7 +322,7 @@ struct prueth {
 	unsigned int node_table_clear;
 	unsigned int tbl_check_mask;
 	struct timer_list tbl_check_timer;
-	u8 pcp_rxq_map[NUM_VLAN_PCP];
+	u8 pcp_rxq_map[PCP_GROUP_TO_QUEUE_MAP_SIZE];
 	struct prueth_mmap_port_cfg_basis mmap_port_cfg_basis[PRUETH_PORT_MAX];
 	struct prueth_mmap_sram_cfg mmap_sram_cfg;
 	struct prueth_mmap_ocmc_cfg mmap_ocmc_cfg;
@@ -1023,14 +1023,14 @@ static inline void prueth_hsr_prp_debugfs_term(struct prueth *prueth)
 static struct prueth_col_rx_context_info col_rx_context_infos[PRUETH_PORT_MAX];
 static struct prueth_queue_desc queue_descs[PRUETH_PORT_MAX][NUM_QUEUES + 1];
 
-/* VLAN-tag PCP to priority queue map for HSR/PRP/SWITCH.
+/* VLAN-tag PCP to priority queue map for EMAC/Switch/HSR/PRP
  * Index is PCP val.
  *   low  - pcp 0..1 maps to Q4
  *              2..3 maps to Q3
  *              4..5 maps to Q2
  *   high - pcp 6..7 maps to Q1.
  */
-static const unsigned short sw_pcp_tx_priority_queue_map[] = {
+static const unsigned short emac_pcp_tx_priority_queue_map[] = {
 	PRUETH_QUEUE4, PRUETH_QUEUE4,
 	PRUETH_QUEUE3, PRUETH_QUEUE3,
 	PRUETH_QUEUE2, PRUETH_QUEUE2,
@@ -1038,16 +1038,6 @@ static inline void prueth_hsr_prp_debugfs_term(struct prueth *prueth)
 };
 
 /* Order of processing of port Rx queues */
-static unsigned int sw_port_rx_priority_queue_ids[] = {
-	PRUETH_QUEUE1,
-	PRUETH_QUEUE2,
-	PRUETH_QUEUE3,
-	PRUETH_QUEUE4
-};
-
-static int sw_num_rx_queues = NUM_QUEUES;
-
-/* Order of processing of port Rx queues */
 static const unsigned int emac_port_rx_priority_queue_ids[][2] = {
 	[PRUETH_PORT_HOST] = {
 		0, 0
@@ -1501,17 +1491,38 @@ static int prueth_emac_config(struct prueth *prueth, struct prueth_emac *emac)
 	return 0;
 }
 
+/* Host rx PCP to priority Queue map,
+ * byte 0 => PRU 0, PCP 0-3 => Q1 (could be any Queue)
+ * byte 1 => PRU 0, PCP 4-7 => Q0 (could be any Queue)
+ * byte 2 => Unused.
+ * byte 3 => Unused.
+ * byte 4 => PRU 1, PCP 0-3 => Q3 (could be any Queue)
+ * byte 5 => PRU 1, PCP 4-7 => Q2 (could be any Queue)
+ * byte 6 => Unused
+ * byte 7 => Unused
+ * queue names below are named 1 based. i.e PRUETH_QUEUE1 is 0,
+ * PRUETH_QUEUE2 is 1 and so forth. Current assumption in
+ * the driver code is that lower the queue number higher the
+ * priority of the queue.
+ */
+u8 sw_pcp_rx_priority_queue_map[PCP_GROUP_TO_QUEUE_MAP_SIZE] = {
+	/* port 1 or PRU 0 */
+	PRUETH_QUEUE2, PRUETH_QUEUE1, 0xff, 0xff,
+	/* port 2 or PRU 1 */
+	PRUETH_QUEUE4, PRUETH_QUEUE3, 0xff, 0xff,
+};
+
 static int prueth_hsr_prp_pcp_rxq_map_config(struct prueth *prueth)
 {
 	void __iomem *sram  = prueth->mem[PRUETH_MEM_SHARED_RAM].va;
-	int i, j, pcp = (NUM_VLAN_PCP / 2);
+	int i, j, pcp = (PCP_GROUP_TO_QUEUE_MAP_SIZE / 2);
 	u32 val;
 
 	for (i = 0; i < 2; i++) {
 		val = 0;
 		for (j = 0; j < pcp; j++)
-			val |= (prueth->pcp_rxq_map[i * pcp + j] << (j * 8));
-
+			val |=
+			(sw_pcp_rx_priority_queue_map[i * pcp + j] << (j * 8));
 		writel(val, sram + QUEUE_2_PCP_MAP_OFFSET + i * 4);
 	}
 
@@ -2117,6 +2128,7 @@ static int emac_rx_packet(struct prueth_emac *emac, u16 *bd_rd_ptr,
 	if (buffer_wrapped) { /* wrapped around buffer */
 		int bytes = (buffer_desc_count - read_block) * ICSS_BLOCK_SIZE;
 		int remaining;
+
 		/* bytes is integral multiple of ICSS_BLOCK_SIZE but
 		 * entire packet may have fit within the last BD
 		 * if pkt_info.length is not integral multiple of
@@ -2178,13 +2190,8 @@ static int emac_rx_packets(struct prueth_emac *emac, int quota)
 
 	prueth = emac->prueth;
 
-	if (PRUETH_HAS_SWITCH(prueth)) {
-		prio_q_ids = &sw_port_rx_priority_queue_ids[0];
-		q_cnt = sw_num_rx_queues;
-	} else {
-		prio_q_ids = emac_port_rx_priority_queue_ids[emac->port_id];
-		q_cnt = emac_num_rx_queues;
-	}
+	prio_q_ids = emac_port_rx_priority_queue_ids[emac->port_id];
+	q_cnt = emac_num_rx_queues;
 
 	/* search host queues for packets */
 	for (j = 0; j < q_cnt; j++) {
@@ -2206,16 +2213,6 @@ static int emac_rx_packets(struct prueth_emac *emac, int quota)
 		if (overflow_cnt > 0) {
 			emac->ndev->stats.rx_over_errors += overflow_cnt;
 
-			/* In SWITCH case, rx qs are shared by both ports,
-			 * probably best thing to do is to inc
-			 * rx_over_errors on both emac for now
-			 */
-			if (PRUETH_HAS_SWITCH(prueth)) {
-				other_emac = prueth->emac[emac->port_id ^ 0x3];
-				other_emac->ndev->stats.rx_over_errors +=
-					overflow_cnt;
-			}
-
 			/* reset to zero */
 			writeb(0, &queue_desc->overflow_cnt);
 		}
@@ -2229,23 +2226,6 @@ static int emac_rx_packets(struct prueth_emac *emac, int quota)
 			rd_buf_desc = readl(shared_ram + bd_rd_ptr);
 			parse_packet_info(prueth, rd_buf_desc, &pkt_info);
 
-			if (PRUETH_HAS_SWITCH(prueth)) {
-				if (pkt_info.port == 1) {
-					emac = prueth->emac[PRUETH_PORT_MII0];
-					ndevstats = &emac->ndev->stats;
-				} else if (pkt_info.port == 2) {
-					emac = prueth->emac[PRUETH_PORT_MII1];
-					ndevstats = &emac->ndev->stats;
-				} else {
-					netdev_err(emac->ndev,
-						   "unknown rx port %u in bd 0x%08x\n",
-						   pkt_info.port, rd_buf_desc);
-					/* something wrong. drop all packets */
-					pkt_info.length = 0;
-					rx_err = true;
-				}
-			}
-
 			if (PRUETH_IS_HSR(prueth))
 				emac_max_pktlen = EMAC_MAX_PKTLEN_HSR;
 
@@ -2551,34 +2531,37 @@ static int emac_calculate_queue_offsets(struct prueth *prueth,
 	return ret;
 }
 
+/* EMAC/Switch/HSR/PRP defaults. EMAC doesn't have collision queue
+ * which is the last entry
+ */
+static u16 txq_size_defaults[NUM_QUEUES + 1] = {97, 97, 97, 97, 48};
+/* switch/HSR/PRP */
+static u16 sw_rxq_size_defaults[NUM_QUEUES + 1] = {206, 206, 206, 206};
+/* EMAC */
+static u16 emac_rxq_size_defaults[NUM_QUEUES + 1] = {194, 194, 194, 194};
+
 static int prueth_of_get_queue_sizes(struct prueth *prueth,
 				     struct device_node *np,
 				     u16 port)
 {
 	struct prueth_mmap_port_cfg_basis *pb;
-	u16 sw_rxq_size_defaults[NUM_QUEUES + 1]   = {254, 134, 134, 254, 48};
-	u16 emac_rxq_size_defaults[NUM_QUEUES + 1] = {194, 194, 194, 194, 48};
-	u16 txq_size_defaults[NUM_QUEUES + 1]      = { 97,  97,  97,  97, 48};
 	u16 *queue_sizes;
 	int num_queues, i;
 	char *propname;
 
 	if (port == PRUETH_PORT_HOST) {
 		propname = "rx-queue-size";
-		if (PRUETH_HAS_SWITCH(prueth)) {
-			num_queues = NUM_QUEUES + 1;
+		num_queues = NUM_QUEUES;
+		if (PRUETH_HAS_SWITCH(prueth))
 			queue_sizes = sw_rxq_size_defaults;
-		} else {
-			num_queues = NUM_QUEUES;
+		else
 			queue_sizes = emac_rxq_size_defaults;
-		}
 	} else if (port <= PRUETH_PORT_MII1) {
 		propname = "tx-queue-size";
 		queue_sizes = txq_size_defaults;
+		num_queues = NUM_QUEUES;
 		if (PRUETH_HAS_SWITCH(prueth))
 			num_queues = NUM_QUEUES + 1;
-		else
-			num_queues = NUM_QUEUES;
 	} else {
 		return -EINVAL;
 	}
@@ -2599,69 +2582,6 @@ static int prueth_of_get_queue_sizes(struct prueth *prueth,
 	return 0;
 }
 
-static void prueth_of_get_pcp_rxq_map(struct prueth *prueth,
-				      struct device_node *np)
-{
-	struct prueth_mmap_port_cfg_basis *pb;
-	int q, j, next_pcp, ret;
-	u8 rxq_mask = 0;
-
-	ret = of_property_read_u8_array(np, "pcp-rxq-map",
-					prueth->pcp_rxq_map, NUM_VLAN_PCP);
-	if (ret) {
-		/* Construct the default map. If all q sizes are non-zero,
-		 * the default pcp-rxq map will be, with pcp0 lo-to-hi
-		 * (left-to-right), <q4 q4 q3 q3 q2 q2 q1 q1>. If only
-		 * q2 is 0 for example, then the default map would be
-		 * <q4 q4 q4 q4 q3 q3 q1 q1>
-		 */
-		pb = &prueth->mmap_port_cfg_basis[PRUETH_PORT_HOST];
-		/* Start from the highest priority pcp 7 */
-		next_pcp = NUM_VLAN_PCP - 1;
-		for (q = PRUETH_QUEUE1; q <= PRUETH_QUEUE4; q++) {
-			/* Don't map any pcp to q if its size is not
-			 * even enough for min frame size, ie the
-			 * q cannot receive any frame.
-			 */
-			if (pb->queue_size[q] < 2)
-				continue;
-
-			/* Map next_pcp and all lower pcp's to q */
-			for (j = next_pcp; j >= 0; j--)
-				prueth->pcp_rxq_map[j] = q;
-
-			/* Prepare next pcp to map, ie. 2 lower than current
-			 * Thus if there is an eligible queue to map to, all
-			 * pcp's that are at least 2 lower than current one
-			 * will be mapped to that queue.
-			 */
-			next_pcp -= 2;
-		}
-	}
-
-	for (j = 0; j < NUM_VLAN_PCP; j++) {
-		if (prueth->pcp_rxq_map[j] > PRUETH_QUEUE4)
-			prueth->pcp_rxq_map[j] = PRUETH_QUEUE4;
-
-		rxq_mask |= BIT(prueth->pcp_rxq_map[j]);
-	}
-
-	/* make sure the default lowest priority queue
-	 * is included
-	 */
-	rxq_mask |= BIT(PRUETH_QUEUE4);
-
-	/* Update the rx queue ids array */
-	j = 0;
-	for (q = PRUETH_QUEUE1; q <= PRUETH_QUEUE4; q++) {
-		if (rxq_mask & BIT(q)) {
-			sw_port_rx_priority_queue_ids[j] = q;
-			j++;
-		}
-	}
-	sw_num_rx_queues = j;
-}
-
 static u16 port_queue_size(struct prueth *prueth, int p, int q)
 {
 	if (p < PRUETH_PORT_HOST || p > PRUETH_PORT_MII1 ||
@@ -3196,10 +3116,10 @@ static int emac_ndo_open(struct net_device *ndev)
 	struct prueth *prueth = emac->prueth;
 	unsigned long flags = (IRQF_TRIGGER_HIGH | IRQF_ONESHOT);
 	struct device_node *np = prueth->prueth_np;
-	int ret, rx_irq = emac->rx_irq, tx_irq = emac->tx_irq;
 	enum prueth_port port_id = emac->port_id, other_port_id;
 	struct device_node *eth_node = prueth->eth_node[port_id];
 	struct device_node *other_eth_node;
+	int ret;
 
 	/* Check for sanity of feature flag */
 	if (PRUETH_HAS_HSR(prueth) &&
@@ -3223,19 +3143,14 @@ static int emac_ndo_open(struct net_device *ndev)
 		return -EINVAL;
 	}
 
-	if (PRUETH_HAS_SWITCH(prueth)) {
-		flags |= IRQF_SHARED;
-		tx_irq = emac->sw_tx_irq;
-		rx_irq = emac->sw_rx_irq;
-	}
-
-	ret = request_irq(rx_irq, emac_rx_hardirq, flags,
+	ret = request_irq(emac->rx_irq, emac_rx_hardirq, flags,
 			  ndev->name, ndev);
 	if (ret) {
 		netdev_err(ndev, "unable to request RX IRQ\n");
 		return ret;
 	}
-	ret = request_irq(tx_irq, emac_tx_hardirq, flags,
+
+	ret = request_irq(emac->tx_irq, emac_tx_hardirq, flags,
 			  ndev->name, ndev);
 	if (ret) {
 		netdev_err(ndev, "unable to request TX IRQ\n");
@@ -3256,16 +3171,20 @@ static int emac_ndo_open(struct net_device *ndev)
 	if (!prueth->emac_configured) {
 		if (PRUETH_HAS_HSR(prueth))
 			prueth->hsr_mode = MODEH;
-		prueth_of_get_queue_sizes(prueth, np, PRUETH_PORT_HOST);
-		prueth_of_get_queue_sizes(prueth, eth_node, port_id);
+		ret = prueth_of_get_queue_sizes(prueth, np, PRUETH_PORT_HOST);
+		if (ret < 0)
+			goto free_irq;
+		ret = prueth_of_get_queue_sizes(prueth, eth_node, port_id);
+		if (ret < 0)
+			goto free_irq;
 		other_port_id = (port_id == PRUETH_PORT_MII0) ?
 				PRUETH_PORT_MII1 : PRUETH_PORT_MII0;
 		other_emac = prueth->emac[other_port_id];
 		other_eth_node = prueth->eth_node[other_port_id];
-		prueth_of_get_queue_sizes(prueth, other_eth_node,
-					  other_port_id);
-		if (PRUETH_HAS_RED(prueth))
-			prueth_of_get_pcp_rxq_map(prueth, np);
+		ret = prueth_of_get_queue_sizes(prueth, other_eth_node,
+						other_port_id);
+		if (ret < 0)
+			goto free_irq;
 
 		prueth_init_mmap_configs(prueth);
 
@@ -3338,9 +3257,9 @@ static int emac_ndo_open(struct net_device *ndev)
 		prueth_hsr_prp_debugfs_term(prueth);
 free_irq:
 	mutex_unlock(&prueth->mlock);
-	free_irq(tx_irq, ndev);
+	free_irq(emac->tx_irq, ndev);
 free_rx_irq:
-	free_irq(rx_irq, ndev);
+	free_irq(emac->rx_irq, ndev);
 
 	return ret;
 }
@@ -3350,8 +3269,8 @@ static int sw_emac_pru_stop(struct prueth_emac *emac, struct net_device *ndev)
 	struct prueth *prueth = emac->prueth;
 
 	prueth->emac_configured &= ~BIT(emac->port_id);
-	free_irq(emac->sw_tx_irq, emac->ndev);
-	free_irq(emac->sw_rx_irq, emac->ndev);
+	free_irq(emac->tx_irq, emac->ndev);
+	free_irq(emac->rx_irq, emac->ndev);
 
 	/* another emac is still in use, don't stop the PRUs */
 	if (prueth->emac_configured)
@@ -3444,16 +3363,13 @@ static u16 prueth_get_tx_queue_id(struct prueth *prueth, struct sk_buff *skb)
 	u16 vlan_tci, pcp;
 	int err;
 
-	if (!PRUETH_HAS_SWITCH(prueth))
-		return PRUETH_QUEUE4;
-
 	err = vlan_get_tag(skb, &vlan_tci);
 	if (likely(err))
-		return PRUETH_QUEUE4;
-
-	pcp = (vlan_tci & VLAN_PRIO_MASK) >> VLAN_PRIO_SHIFT;
+		pcp = 0;
+	else
+		pcp = (vlan_tci & VLAN_PRIO_MASK) >> VLAN_PRIO_SHIFT;
 
-	return sw_pcp_tx_priority_queue_map[pcp];
+	return emac_pcp_tx_priority_queue_map[pcp];
 }
 
 /**
@@ -3974,23 +3890,6 @@ static int prueth_netdev_init(struct prueth *prueth,
 		goto free;
 	}
 
-	if (PRUETH_HAS_SWITCH(prueth)) {
-		emac->sw_rx_irq = of_irq_get_byname(eth_node, "red-rx");
-		if (emac->sw_rx_irq < 0) {
-			ret = emac->sw_rx_irq;
-			if (ret != -EPROBE_DEFER)
-				dev_err(prueth->dev, "could not get switch rx irq\n");
-			goto free;
-		}
-		emac->sw_tx_irq = of_irq_get_byname(eth_node, "red-tx");
-		if (emac->sw_tx_irq < 0) {
-			ret = emac->sw_tx_irq;
-			if (ret != -EPROBE_DEFER)
-				dev_err(prueth->dev, "could not get switch tx irq\n");
-			goto free;
-		}
-	}
-
 	emac->msg_enable = netif_msg_init(debug_level, PRUETH_EMAC_DEBUG);
 	spin_lock_init(&emac->lock);
 	/* get mac address from DT and set private and netdev addr */
-- 
1.9.1

