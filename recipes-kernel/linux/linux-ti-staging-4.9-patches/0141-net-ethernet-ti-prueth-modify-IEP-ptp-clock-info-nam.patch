From f29623c97313882c7a1659c845e98ae229f29d11 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Wed, 20 Dec 2017 02:37:58 -0500
Subject: [PATCH 141/143] net: ethernet: ti: prueth: modify IEP ptp clock info
 name

On some platforms such as AM571x, there are two instances
of ICSS and hence two instances of IEP and IEP ptp clock
drivers. This patch modifies the IEP ptp clock name to be
ICSS instance specific so that when the clock_name being
looked up in driver sys class, one can distinguish which
IEP ptp clock instance is for which ICSS instance.

Example:

$ cat /sys/class/ptp/ptp2/clock_name
PRUSS1 timer

$ cat /sys/class/ptp/ptp1/clock_name
PRUSS2 timer

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
---
 drivers/net/ethernet/ti/iep.c    | 5 +++--
 drivers/net/ethernet/ti/iep.h    | 2 +-
 drivers/net/ethernet/ti/prueth.c | 3 ++-
 3 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/ti/iep.c b/drivers/net/ethernet/ti/iep.c
index 8aabe5a..154689a 100644
--- a/drivers/net/ethernet/ti/iep.c
+++ b/drivers/net/ethernet/ti/iep.c
@@ -707,7 +707,6 @@ static long iep_overflow_check(struct ptp_clock_info *ptp)
 
 static struct ptp_clock_info iep_info = {
 	.owner		= THIS_MODULE,
-	.name		= "PRUSS timer",
 	.max_adj	= 1000000,
 	.n_ext_ts	= 0,
 	.n_per_out	= 0,
@@ -982,7 +981,7 @@ static int iep_get_pps_extts_pins(struct iep *iep)
 }
 
 struct iep *iep_create(struct device *dev, void __iomem *sram,
-		       void __iomem *iep_reg)
+		       void __iomem *iep_reg, int pruss_id)
 {
 	struct iep *iep;
 
@@ -1002,6 +1001,8 @@ struct iep *iep_create(struct device *dev, void __iomem *sram,
 	iep->cc.read = iep_cc_read;
 	iep->cc.mask = CLOCKSOURCE_MASK(64);
 	iep->info = iep_info;
+	snprintf(iep->info.name, sizeof(iep->info.name),
+		 "PRUSS%d timer", pruss_id);
 
 	iep_get_pps_extts_pins(iep);
 	if (iep->info.pps && iep->info.n_ext_ts)
diff --git a/drivers/net/ethernet/ti/iep.h b/drivers/net/ethernet/ti/iep.h
index 3b4bfea..0e8b98e 100644
--- a/drivers/net/ethernet/ti/iep.h
+++ b/drivers/net/ethernet/ti/iep.h
@@ -139,6 +139,6 @@ struct iep {
 int iep_register(struct iep *iep);
 void iep_unregister(struct iep *iep);
 struct iep *iep_create(struct device *dev, void __iomem *sram,
-		       void __iomem *iep_reg);
+		       void __iomem *iep_reg, int pruss_id);
 void iep_release(struct iep *iep);
 #endif
diff --git a/drivers/net/ethernet/ti/prueth.c b/drivers/net/ethernet/ti/prueth.c
index 45f7ba9..fb6a4fa 100644
--- a/drivers/net/ethernet/ti/prueth.c
+++ b/drivers/net/ethernet/ti/prueth.c
@@ -4735,7 +4735,8 @@ static int prueth_probe(struct platform_device *pdev)
 
 	prueth->iep = iep_create(prueth->dev,
 				 prueth->mem[PRUETH_MEM_SHARED_RAM].va,
-				 prueth->mem[PRUETH_MEM_IEP].va);
+				 prueth->mem[PRUETH_MEM_IEP].va,
+				 prueth->pruss_id);
 	if (IS_ERR(prueth->iep)) {
 		ret = PTR_ERR(prueth->iep);
 		goto netdev_exit;
-- 
1.9.1

