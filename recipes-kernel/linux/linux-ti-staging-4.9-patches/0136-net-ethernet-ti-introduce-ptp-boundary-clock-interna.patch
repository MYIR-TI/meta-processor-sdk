From 070bea0bb44fe7d80f8149d3220529a324042576 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Wed, 13 Dec 2017 20:40:19 -0500
Subject: [PATCH 136/140] net: ethernet: ti: introduce ptp boundary clock
 internal sync monitor driver

On some of TI's platforms, more than one timing capable modules are
included. Consider, for example, the CPTS and the two IEP modules on
AM57xx platforms. When these timing modules participate in a PTP
boundary clock (BC) functionality, the PTP clocks implemented by these
modules need to be internally synchronized to the same PTP time of the
PTP domain in which the BC participates. If the internal sync is done
by using the 1PPS generated by the timing modules, it needs to make
sure that only one such module is generating 1PPS at any given
instant of time, for otherwise the SoC life may be damaged over time
when more than one timing module has output signal going against each
other. It is not suffice to rely on the application that implements
that PTP boundary clock software functionality to ensure the one
out-going PPS policy for user may "accidentally" issue PPS enablement
outside of the PTP BC application, for example, through sysfs.

This patch introduces a small driver so that the driver of each BC
participating timing module needs to get permission from this driver
before it can enable its PPS.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
---
 drivers/net/ethernet/ti/Kconfig  |  11 ++++
 drivers/net/ethernet/ti/Makefile |   1 +
 drivers/net/ethernet/ti/ptp_bc.c | 123 +++++++++++++++++++++++++++++++++++++++
 drivers/net/ethernet/ti/ptp_bc.h |  32 ++++++++++
 4 files changed, 167 insertions(+)
 create mode 100644 drivers/net/ethernet/ti/ptp_bc.c
 create mode 100644 drivers/net/ethernet/ti/ptp_bc.h

diff --git a/drivers/net/ethernet/ti/Kconfig b/drivers/net/ethernet/ti/Kconfig
index 5445826..faef48a 100644
--- a/drivers/net/ethernet/ti/Kconfig
+++ b/drivers/net/ethernet/ti/Kconfig
@@ -173,4 +173,15 @@ config TI_PRUETH
 	---help---
 	  Support EMAC over PRUSS.
 
+config TI_PTP_BC
+	tristate "TI Boundary Clock Support"
+	depends on TI_CPSW || TI_PRUETH
+	select PTP_1588_CLOCK
+	---help---
+	  This driver supports PTP boundary clock that includes more
+	  than one physical clock, such as CPTS and ICSS-IEP, as its
+	  constituent clocks with pps internal sync capability. It
+	  makes sure that no more than one constituent clock enables
+	  pps for internal sync purpose at any given instant of time.
+
 endif # NET_VENDOR_TI
diff --git a/drivers/net/ethernet/ti/Makefile b/drivers/net/ethernet/ti/Makefile
index b418668..80ed944 100644
--- a/drivers/net/ethernet/ti/Makefile
+++ b/drivers/net/ethernet/ti/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_TI_DAVINCI_CPDMA) += davinci_cpdma.o
 obj-$(CONFIG_TI_CPSW_PHY_SEL) += cpsw-phy-sel.o
 obj-$(CONFIG_TI_CPSW_ALE) += cpsw_ale.o
 obj-$(CONFIG_TI_CPTS) += cpts.o
+obj-$(CONFIG_TI_PTP_BC) += ptp_bc.o
 obj-$(CONFIG_TI_CPSW) += ti_cpsw.o
 ti_cpsw-y := cpsw.o
 
diff --git a/drivers/net/ethernet/ti/ptp_bc.c b/drivers/net/ethernet/ti/ptp_bc.c
new file mode 100644
index 0000000..f95b396
--- /dev/null
+++ b/drivers/net/ethernet/ti/ptp_bc.c
@@ -0,0 +1,123 @@
+/*
+ * TI PTP Boundary Clock Internal Sync Monitor
+ *
+ * Copyright (C) 2015-2017 Texas Instruments Incorporated - http://www.ti.com
+
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include "ptp_bc.h"
+
+#define PTP_BC_MAGIC 0x1ffffff
+
+static unsigned int bc_clocks_registered;
+static u32 bc_clk_sync_enabled;
+static spinlock_t bc_sync_lock; /* protects bc var */
+static bool ptp_bc_initialized;
+
+bool ptp_bc_clock_sync_enable(int clkid, int enable)
+{
+	unsigned long flags;
+	bool allow = false;
+
+	if (clkid < 0 || clkid >= bc_clocks_registered)
+		return false;
+
+	spin_lock_irqsave(&bc_sync_lock, flags);
+
+	if (enable) {
+		if (bc_clk_sync_enabled) {
+			/* request to enable but someone has already enabled
+			 * regardless this someone is the requesting clkid
+			 * itself or not.
+			 */
+			allow = false;
+		} else {
+			/* request to enable and none is enabled */
+			bc_clk_sync_enabled |= BIT(clkid);
+			allow = true;
+		}
+	} else {
+		bc_clk_sync_enabled &= ~BIT(clkid);
+		allow = true;
+	}
+
+	spin_unlock_irqrestore(&bc_sync_lock, flags);
+
+	pr_info("ptp_bc_clk_sync_enable: Req clk=%d, %s, %s. ClkSyncEn(mask): 0x%08x\n",
+		clkid,
+		(enable ? "on" : "off"),
+		(allow  ? "OK" : "Failed"),
+		bc_clk_sync_enabled);
+
+	return allow;
+}
+EXPORT_SYMBOL_GPL(ptp_bc_clock_sync_enable);
+
+int ptp_bc_clock_register(void)
+{
+	unsigned long flags;
+	int id = -1;
+
+	if (!ptp_bc_initialized) {
+		pr_info("ptp_bc error: NOT initialized.\n");
+		return -1;
+	}
+
+	spin_lock_irqsave(&bc_sync_lock, flags);
+	if (bc_clocks_registered >= 3) {
+		pr_err("ptp_bc error: max clocks allowed %d\n", 3);
+		goto out;
+	}
+
+	id = bc_clocks_registered++;
+
+out:
+	spin_unlock_irqrestore(&bc_sync_lock, flags);
+	return id;
+}
+EXPORT_SYMBOL_GPL(ptp_bc_clock_register);
+
+static int ptp_bc_probe(struct platform_device *pdev)
+{
+	spin_lock_init(&bc_sync_lock);
+	bc_clk_sync_enabled = 0;
+	bc_clk_sync_enabled = 0;
+	ptp_bc_initialized  = true;
+	return 0;
+}
+
+static int ptp_bc_remove(struct platform_device *pdev)
+{
+	ptp_bc_initialized = false;
+	return 0;
+}
+
+static const struct of_device_id ptp_bc_dt_match[] = {
+	{ .compatible = "ti,am57-bc", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, prueth_dt_match);
+
+static struct platform_driver ptp_bc_driver = {
+	.probe = ptp_bc_probe,
+	.remove = ptp_bc_remove,
+	.driver = {
+		.name = "ptp bc",
+		.of_match_table = ptp_bc_dt_match,
+	},
+};
+module_platform_driver(ptp_bc_driver);
+
+MODULE_AUTHOR("WingMan Kwok <w-kwok2@ti.com>");
+MODULE_DESCRIPTION("TI PTP Boundary Clock Internal Sync Monitor");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/net/ethernet/ti/ptp_bc.h b/drivers/net/ethernet/ti/ptp_bc.h
new file mode 100644
index 0000000..a33b3fc
--- /dev/null
+++ b/drivers/net/ethernet/ti/ptp_bc.h
@@ -0,0 +1,32 @@
+/*
+ * Texas Instruments Ethernet Switch Driver
+ *
+ * Copyright (C) 2017 Texas Instruments
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#ifndef _TI_PTP_BC_H_
+#define _TI_PTP_BC_H_
+
+#if IS_ENABLED(CONFIG_TI_PTP_BC)
+int ptp_bc_clock_register(void);
+bool ptp_bc_clock_sync_enable(int clkid, int enable);
+#else
+static int ptp_bc_clock_register(void)
+{
+	return -1;
+}
+
+static bool ptp_bc_clock_sync_enable(int clkid, int enable)
+{
+	return true;
+}
+#endif
+#endif
-- 
1.9.1

