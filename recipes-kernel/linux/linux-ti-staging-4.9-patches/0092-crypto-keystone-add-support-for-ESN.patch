From 8b850009bbc5d6842c38c14c397e2cc66b9ce4ff Mon Sep 17 00:00:00 2001
From: Vitaly Andrianov <vitalya@ti.com>
Date: Tue, 26 Sep 2017 09:43:44 -0400
Subject: [PATCH 92/92] crypto:keystone:add support for ESN

 Added support for ESN.

Signed-off-by: Sudhanand Dayalan <s-dayalan@ti.com>
Signed-off-by: Brian Wheeler <brian.wheeler@nokia.com>
Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
---
 drivers/crypto/keystone-sa-lld.c   |  2 +-
 drivers/crypto/keystone-sa-utils.c | 74 ++++++++++++++++++++++++++------------
 2 files changed, 53 insertions(+), 23 deletions(-)

diff --git a/drivers/crypto/keystone-sa-lld.c b/drivers/crypto/keystone-sa-lld.c
index 3cd02de..5f2bfd2 100644
--- a/drivers/crypto/keystone-sa-lld.c
+++ b/drivers/crypto/keystone-sa-lld.c
@@ -539,7 +539,7 @@ int sa_set_sc_enc(u16 alg_id, const u8 *key, u16 key_sz,
 		break;
 
 	case SA_EALG_ID_GCM:
-		aad_len = 8;	/* ESN not supported */
+		aad_len = 8;	/* Default AAD size is 8 */
 
 		mci = (enc) ? sa_mci_tbl.aes_enc[SA_ENG_ALGO_GCM][key_idx] :
 			sa_mci_tbl.aes_dec[SA_ENG_ALGO_GCM][key_idx];
diff --git a/drivers/crypto/keystone-sa-utils.c b/drivers/crypto/keystone-sa-utils.c
index ca0019e..7fc1f73 100644
--- a/drivers/crypto/keystone-sa-utils.c
+++ b/drivers/crypto/keystone-sa-utils.c
@@ -514,14 +514,10 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 		cmdl[4] = SA_MK_U32(aad[0], aad[1], aad[2], aad[3]);
 		cmdl[5] = SA_MK_U32(aad[4], aad[5], aad[6], aad[7]);
 
+		/* ESN */
 		if (aad_size == 12) {
-			/*
-			 * Uncomment this when support for
-			 * ESN is added
-			 * cmdl[6] =
-			 * SA_MK_U32(aad[8], aad[9], aad[10], aad[11]);
-			 */
-			dev_err(dev, "unsupported AAD size (%d)\n", aad_size);
+			cmdl[6] =
+				SA_MK_U32(aad[8], aad[9], aad[10], aad[11]);
 		}
 
 		/* Option 3: AES CTR IV (salt|IV|1) */
@@ -532,11 +528,8 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 	case SA_MODE_GMAC:
 		/* Update  Command label header (8 bytes) */
 
-		/* Payload Length + IV Size - Data Appended */
-		cmdl[0] |= enc_size;
-
-		/* Auth offset - Data Appended */
-		cmdl[1] |= (16 << 24);	/* AAD Size + IV (remaining) */
+		/* Auth offset - 16 bytes */
+		cmdl[1] |= (16 << 24);
 
 		/* Option 1: Store Authentication length (8 byte) */
 		cmdl[3] |= (auth_size << 3);/* Payload Length + AAD + IV */
@@ -545,12 +538,20 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 		cmdl[4] = SA_MK_U32(aad[0], aad[1], aad[2], aad[3]);
 		cmdl[5] = SA_MK_U32(aad[4], aad[5], aad[6], aad[7]);
 
+		/* ESN */
 		if (aad_size == 12) {
-			/*
-			 *  Check for ESN
-			 */
-			dev_err(dev, "unsupported AAD size (%d)\n", aad_size);
+
+			/* Payload Length + Remaining IV Size */
+			cmdl[0] |= enc_size + 4;
+
+			cmdl[6] = SA_MK_U32(aad[8], aad[9], aad[10], aad[11]);
+			cmdl[7] = SA_MK_U32(enc_iv[0], enc_iv[1],
+					    enc_iv[2], enc_iv[3]);
 		} else {
+
+			/* Payload Length */
+			cmdl[0] |= enc_size;
+
 			/* Append IV */
 			cmdl[6] = SA_MK_U32(enc_iv[0], enc_iv[1],
 					enc_iv[2], enc_iv[3]);
@@ -559,10 +560,10 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 		}
 
 		/* Option 3: AES CTR IV (salt|IV|1) */
-		cmdl[9] =
-			SA_MK_U32(enc_iv[0], enc_iv[1], enc_iv[2], enc_iv[3]);
-		cmdl[10] =
-			SA_MK_U32(enc_iv[4], enc_iv[5], enc_iv[6], enc_iv[7]);
+		cmdl[9] = SA_MK_U32(enc_iv[0], enc_iv[1],
+				    enc_iv[2], enc_iv[3]);
+		cmdl[10] = SA_MK_U32(enc_iv[4], enc_iv[5],
+				     enc_iv[6], enc_iv[7]);
 		break;
 
 	case SA_MODE_CCM:
@@ -1390,10 +1391,32 @@ static int sa_aead_perform(struct aead_request *req, u8 *iv, bool enc)
 	}
 
 	/* Parse out AAD values */
-	if ((sa_ctx->cmdl_upd_info.submode == SA_MODE_GCM) ||
-		(sa_ctx->cmdl_upd_info.submode == SA_MODE_GMAC))
+	if (sa_ctx->cmdl_upd_info.submode == SA_MODE_GCM) {
 		sa_gcm_get_aad(req, aad, &aad_len);
 
+		/*
+		 * Set the AAD size to the configured
+		 * AAD size when first packet is received.
+		 * AAD size CANNOT be changed after this.
+		 */
+		if (sa_ctx->cmdl_upd_info.aad.index == 0) {
+			sa_ctx->cmdl_upd_info.aad.index = 0xFF;
+			sa_ctx->cmdl_upd_info.aad.size = aad_len;
+			sa_ctx->sc[SA_CTX_PHP_PE_CTX_SZ + 64 + 24] =
+				(aad_len << 3);
+		}
+
+		if (sa_ctx->cmdl_upd_info.aad.size != aad_len) {
+			atomic_inc(&pdata->stats.tx_dropped);
+			dev_err(sa_ks2_dev, "ERROR: AAD Size Mismatch (%d, %d)\n",
+				aad_len,
+				sa_ctx->cmdl_upd_info.aad.size);
+			return -EPERM;
+		}
+	} else if (sa_ctx->cmdl_upd_info.submode == SA_MODE_GMAC) {
+		sa_gcm_get_aad(req, aad, &aad_len);
+	}
+
 	/* Allocate descriptor & submit packet */
 	sg_nents = sg_count(req->src, auth_len);
 
@@ -1532,9 +1555,16 @@ static int sa_aead_gcm_setkey(struct crypto_aead *authenc,
 		memset(&ctx->enc.cmdl_upd_info, 0,
 				sizeof(struct sa_cmdl_upd_info));
 		ctx->enc.cmdl_upd_info.submode = SA_MODE_GCM;
+		/* Default AAD size to 8 */
+		ctx->enc.cmdl_upd_info.aad.size = 8;
+		ctx->enc.cmdl_upd_info.aad.index = 0;
+
 		memset(&ctx->dec.cmdl_upd_info, 0,
 				sizeof(struct sa_cmdl_upd_info));
 		ctx->dec.cmdl_upd_info.submode = SA_MODE_GCM;
+		/* Default AAD size to 8 */
+		ctx->dec.cmdl_upd_info.aad.size = 8;
+		ctx->dec.cmdl_upd_info.aad.index = 0;
 	} else {
 		/*  GMAC  */
 		auth_eng = sa_get_engine_info(aalg_id);
-- 
1.9.1

