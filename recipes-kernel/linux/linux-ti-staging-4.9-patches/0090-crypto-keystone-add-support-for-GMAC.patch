From 813ee4bcc33e022ce9e166a7c9a8e7c1db9d5b26 Mon Sep 17 00:00:00 2001
From: Vitaly Andrianov <vitalya@ti.com>
Date: Tue, 26 Sep 2017 09:41:48 -0400
Subject: [PATCH 90/92] crypto:keystone:add support for GMAC

Added support for AES-GMAC.

Signed-off-by: Sudhanand Dayalan <s-dayalan@ti.com>
Signed-off-by: Brian Wheeler <brian.wheeler@nokia.com>
Signed-off-by: Vitaly Andrianov <vitalya@ti.com>
---
 drivers/crypto/keystone-sa-lld.c   |  10 +-
 drivers/crypto/keystone-sa-utils.c | 227 ++++++++++++++++++++++++++++---------
 drivers/crypto/keystone-sa.h       |  10 +-
 3 files changed, 193 insertions(+), 54 deletions(-)

diff --git a/drivers/crypto/keystone-sa-lld.c b/drivers/crypto/keystone-sa-lld.c
index fd841f2..b01b1b1 100644
--- a/drivers/crypto/keystone-sa-lld.c
+++ b/drivers/crypto/keystone-sa-lld.c
@@ -73,6 +73,8 @@ void sa_conv_calg_to_salg(const char *cra_name, int *ealg_id, int *aalg_id)
 		*aalg_id = SA_AALG_ID_AES_XCBC;
 	} else if (!strcmp(cra_name, "rfc4106(gcm(aes))")) {
 		*ealg_id = SA_EALG_ID_GCM;
+	} else if (!strcmp(cra_name, "rfc4543(gcm(aes))")) {
+		*aalg_id = SA_AALG_ID_GMAC;
 	} else if (!strcmp(cra_name, "cbc(aes)")) {
 		*ealg_id = SA_EALG_ID_AES_CBC;
 	} else if (!strcmp(cra_name, "cbc(des3_ede)")) {
@@ -104,7 +106,7 @@ struct sa_eng_info sa_eng_info_tbl[SA_ALG_ID_LAST] = {
 	[SA_AALG_ID_HMAC_SHA1]	= { SA_ENG_ID_AM1, SA_CTX_AUTH_TYPE2_SZ},
 	[SA_AALG_ID_HMAC_SHA2_224] = { SA_ENG_ID_NONE, 0},
 	[SA_AALG_ID_HMAC_SHA2_256] = { SA_ENG_ID_NONE, 0},
-	[SA_AALG_ID_GMAC]	= { SA_ENG_ID_NONE, 0},
+	[SA_AALG_ID_GMAC]	= { SA_ENG_ID_EM1, SA_CTX_ENC_TYPE2_SZ},
 	[SA_AALG_ID_CMAC]	= {SA_ENG_ID_EM1, SA_CTX_AUTH_TYPE1_SZ},
 	[SA_AALG_ID_CBC_MAC]	= { SA_ENG_ID_NONE, 0},
 	[SA_AALG_ID_AES_XCBC]	= {SA_ENG_ID_EM1, SA_CTX_AUTH_TYPE1_SZ}
@@ -149,6 +151,7 @@ int sa_get_hash_size(u16 aalg_id)
 
 	case SA_AALG_ID_AES_XCBC:
 	case SA_AALG_ID_CMAC:
+	case SA_AALG_ID_GMAC:
 		hash_size = AES_BLOCK_SIZE;
 		break;
 
@@ -319,9 +322,12 @@ int sa_set_sc_enc(u16 alg_id, const u8 *key, u16 key_sz,
 			sa_mci_tbl.aes_dec[SA_ENG_ALGO_GCM][key_idx];
 		/* Set AAD length at byte offset 23 in Aux-1 */
 		sc_buf[SC_ENC_AUX1_OFFSET + 23] = (aad_len << 3);
-		/* fall through to GMAC */
+		/* fall through to GMAC for hash */
 
 	case SA_AALG_ID_GMAC:
+		if (alg_id == SA_AALG_ID_GMAC)
+			mci = sa_mci_tbl.aes_enc[SA_ENG_ALGO_GMAC][key_idx];
+
 		sa_calc_ghash(key, (key_sz << 3), ghash);
 		/* copy GCM Hash in Aux-1 */
 		memcpy(&sc_buf[SC_ENC_AUX1_OFFSET], ghash, 16);
diff --git a/drivers/crypto/keystone-sa-utils.c b/drivers/crypto/keystone-sa-utils.c
index c0aa28c..16b9028 100644
--- a/drivers/crypto/keystone-sa-utils.c
+++ b/drivers/crypto/keystone-sa-utils.c
@@ -389,36 +389,63 @@ static int sa_format_cmdl_gcm(struct sa_cmdl_cfg *cfg, u8 *cmdl,
 	/* Clear the command label */
 	memset(cmdl, 0, (SA_MAX_CMDL_WORDS * sizeof(u32)));
 
-	/* Iniialize the command update structure */
-	memset(upd_info, 0, sizeof(*upd_info));
-	upd_info->submode = SA_MODE_GCM;
+	if (upd_info->submode == SA_MODE_GCM) {
+		/* Construct Command label header */
+		cmdl[SA_CMDL_OFFSET_NESC] = SA_ENG_ID_FINAL;
+		cmdl[SA_CMDL_OFFSET_LABEL_LEN] = SA_GCM_SIZE;
+		cmdl[SA_CMDL_OFFSET_OPTION_CTRL1] = SA_GCM_OPT1;
+		cmdl[SA_CMDL_OFFSET_OPTION_CTRL2] = SA_GCM_OPT2;
+		cmdl[SA_CMDL_OFFSET_OPTION_CTRL3] = SA_GCM_OPT3;
+
+		/* Option 1: Total Encryption Length (8 bytes) */
 
-	/* Construct Command label header */
-	cmdl[SA_CMDL_OFFSET_NESC] = SA_ENG_ID_FINAL;
-	cmdl[SA_CMDL_OFFSET_LABEL_LEN] = SA_GCM_SIZE;
-	cmdl[SA_CMDL_OFFSET_OPTION_CTRL1] = SA_GCM_OPT1;
-	cmdl[SA_CMDL_OFFSET_OPTION_CTRL2] = SA_GCM_OPT2;
-	cmdl[SA_CMDL_OFFSET_OPTION_CTRL3] = SA_GCM_OPT3;
+		/* Option 2: AAD (16 bytes) */
 
-	/* Option 1: Total Encryption Length (8 bytes) */
+		/* Option 3: AES-CTR IV (salt (4 bytes) | IV (8 bytes) | 0x1) */
+		/* Fill in the Salt Value */
+		word_ptr[8] = cfg->salt;
 
-	/* Option 2: AAD (16 bytes) */
+		/*
+		 * Format the Command label into 32bit CPU words
+		 * from a big-endian stream
+		 */
+		offset = roundup(SA_GCM_SIZE, 8);
 
-	/* Option 3: AES-CTR IV (salt (4 bytes) | IV (8 bytes) | 0x1) */
-	/* Fill in the Salt Value */
-	word_ptr[8] = cfg->salt;
+		for (i = 0; i < offset/4; i++)
+			word_ptr[i] = be32_to_cpu(word_ptr[i]);
 
-	/*
-	 * Format the Command label into 32bit CPU words
-	 * from a big-endian stream
-	 */
-	offset = roundup(SA_GCM_SIZE, 8);
+		word_ptr[11] = 1;
+		return offset;
+	} else if (upd_info->submode == SA_MODE_GMAC) {
+		/* Construct Command label header */
+		cmdl[SA_CMDL_OFFSET_NESC]         = SA_ENG_ID_FINAL;
+		cmdl[SA_CMDL_OFFSET_LABEL_LEN]    = SA_GMAC_SIZE;
+		cmdl[SA_CMDL_OFFSET_OPTION_CTRL1] = SA_GMAC_OPT1;
+		cmdl[SA_CMDL_OFFSET_OPTION_CTRL2] = SA_GMAC_OPT2;
+		cmdl[SA_CMDL_OFFSET_OPTION_CTRL3] = SA_GMAC_OPT3;
 
-	for (i = 0; i < offset/4; i++)
-		word_ptr[i] = be32_to_cpu(word_ptr[i]);
+		/* Option 1: Total Authentication + Payload Length (8 bytes) */
 
-	word_ptr[11] = 1;
-	return offset;
+		/* Option 2: AAD | Payload (16 bytes) */
+
+		/* Option 3: AES-CTR IV (salt (4 bytes) | IV (8 bytes) | 0x1) */
+		/* Fill in the Salt Value */
+		word_ptr[8] = cfg->salt;
+
+		/*
+		 * Format the Command label into 32bit CPU words
+		 * from a big-endian stream
+		 */
+		offset = roundup(SA_GMAC_SIZE, 8);
+		for (i = 0; i < offset/4; i++)
+			word_ptr[i] = be32_to_cpu(word_ptr[i]);
+
+		word_ptr[11] = 1;
+		return offset;
+	}
+
+	dev_err(sa_ks2_dev, " (%s): Unsupported mode\n", __func__);
+	return -1;
 }
 
 static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
@@ -462,8 +489,7 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 			cmdl[upd_info->auth_size.index] &= 0xffff0000;
 			cmdl[upd_info->auth_size.index] |= auth_size;
 			cmdl[upd_info->auth_offset.index] &= 0x00ffffff;
-			cmdl[upd_info->auth_offset.index] |=
-					((u32)auth_offset << 24);
+			cmdl[upd_info->auth_offset.index] |= 0;
 
 			if (upd_info->flags & SA_CMDL_UPD_AUTH_IV) {
 				sa_copy_iv(&cmdl[upd_info->auth_iv.index],
@@ -506,8 +532,43 @@ static inline void sa_copy_iv(u32 *out, const u8 *iv, bool size16)
 		cmdl[10] = SA_MK_U32(enc_iv[4], enc_iv[5], enc_iv[6], enc_iv[7]);
 		break;
 
-	case SA_MODE_CCM:
 	case SA_MODE_GMAC:
+		/* Update  Command label header (8 bytes) */
+
+		/* Payload Length + IV Size - Data Appended */
+		cmdl[0] |= enc_size;
+
+		/* Auth offset - Data Appended */
+		cmdl[1] |= (16 << 24);
+
+		/* Option 1: Store Authentication length (8 byte) */
+		cmdl[3] |= (auth_size << 3);	/* Payload Length + AAD + IV */
+
+		/* Option 2: Store AAD with zero padding (16 bytes) */
+		cmdl[4] = SA_MK_U32(aad[0], aad[1], aad[2], aad[3]);
+		cmdl[5] = SA_MK_U32(aad[4], aad[5], aad[6], aad[7]);
+
+		if (aad_size == 12) {
+			/*
+			 *  Check for ESN
+			 */
+			dev_err(dev, "unsupported AAD size (%d)\n", aad_size);
+		} else {
+			/* Append IV */
+			cmdl[6] = SA_MK_U32(enc_iv[0], enc_iv[1],
+					enc_iv[2], enc_iv[3]);
+			cmdl[7] = SA_MK_U32(enc_iv[4], enc_iv[5],
+					enc_iv[6], enc_iv[7]);
+		}
+
+		/* Option 3: AES CTR IV (salt|IV|1) */
+		cmdl[9] = SA_MK_U32(enc_iv[0], enc_iv[1],
+				enc_iv[2], enc_iv[3]);
+		cmdl[10] = SA_MK_U32(enc_iv[4], enc_iv[5],
+				enc_iv[6], enc_iv[7]);
+		break;
+
+	case SA_MODE_CCM:
 	default:
 		dev_err(dev, "unsupported mode(%d)\n", upd_info->submode);
 		break;
@@ -576,8 +637,13 @@ int sa_init_sc(struct sa_ctx_info *ctx, const u8 *enc_key,
 
 	/* Determine the order of encryption & Authentication contexts */
 	if (enc || !use_enc) {
-		eng0_f = SA_CTX_SIZE_TO_DMA_SIZE(enc_eng->sc_size);
-		eng1_f = SA_CTX_SIZE_TO_DMA_SIZE(auth_eng->sc_size);
+		if (aalg_id == SA_AALG_ID_GMAC) {
+			eng0_f = SA_CTX_SIZE_TO_DMA_SIZE(auth_eng->sc_size);
+			eng1_f = SA_CTX_SIZE_TO_DMA_SIZE(enc_eng->sc_size);
+		} else {
+			eng0_f = SA_CTX_SIZE_TO_DMA_SIZE(enc_eng->sc_size);
+			eng1_f = SA_CTX_SIZE_TO_DMA_SIZE(auth_eng->sc_size);
+		}
 		enc_sc_offset = SA_CTX_PHP_PE_CTX_SZ;
 		auth_sc_offset = enc_sc_offset + enc_eng->sc_size;
 	} else {
@@ -594,6 +660,7 @@ int sa_init_sc(struct sa_ctx_info *ctx, const u8 *enc_key,
 	sc_buf[SA_CTX_SCCTL_OWNER_OFFSET] = 0;
 	/* SCCTL F/E control */
 	sc_buf[1] = SA_CTX_SCCTL_MK_DMA_INFO(php_f, eng0_f, eng1_f, php_e);
+
 	memcpy(&sc_buf[2], &sc_id, 2);
 	memcpy(&sc_buf[4], &ctx->sc_phys, 4);
 
@@ -629,7 +696,8 @@ int sa_init_sc(struct sa_ctx_info *ctx, const u8 *enc_key,
 	if (ealg_id == SA_EALG_ID_GCM) {
 		/* For GCM enc and dec performed by same engine */
 		first_engine = enc_eng->eng_id;
-	} else if (ealg_id == SA_EALG_ID_NULL)
+	} else if ((ealg_id == SA_EALG_ID_NULL) ||
+				(ealg_id == SA_EALG_ID_NONE))
 		first_engine = auth_eng->eng_id;
 	else
 		first_engine = enc ? enc_eng->eng_id : auth_eng->eng_id;
@@ -1301,7 +1369,7 @@ static int sa_aead_perform(struct aead_request *req, u8 *iv, bool enc)
 	u8 enc_offset;
 	int sg_nents;
 	int psdata_offset, ret = 0;
-	u8 auth_offset = 0;
+	u8 auth_offset = req->assoclen;
 	u8 *auth_iv = NULL;
 	u8 aad[16];
 	u8 aad_len = 0;
@@ -1326,7 +1394,8 @@ static int sa_aead_perform(struct aead_request *req, u8 *iv, bool enc)
 	}
 
 	/* Parse out AAD values */
-	if (sa_ctx->cmdl_upd_info.submode == SA_MODE_GCM)
+	if ((sa_ctx->cmdl_upd_info.submode == SA_MODE_GCM) ||
+		(sa_ctx->cmdl_upd_info.submode == SA_MODE_GMAC))
 		sa_gcm_get_aad(req, aad, &aad_len);
 
 	/* Allocate descriptor & submit packet */
@@ -1436,39 +1505,71 @@ static int sa_aead_gcm_setkey(struct crypto_aead *authenc,
 {
 	struct sa_tfm_ctx *ctx = crypto_aead_ctx(authenc);
 	unsigned int enckey_len;
-	struct sa_eng_info *enc_eng;
+	struct sa_eng_info *enc_eng, *auth_eng;
 	int ealg_id, aalg_id, cmdl_len;
 	struct sa_cmdl_cfg cfg;
 	u8 const *enc_key;
 	const char *cra_name;
 	u32 *temp_key;
 
-	enckey_len = keylen - 4;
-	enc_key = key;
-	keylen -= 4;
-
 	cra_name = crypto_tfm_alg_name(crypto_aead_tfm(authenc));
 
 	sa_conv_calg_to_salg(cra_name, &ealg_id, &aalg_id);
-	enc_eng = sa_get_engine_info(ealg_id);
 
-	memset(&cfg, 0, sizeof(cfg));
-	cfg.enc_eng_id = enc_eng->eng_id;
-	cfg.iv_size = crypto_aead_ivsize(authenc);
-
-	/* Prpoerties not applicable to GCM */
-	cfg.aalg = SA_EALG_ID_NONE;
-	cfg.auth_eng_id = SA_ENG_ID_NONE;
-	cfg.akey = NULL;
-	cfg.akey_len = 0;
+	if (ealg_id != SA_EALG_ID_NONE) {
+		/*  GCM  */
+		enc_eng = sa_get_engine_info(ealg_id);
+		enckey_len = keylen - 4;
+		enc_key = key;
+
+		memset(&cfg, 0, sizeof(cfg));
+		cfg.enc_eng_id = enc_eng->eng_id;
+		cfg.iv_size = crypto_aead_ivsize(authenc);
+
+		/* Prpoerties not applicable to GCM */
+		cfg.aalg = SA_EALG_ID_NONE;
+		cfg.auth_eng_id = SA_ENG_ID_NONE;
+		cfg.akey = NULL;
+		cfg.akey_len = 0;
+
+		/* Iniialize the command update structure */
+		memset(&ctx->enc.cmdl_upd_info, 0,
+				sizeof(struct sa_cmdl_upd_info));
+		ctx->enc.cmdl_upd_info.submode = SA_MODE_GCM;
+		memset(&ctx->dec.cmdl_upd_info, 0,
+				sizeof(struct sa_cmdl_upd_info));
+		ctx->dec.cmdl_upd_info.submode = SA_MODE_GCM;
+	} else {
+		/*  GMAC  */
+		auth_eng = sa_get_engine_info(aalg_id);
+
+		memset(&cfg, 0, sizeof(cfg));
+		cfg.iv_size = crypto_aead_ivsize(authenc);
+		cfg.aalg = aalg_id;
+		cfg.auth_eng_id = auth_eng->eng_id;
+		cfg.akey = key;
+		cfg.akey_len = keylen - 4;
+
+		cfg.enc_eng_id = SA_ENG_ID_NONE;
+		enckey_len = 0;
+		enc_key = NULL;
+
+		/* Iniialize the command update structure */
+		memset(&ctx->enc.cmdl_upd_info, 0,
+				sizeof(struct sa_cmdl_upd_info));
+		ctx->enc.cmdl_upd_info.submode = SA_MODE_GMAC;
+		memset(&ctx->dec.cmdl_upd_info, 0,
+				sizeof(struct sa_cmdl_upd_info));
+		ctx->dec.cmdl_upd_info.submode = SA_MODE_GMAC;
+	}
 
 	/* Store Salt/NONCE value */
-	temp_key = (u32 *) &key[keylen];
+	temp_key = (u32 *) &key[keylen - 4];
 	cfg.salt = *temp_key;
 
 	/* Setup Encryption Security Context & Command label template */
-	if (sa_init_sc(&ctx->enc, enc_key, enckey_len, NULL,
-					0, cra_name, 1, &ctx->enc.epib[1]))
+	if (sa_init_sc(&ctx->enc, enc_key, enckey_len, cfg.akey,
+		       cfg.akey_len, cra_name, 1, &ctx->enc.epib[1]))
 		goto badkey;
 
 	cmdl_len = sa_format_cmdl_gcm(&cfg,
@@ -1480,8 +1581,8 @@ static int sa_aead_gcm_setkey(struct crypto_aead *authenc,
 	ctx->enc.cmdl_size = cmdl_len;
 
 	/* Setup Decryption Security Context & Command label template */
-	if (sa_init_sc(&ctx->dec, enc_key, enckey_len, NULL,
-					0, cra_name, 0, &ctx->dec.epib[1]))
+	if (sa_init_sc(&ctx->dec, enc_key, enckey_len, cfg.akey,
+		       cfg.akey_len, cra_name, 0, &ctx->dec.epib[1]))
 		goto badkey;
 
 	cmdl_len = sa_format_cmdl_gcm(&cfg,
@@ -1647,6 +1748,30 @@ static int sa_aead_gcm_setkey(struct crypto_aead *authenc,
 			.decrypt = sa_aead_decrypt,
 		}
 	},
+	{	.type = CRYPTO_ALG_TYPE_AEAD,
+		.alg.aead = {
+			.base = {
+				.cra_name = "rfc4543(gcm(aes))",
+				.cra_driver_name =
+					"rfc4543-gcm-aes-keystone-sa",
+				.cra_blocksize = AES_BLOCK_SIZE,
+				.cra_flags = CRYPTO_ALG_TYPE_AEAD |
+					CRYPTO_ALG_KERN_DRIVER_ONLY |
+					CRYPTO_ALG_ASYNC,
+				.cra_ctxsize = sizeof(struct sa_tfm_ctx),
+				.cra_module = THIS_MODULE,
+				.cra_alignmask = 0,
+				.cra_priority = 3000,
+			},
+			.ivsize = 8,
+			.maxauthsize = AES_BLOCK_SIZE,
+			.init = sa_cra_init_aead,
+			.exit = sa_exit_tfm_aead,
+			.setkey	= sa_aead_gcm_setkey,
+			.encrypt = sa_aead_encrypt,
+			.decrypt = sa_aead_decrypt,
+		}
+	},
 };
 
 /* Register the algorithms in crypto framework */
diff --git a/drivers/crypto/keystone-sa.h b/drivers/crypto/keystone-sa.h
index 258e306..3746c6f 100644
--- a/drivers/crypto/keystone-sa.h
+++ b/drivers/crypto/keystone-sa.h
@@ -125,7 +125,7 @@
 #define SA_CMD_SA1_OUT_EN	0x00000400
 #define SA_CMD_SA0_OUT_EN	0x00000800
 
-/* GCM OPeration Definitions */
+/* GCM Operation Definitions */
 #define SA_GCM_SIZE      48
 
 /*             OFFSET|LENGTH   (LENGTH - in number of bytes, 1 = 8 bytes) */
@@ -133,4 +133,12 @@
 #define SA_GCM_OPT2      (SA_CTX_ENC_AUX2_OFFSET | (16 >> 3))
 #define SA_GCM_OPT3      (SA_CTX_ENC_AUX3_OFFSET | (16 >> 3))
 
+/* GMAC Operation Definitions */
+#define SA_GMAC_SIZE      48
+
+/*             OFFSET|LENGTH   (LENGTH - in number of bytes, 1 = 8 bytes) */
+#define SA_GMAC_OPT1      ((SA_CTX_ENC_AUX1_OFFSET + 16) | (8 >> 3))
+#define SA_GMAC_OPT2      (SA_CTX_ENC_AUX2_OFFSET | (16 >> 3))
+#define SA_GMAC_OPT3      (SA_CTX_ENC_AUX3_OFFSET | (16 >> 3))
+
 #endif
-- 
1.9.1

