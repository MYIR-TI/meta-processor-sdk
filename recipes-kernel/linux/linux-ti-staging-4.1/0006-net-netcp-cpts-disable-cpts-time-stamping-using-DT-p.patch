From 5dbf8714913aa7515c36b426b886f22495feb87a Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Thu, 18 Feb 2016 10:11:19 -0500
Subject: [PATCH 6/6] net: netcp: cpts: disable cpts time stamping using DT
 property

Provide a DT property to disable hw time stamp feature in CPTS. Typically
if Phy time stamp is available, we can avoid the rx/tx hooks in the tx/rx
path by using the DT property as Phy time stamping takes precedence.
Similar capability is already provided in PA to disable time stamping
through DT property. If it is disabled through DT, then icotl command
to enable/disable hw time stamp will return an error.

The time stamping order is following provided the capability exists.
Phy -> cpts -> PA

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 drivers/net/ethernet/ti/netcp_ethss.c | 19 +++++++++++++++++--
 drivers/net/ethernet/ti/netcp_ethss.h |  1 +
 2 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/ti/netcp_ethss.c b/drivers/net/ethernet/ti/netcp_ethss.c
index 71b77b9..35b8c1b 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.c
+++ b/drivers/net/ethernet/ti/netcp_ethss.c
@@ -2468,6 +2468,9 @@ static int gbe_hwtstamp_get(struct gbe_intf *gbe_intf, struct ifreq *ifr)
 	struct cpts *cpts = &gbe_dev->cpts;
 	struct hwtstamp_config cfg;
 
+	if (gbe_dev->disable_hw_tstamp)
+		return -EOPNOTSUPP;
+
 	cfg.flags = 0;
 	cfg.tx_type = cpts->tx_enable ? HWTSTAMP_TX_ON : HWTSTAMP_TX_OFF;
 	cfg.rx_filter = (cpts->rx_enable ?
@@ -2511,6 +2514,9 @@ static int gbe_hwtstamp_set(struct gbe_intf *gbe_intf, struct ifreq *ifr)
 	struct cpts *cpts = &gbe_dev->cpts;
 	struct hwtstamp_config cfg;
 
+	if (gbe_dev->disable_hw_tstamp)
+		return -EOPNOTSUPP;
+
 	if (!cpts->reg)
 		return -EOPNOTSUPP;
 
@@ -2752,8 +2758,12 @@ static int gbe_open(void *intf_priv, struct net_device *ndev)
 	if (ret)
 		goto fail;
 
-	netcp_register_txhook(netcp, GBE_TXHOOK_ORDER, gbe_txhook, gbe_intf);
-	netcp_register_rxhook(netcp, GBE_RXHOOK_ORDER, gbe_rxhook, gbe_intf);
+	if (!gbe_dev->disable_hw_tstamp) {
+		netcp_register_txhook(netcp, GBE_TXHOOK_ORDER, gbe_txhook,
+				      gbe_intf);
+		netcp_register_rxhook(netcp, GBE_RXHOOK_ORDER, gbe_rxhook,
+				      gbe_intf);
+	}
 
 	slave->open = true;
 	netcp_ethss_update_link_state(gbe_dev, slave, ndev);
@@ -3522,6 +3532,11 @@ static int gbe_probe(struct netcp_device *netcp_device, struct device *dev,
 		dev_dbg(dev, "ALE bypass enabled*\n");
 	}
 
+	if (of_property_read_bool(node, "disable-hw-timestamp")) {
+		gbe_dev->disable_hw_tstamp = true;
+		dev_warn(dev, "No CPTS timestamping\n");
+	}
+
 	ret = of_property_read_u32(node, "tx-queue",
 				   &gbe_dev->tx_queue_id);
 	if (ret < 0) {
diff --git a/drivers/net/ethernet/ti/netcp_ethss.h b/drivers/net/ethernet/ti/netcp_ethss.h
index 4d1bfaf..8c298f9 100644
--- a/drivers/net/ethernet/ti/netcp_ethss.h
+++ b/drivers/net/ethernet/ti/netcp_ethss.h
@@ -108,6 +108,7 @@ struct gbe_priv {
 	u32				rx_packet_max;
 	u32				ss_version;
 	u32				stats_en_mask;
+	bool				disable_hw_tstamp;
 
 	struct regmap			*ss_regmap;
 	struct regmap			*pcsr_regmap;
-- 
1.9.1

