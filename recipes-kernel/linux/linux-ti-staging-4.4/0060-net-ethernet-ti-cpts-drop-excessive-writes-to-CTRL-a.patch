From 46df1f6dc290f8cae2bc4ad26dd3fce1300ea36b Mon Sep 17 00:00:00 2001
From: Grygorii Strashko <grygorii.strashko@ti.com>
Date: Fri, 28 Oct 2016 00:37:51 -0500
Subject: [PATCH 60/89] net: ethernet: ti: cpts: drop excessive writes to CTRL
 and INT_EN regs

CPTS module and IRQs are always enabled when CPTS is registered,
before starting overflow check work, and disabled during
deregistration, when overflow check work has been canceled already.
So, It doesn't require to (re)enable CPTS module and IRQs in
cpts_overflow_check().

Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
Signed-off-by: Jacob Stiffler <j-stiffler@ti.com>
---
 drivers/net/ethernet/ti/cpts.c | 7 -------
 1 file changed, 7 deletions(-)

diff --git a/drivers/net/ethernet/ti/cpts.c b/drivers/net/ethernet/ti/cpts.c
index 1b9d865..54c6089 100644
--- a/drivers/net/ethernet/ti/cpts.c
+++ b/drivers/net/ethernet/ti/cpts.c
@@ -325,16 +325,9 @@ static void cpts_overflow_check(struct work_struct *work)
 	struct cpts *cpts = container_of(work, struct cpts, overflow_work.work);
 	struct timespec64 ts;
 	unsigned long flags;
-	u32 v;
 
 	spin_lock_irqsave(&cpts->lock, flags);
-
-	v = cpts_read32(cpts, control);
-	cpts_write32(cpts, v | CPTS_EN, control);
-	cpts_write32(cpts, TS_PEND_EN, int_enable);
-
 	ts = ns_to_timespec64(timecounter_read(&cpts->tc));
-
 	spin_unlock_irqrestore(&cpts->lock, flags);
 
 	if (cpts->hw_ts_enable)
-- 
1.9.1

